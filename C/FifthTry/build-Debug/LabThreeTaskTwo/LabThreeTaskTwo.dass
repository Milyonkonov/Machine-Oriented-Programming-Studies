
..\build-Debug\bin\LabThreeTaskTwo.exe:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	@ (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fa02 	bl	2000040c <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			@ (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <setRowState>:
SysTick* sysTick = (SysTick*) STK_ADDRESS;
EXTI* exti = (EXTI*) EXTI_ADDRESS;
	
// Changes the state of a single row to newState.
void setRowState (int row, int newState)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	6039      	str	r1, [r7, #0]
	if (row == 0) 		{portE->outputData.pin12 = newState; }
2000001a:	687b      	ldr	r3, [r7, #4]
2000001c:	2b00      	cmp	r3, #0
2000001e:	d111      	bne.n	20000044 <setRowState+0x34>
20000020:	4b28      	ldr	r3, [pc, #160]	@ (200000c4 <setRowState+0xb4>)
20000022:	681a      	ldr	r2, [r3, #0]
20000024:	683b      	ldr	r3, [r7, #0]
20000026:	1c19      	adds	r1, r3, #0
20000028:	2301      	movs	r3, #1
2000002a:	400b      	ands	r3, r1
2000002c:	b2d9      	uxtb	r1, r3
2000002e:	7d53      	ldrb	r3, [r2, #21]
20000030:	2001      	movs	r0, #1
20000032:	4001      	ands	r1, r0
20000034:	0108      	lsls	r0, r1, #4
20000036:	2110      	movs	r1, #16
20000038:	438b      	bics	r3, r1
2000003a:	1c19      	adds	r1, r3, #0
2000003c:	1c03      	adds	r3, r0, #0
2000003e:	430b      	orrs	r3, r1
20000040:	7553      	strb	r3, [r2, #21]
	else if (row == 1) 	{portE->outputData.pin13 = newState; }
	else if (row == 2) 	{portE->outputData.pin14 = newState; }
	else if (row == 3) 	{portE->outputData.pin15 = newState; }
}
20000042:	e03b      	b.n	200000bc <setRowState+0xac>
	else if (row == 1) 	{portE->outputData.pin13 = newState; }
20000044:	687b      	ldr	r3, [r7, #4]
20000046:	2b01      	cmp	r3, #1
20000048:	d111      	bne.n	2000006e <setRowState+0x5e>
2000004a:	4b1e      	ldr	r3, [pc, #120]	@ (200000c4 <setRowState+0xb4>)
2000004c:	681a      	ldr	r2, [r3, #0]
2000004e:	683b      	ldr	r3, [r7, #0]
20000050:	1c19      	adds	r1, r3, #0
20000052:	2301      	movs	r3, #1
20000054:	400b      	ands	r3, r1
20000056:	b2d9      	uxtb	r1, r3
20000058:	7d53      	ldrb	r3, [r2, #21]
2000005a:	2001      	movs	r0, #1
2000005c:	4001      	ands	r1, r0
2000005e:	0148      	lsls	r0, r1, #5
20000060:	2120      	movs	r1, #32
20000062:	438b      	bics	r3, r1
20000064:	1c19      	adds	r1, r3, #0
20000066:	1c03      	adds	r3, r0, #0
20000068:	430b      	orrs	r3, r1
2000006a:	7553      	strb	r3, [r2, #21]
}
2000006c:	e026      	b.n	200000bc <setRowState+0xac>
	else if (row == 2) 	{portE->outputData.pin14 = newState; }
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	2b02      	cmp	r3, #2
20000072:	d111      	bne.n	20000098 <setRowState+0x88>
20000074:	4b13      	ldr	r3, [pc, #76]	@ (200000c4 <setRowState+0xb4>)
20000076:	681a      	ldr	r2, [r3, #0]
20000078:	683b      	ldr	r3, [r7, #0]
2000007a:	1c19      	adds	r1, r3, #0
2000007c:	2301      	movs	r3, #1
2000007e:	400b      	ands	r3, r1
20000080:	b2d9      	uxtb	r1, r3
20000082:	7d53      	ldrb	r3, [r2, #21]
20000084:	2001      	movs	r0, #1
20000086:	4001      	ands	r1, r0
20000088:	0188      	lsls	r0, r1, #6
2000008a:	2140      	movs	r1, #64	@ 0x40
2000008c:	438b      	bics	r3, r1
2000008e:	1c19      	adds	r1, r3, #0
20000090:	1c03      	adds	r3, r0, #0
20000092:	430b      	orrs	r3, r1
20000094:	7553      	strb	r3, [r2, #21]
}
20000096:	e011      	b.n	200000bc <setRowState+0xac>
	else if (row == 3) 	{portE->outputData.pin15 = newState; }
20000098:	687b      	ldr	r3, [r7, #4]
2000009a:	2b03      	cmp	r3, #3
2000009c:	d10e      	bne.n	200000bc <setRowState+0xac>
2000009e:	4b09      	ldr	r3, [pc, #36]	@ (200000c4 <setRowState+0xb4>)
200000a0:	681a      	ldr	r2, [r3, #0]
200000a2:	683b      	ldr	r3, [r7, #0]
200000a4:	1c19      	adds	r1, r3, #0
200000a6:	2301      	movs	r3, #1
200000a8:	400b      	ands	r3, r1
200000aa:	b2d9      	uxtb	r1, r3
200000ac:	7d53      	ldrb	r3, [r2, #21]
200000ae:	01c8      	lsls	r0, r1, #7
200000b0:	217f      	movs	r1, #127	@ 0x7f
200000b2:	400b      	ands	r3, r1
200000b4:	1c19      	adds	r1, r3, #0
200000b6:	1c03      	adds	r3, r0, #0
200000b8:	430b      	orrs	r3, r1
200000ba:	7553      	strb	r3, [r2, #21]
}
200000bc:	46c0      	nop			@ (mov r8, r8)
200000be:	46bd      	mov	sp, r7
200000c0:	b002      	add	sp, #8
200000c2:	bd80      	pop	{r7, pc}
200000c4:	2000057c 	andcs	r0, r0, ip, ror r5

200000c8 <readColumns>:

// Returns a column with a pressed button. 0xFF is returned with no button pressed.
unsigned char readColumns ()
{
200000c8:	b580      	push	{r7, lr}
200000ca:	af00      	add	r7, sp, #0
	// In the simulator we actually want to look for 1's in the IDR, since we don't have pull-up.
	if (portE->inputData.pin8 == 1) { return 0; }
200000cc:	4b15      	ldr	r3, [pc, #84]	@ (20000124 <readColumns+0x5c>)
200000ce:	681b      	ldr	r3, [r3, #0]
200000d0:	7c5b      	ldrb	r3, [r3, #17]
200000d2:	07db      	lsls	r3, r3, #31
200000d4:	0fdb      	lsrs	r3, r3, #31
200000d6:	b2db      	uxtb	r3, r3
200000d8:	2b01      	cmp	r3, #1
200000da:	d101      	bne.n	200000e0 <readColumns+0x18>
200000dc:	2300      	movs	r3, #0
200000de:	e01e      	b.n	2000011e <readColumns+0x56>
	if (portE->inputData.pin9 == 1) { return 1; }
200000e0:	4b10      	ldr	r3, [pc, #64]	@ (20000124 <readColumns+0x5c>)
200000e2:	681b      	ldr	r3, [r3, #0]
200000e4:	7c5b      	ldrb	r3, [r3, #17]
200000e6:	079b      	lsls	r3, r3, #30
200000e8:	0fdb      	lsrs	r3, r3, #31
200000ea:	b2db      	uxtb	r3, r3
200000ec:	2b01      	cmp	r3, #1
200000ee:	d101      	bne.n	200000f4 <readColumns+0x2c>
200000f0:	2301      	movs	r3, #1
200000f2:	e014      	b.n	2000011e <readColumns+0x56>
	if (portE->inputData.pin10 == 1) { return 2; }
200000f4:	4b0b      	ldr	r3, [pc, #44]	@ (20000124 <readColumns+0x5c>)
200000f6:	681b      	ldr	r3, [r3, #0]
200000f8:	7c5b      	ldrb	r3, [r3, #17]
200000fa:	075b      	lsls	r3, r3, #29
200000fc:	0fdb      	lsrs	r3, r3, #31
200000fe:	b2db      	uxtb	r3, r3
20000100:	2b01      	cmp	r3, #1
20000102:	d101      	bne.n	20000108 <readColumns+0x40>
20000104:	2302      	movs	r3, #2
20000106:	e00a      	b.n	2000011e <readColumns+0x56>
	if (portE->inputData.pin11 == 1) { return 3; }
20000108:	4b06      	ldr	r3, [pc, #24]	@ (20000124 <readColumns+0x5c>)
2000010a:	681b      	ldr	r3, [r3, #0]
2000010c:	7c5b      	ldrb	r3, [r3, #17]
2000010e:	071b      	lsls	r3, r3, #28
20000110:	0fdb      	lsrs	r3, r3, #31
20000112:	b2db      	uxtb	r3, r3
20000114:	2b01      	cmp	r3, #1
20000116:	d101      	bne.n	2000011c <readColumns+0x54>
20000118:	2303      	movs	r3, #3
2000011a:	e000      	b.n	2000011e <readColumns+0x56>
	
	return 0xFF;
2000011c:	23ff      	movs	r3, #255	@ 0xff
}
2000011e:	0018      	movs	r0, r3
20000120:	46bd      	mov	sp, r7
20000122:	bd80      	pop	{r7, pc}
20000124:	2000057c 	andcs	r0, r0, ip, ror r5

20000128 <keyb>:
{14, 0, 15, 13}	
};
	
// Returns the hexadecimal digit pressed on the keypad, or 0xFF if none is pressed.
unsigned char keyb(void)
{
20000128:	b590      	push	{r4, r7, lr}
2000012a:	b083      	sub	sp, #12
2000012c:	af00      	add	r7, sp, #0
	for (int row = 0; row < 4; row++) {
2000012e:	2300      	movs	r3, #0
20000130:	607b      	str	r3, [r7, #4]
20000132:	e01d      	b.n	20000170 <keyb+0x48>
		
		// setRowState in the opposite order from real hardware, since we have to read the 1's without pull-up...
		setRowState(row, 1);
20000134:	687b      	ldr	r3, [r7, #4]
20000136:	2101      	movs	r1, #1
20000138:	0018      	movs	r0, r3
2000013a:	f7ff ff69 	bl	20000010 <setRowState>
		unsigned char columnPressed = readColumns ();
2000013e:	1cfc      	adds	r4, r7, #3
20000140:	f7ff ffc2 	bl	200000c8 <readColumns>
20000144:	0003      	movs	r3, r0
20000146:	7023      	strb	r3, [r4, #0]
		setRowState(row, 0);
20000148:	687b      	ldr	r3, [r7, #4]
2000014a:	2100      	movs	r1, #0
2000014c:	0018      	movs	r0, r3
2000014e:	f7ff ff5f 	bl	20000010 <setRowState>
		
		if (columnPressed != 0xFF)
20000152:	1cfb      	adds	r3, r7, #3
20000154:	781b      	ldrb	r3, [r3, #0]
20000156:	2bff      	cmp	r3, #255	@ 0xff
20000158:	d007      	beq.n	2000016a <keyb+0x42>
		{
			return keyValue[row][columnPressed];
2000015a:	1cfb      	adds	r3, r7, #3
2000015c:	781b      	ldrb	r3, [r3, #0]
2000015e:	4908      	ldr	r1, [pc, #32]	@ (20000180 <keyb+0x58>)
20000160:	687a      	ldr	r2, [r7, #4]
20000162:	0092      	lsls	r2, r2, #2
20000164:	188a      	adds	r2, r1, r2
20000166:	5cd3      	ldrb	r3, [r2, r3]
20000168:	e006      	b.n	20000178 <keyb+0x50>
	for (int row = 0; row < 4; row++) {
2000016a:	687b      	ldr	r3, [r7, #4]
2000016c:	3301      	adds	r3, #1
2000016e:	607b      	str	r3, [r7, #4]
20000170:	687b      	ldr	r3, [r7, #4]
20000172:	2b03      	cmp	r3, #3
20000174:	ddde      	ble.n	20000134 <keyb+0xc>
		}
	}
	
	return 0xFF;
20000176:	23ff      	movs	r3, #255	@ 0xff
}
20000178:	0018      	movs	r0, r3
2000017a:	46bd      	mov	sp, r7
2000017c:	b003      	add	sp, #12
2000017e:	bd90      	pop	{r4, r7, pc}
20000180:	20000588 	andcs	r0, r0, r8, lsl #11

20000184 <KeyPressedHandler>:
volatile unsigned char currently_pressed_key = 0xFF; // Global variabel som skall vara 0xFF om ingen tangent
											// Ã¤r nedtryckt och annars identifierar den nedtryckta
											// knappen. 
								
void KeyPressedHandler()
{
20000184:	b580      	push	{r7, lr}
20000186:	af00      	add	r7, sp, #0
	exti->IMR = 0;		// Mask interrupts so the activating of the rows to read which key is pressed doesn't cause interrupts..?
20000188:	4b13      	ldr	r3, [pc, #76]	@ (200001d8 <KeyPressedHandler+0x54>)
2000018a:	681b      	ldr	r3, [r3, #0]
2000018c:	2200      	movs	r2, #0
2000018e:	601a      	str	r2, [r3, #0]
	
	// keyb() activates each row sequentially to read which key is pressed, so all rows must be low when function is called.
	portE->ODR_HIGH = 0;
20000190:	4b12      	ldr	r3, [pc, #72]	@ (200001dc <KeyPressedHandler+0x58>)
20000192:	681b      	ldr	r3, [r3, #0]
20000194:	2200      	movs	r2, #0
20000196:	755a      	strb	r2, [r3, #21]
	currently_pressed_key = keyb();
20000198:	f7ff ffc6 	bl	20000128 <keyb>
2000019c:	0003      	movs	r3, r0
2000019e:	001a      	movs	r2, r3
200001a0:	4b0f      	ldr	r3, [pc, #60]	@ (200001e0 <KeyPressedHandler+0x5c>)
200001a2:	701a      	strb	r2, [r3, #0]
	portE->ODR_HIGH = 0xF0;		// Activate all rows again to "listen" for keypress interrupts.
200001a4:	4b0d      	ldr	r3, [pc, #52]	@ (200001dc <KeyPressedHandler+0x58>)
200001a6:	681b      	ldr	r3, [r3, #0]
200001a8:	22f0      	movs	r2, #240	@ 0xf0
200001aa:	755a      	strb	r2, [r3, #21]
	
	exti->IMR |= 0b1111 << 8;	// Allow interrupts again
200001ac:	4b0a      	ldr	r3, [pc, #40]	@ (200001d8 <KeyPressedHandler+0x54>)
200001ae:	681b      	ldr	r3, [r3, #0]
200001b0:	681a      	ldr	r2, [r3, #0]
200001b2:	4b09      	ldr	r3, [pc, #36]	@ (200001d8 <KeyPressedHandler+0x54>)
200001b4:	681b      	ldr	r3, [r3, #0]
200001b6:	21f0      	movs	r1, #240	@ 0xf0
200001b8:	0109      	lsls	r1, r1, #4
200001ba:	430a      	orrs	r2, r1
200001bc:	601a      	str	r2, [r3, #0]
	exti->PR |= 0b1111 << 8;	// Acknowledge interrupt as complete for all pins.
200001be:	4b06      	ldr	r3, [pc, #24]	@ (200001d8 <KeyPressedHandler+0x54>)
200001c0:	681b      	ldr	r3, [r3, #0]
200001c2:	695a      	ldr	r2, [r3, #20]
200001c4:	4b04      	ldr	r3, [pc, #16]	@ (200001d8 <KeyPressedHandler+0x54>)
200001c6:	681b      	ldr	r3, [r3, #0]
200001c8:	21f0      	movs	r1, #240	@ 0xf0
200001ca:	0109      	lsls	r1, r1, #4
200001cc:	430a      	orrs	r2, r1
200001ce:	615a      	str	r2, [r3, #20]
}
200001d0:	46c0      	nop			@ (mov r8, r8)
200001d2:	46bd      	mov	sp, r7
200001d4:	bd80      	pop	{r7, pc}
200001d6:	46c0      	nop			@ (mov r8, r8)
200001d8:	20000584 	andcs	r0, r0, r4, lsl #11
200001dc:	2000057c 	andcs	r0, r0, ip, ror r5
200001e0:	20000598 	mulcs	r0, r8, r5

200001e4 <InitKeyboard>:
									 
// Den hÃ¤r funktionen skall konfigurera Ã¶vre byten av Port E och aktivera ALLA rader pÃ¥ keyboarden.
// Interrupts skall initieras sÃ¥ att en interrupt handler kallas nÃ¤r nÃ¥gon knapp trycks ner. 
// Interrupthandlern skall uppdatera "currently_pressed_key"
void InitKeyboard()
{
200001e4:	b580      	push	{r7, lr}
200001e6:	af00      	add	r7, sp, #0
	// <--Mode configuration for port E-->
	// Lower nibble of higher byte, the columns, are input without pull-up since it's broken on simulator.
	portE->mode.pin8 = MODE_INPUT;
200001e8:	4b3e      	ldr	r3, [pc, #248]	@ (200002e4 <InitKeyboard+0x100>)
200001ea:	681a      	ldr	r2, [r3, #0]
200001ec:	7893      	ldrb	r3, [r2, #2]
200001ee:	2103      	movs	r1, #3
200001f0:	438b      	bics	r3, r1
200001f2:	7093      	strb	r3, [r2, #2]
	portE->mode.pin9 = MODE_INPUT;
200001f4:	4b3b      	ldr	r3, [pc, #236]	@ (200002e4 <InitKeyboard+0x100>)
200001f6:	681a      	ldr	r2, [r3, #0]
200001f8:	7893      	ldrb	r3, [r2, #2]
200001fa:	210c      	movs	r1, #12
200001fc:	438b      	bics	r3, r1
200001fe:	7093      	strb	r3, [r2, #2]
	portE->mode.pin10 = MODE_INPUT;
20000200:	4b38      	ldr	r3, [pc, #224]	@ (200002e4 <InitKeyboard+0x100>)
20000202:	681a      	ldr	r2, [r3, #0]
20000204:	7893      	ldrb	r3, [r2, #2]
20000206:	2130      	movs	r1, #48	@ 0x30
20000208:	438b      	bics	r3, r1
2000020a:	7093      	strb	r3, [r2, #2]
	portE->mode.pin11 = MODE_INPUT;
2000020c:	4b35      	ldr	r3, [pc, #212]	@ (200002e4 <InitKeyboard+0x100>)
2000020e:	681a      	ldr	r2, [r3, #0]
20000210:	7893      	ldrb	r3, [r2, #2]
20000212:	213f      	movs	r1, #63	@ 0x3f
20000214:	400b      	ands	r3, r1
20000216:	7093      	strb	r3, [r2, #2]
	
	// Higher nibble of higher byte, the rows, are output in open-drain.
	portE->mode.pin12 = MODE_OUTPUT;
20000218:	4b32      	ldr	r3, [pc, #200]	@ (200002e4 <InitKeyboard+0x100>)
2000021a:	681a      	ldr	r2, [r3, #0]
2000021c:	78d3      	ldrb	r3, [r2, #3]
2000021e:	2103      	movs	r1, #3
20000220:	438b      	bics	r3, r1
20000222:	1c19      	adds	r1, r3, #0
20000224:	2301      	movs	r3, #1
20000226:	430b      	orrs	r3, r1
20000228:	70d3      	strb	r3, [r2, #3]
	portE->mode.pin13 = MODE_OUTPUT;
2000022a:	4b2e      	ldr	r3, [pc, #184]	@ (200002e4 <InitKeyboard+0x100>)
2000022c:	681a      	ldr	r2, [r3, #0]
2000022e:	78d3      	ldrb	r3, [r2, #3]
20000230:	210c      	movs	r1, #12
20000232:	438b      	bics	r3, r1
20000234:	1c19      	adds	r1, r3, #0
20000236:	2304      	movs	r3, #4
20000238:	430b      	orrs	r3, r1
2000023a:	70d3      	strb	r3, [r2, #3]
	portE->mode.pin14 = MODE_OUTPUT;
2000023c:	4b29      	ldr	r3, [pc, #164]	@ (200002e4 <InitKeyboard+0x100>)
2000023e:	681a      	ldr	r2, [r3, #0]
20000240:	78d3      	ldrb	r3, [r2, #3]
20000242:	2130      	movs	r1, #48	@ 0x30
20000244:	438b      	bics	r3, r1
20000246:	1c19      	adds	r1, r3, #0
20000248:	2310      	movs	r3, #16
2000024a:	430b      	orrs	r3, r1
2000024c:	70d3      	strb	r3, [r2, #3]
	portE->mode.pin15 = MODE_OUTPUT;
2000024e:	4b25      	ldr	r3, [pc, #148]	@ (200002e4 <InitKeyboard+0x100>)
20000250:	681a      	ldr	r2, [r3, #0]
20000252:	78d3      	ldrb	r3, [r2, #3]
20000254:	213f      	movs	r1, #63	@ 0x3f
20000256:	400b      	ands	r3, r1
20000258:	1c19      	adds	r1, r3, #0
2000025a:	2340      	movs	r3, #64	@ 0x40
2000025c:	430b      	orrs	r3, r1
2000025e:	70d3      	strb	r3, [r2, #3]
	// Simulator doesn't understand pull-up so we have to use push-pull (which would short output pins, bruh)
	portE->outputType.pin12 = OTYPE_PUSH_PULL;
20000260:	4b20      	ldr	r3, [pc, #128]	@ (200002e4 <InitKeyboard+0x100>)
20000262:	681a      	ldr	r2, [r3, #0]
20000264:	7953      	ldrb	r3, [r2, #5]
20000266:	2110      	movs	r1, #16
20000268:	438b      	bics	r3, r1
2000026a:	7153      	strb	r3, [r2, #5]
	portE->outputType.pin13 = OTYPE_PUSH_PULL;
2000026c:	4b1d      	ldr	r3, [pc, #116]	@ (200002e4 <InitKeyboard+0x100>)
2000026e:	681a      	ldr	r2, [r3, #0]
20000270:	7953      	ldrb	r3, [r2, #5]
20000272:	2120      	movs	r1, #32
20000274:	438b      	bics	r3, r1
20000276:	7153      	strb	r3, [r2, #5]
	portE->outputType.pin14 = OTYPE_PUSH_PULL;
20000278:	4b1a      	ldr	r3, [pc, #104]	@ (200002e4 <InitKeyboard+0x100>)
2000027a:	681a      	ldr	r2, [r3, #0]
2000027c:	7953      	ldrb	r3, [r2, #5]
2000027e:	2140      	movs	r1, #64	@ 0x40
20000280:	438b      	bics	r3, r1
20000282:	7153      	strb	r3, [r2, #5]
	portE->outputType.pin15 = OTYPE_PUSH_PULL;
20000284:	4b17      	ldr	r3, [pc, #92]	@ (200002e4 <InitKeyboard+0x100>)
20000286:	681a      	ldr	r2, [r3, #0]
20000288:	7953      	ldrb	r3, [r2, #5]
2000028a:	217f      	movs	r1, #127	@ 0x7f
2000028c:	400b      	ands	r3, r1
2000028e:	7153      	strb	r3, [r2, #5]
	
	portE->ODR_HIGH = 0xF0;		// Activate all rows (to sense a press for interrupts)
20000290:	4b14      	ldr	r3, [pc, #80]	@ (200002e4 <InitKeyboard+0x100>)
20000292:	681b      	ldr	r3, [r3, #0]
20000294:	22f0      	movs	r2, #240	@ 0xf0
20000296:	755a      	strb	r2, [r3, #21]
	
	// <--Configure interrupts-->
	// Connect port E to external interrupts on pin 8-11 through SYSCFG.
	*(unsigned short*) (SYSCFG_ADDRESS + 0x10) = 0x4444; // Mask for E = 0100 = 0x4 (* 4 nibbles)
20000298:	4b13      	ldr	r3, [pc, #76]	@ (200002e8 <InitKeyboard+0x104>)
2000029a:	4a14      	ldr	r2, [pc, #80]	@ (200002ec <InitKeyboard+0x108>)
2000029c:	801a      	strh	r2, [r3, #0]
	
	// EXTI specifies which pins can cause an interrupt and under what condition:
	exti->IMR |= 0b1111 << 8;	// Pins 8-11 can activate interrupts...
2000029e:	4b14      	ldr	r3, [pc, #80]	@ (200002f0 <InitKeyboard+0x10c>)
200002a0:	681b      	ldr	r3, [r3, #0]
200002a2:	681a      	ldr	r2, [r3, #0]
200002a4:	4b12      	ldr	r3, [pc, #72]	@ (200002f0 <InitKeyboard+0x10c>)
200002a6:	681b      	ldr	r3, [r3, #0]
200002a8:	21f0      	movs	r1, #240	@ 0xf0
200002aa:	0109      	lsls	r1, r1, #4
200002ac:	430a      	orrs	r2, r1
200002ae:	601a      	str	r2, [r3, #0]
	exti->RTSR |= 0b1111 << 8;	// on a rising edge, or rather, a button press.
200002b0:	4b0f      	ldr	r3, [pc, #60]	@ (200002f0 <InitKeyboard+0x10c>)
200002b2:	681b      	ldr	r3, [r3, #0]
200002b4:	689a      	ldr	r2, [r3, #8]
200002b6:	4b0e      	ldr	r3, [pc, #56]	@ (200002f0 <InitKeyboard+0x10c>)
200002b8:	681b      	ldr	r3, [r3, #0]
200002ba:	21f0      	movs	r1, #240	@ 0xf0
200002bc:	0109      	lsls	r1, r1, #4
200002be:	430a      	orrs	r2, r1
200002c0:	609a      	str	r2, [r3, #8]
	
	// Setting interrupt handler pointers in vector table.
	// Expecting interrupts on pins 8-11 which spans over both higher interrupt lines.
	*(void (**)(void)) (VTOR_ADDRESS + EXTI9_5_OFFSET) = &KeyPressedHandler;
200002c2:	4b0c      	ldr	r3, [pc, #48]	@ (200002f4 <InitKeyboard+0x110>)
200002c4:	4a0c      	ldr	r2, [pc, #48]	@ (200002f8 <InitKeyboard+0x114>)
200002c6:	601a      	str	r2, [r3, #0]
	*(void (**)(void)) (VTOR_ADDRESS + EXTI15_10_OFFSET) = &KeyPressedHandler;
200002c8:	4b0c      	ldr	r3, [pc, #48]	@ (200002fc <InitKeyboard+0x118>)
200002ca:	4a0b      	ldr	r2, [pc, #44]	@ (200002f8 <InitKeyboard+0x114>)
200002cc:	601a      	str	r2, [r3, #0]
	
	//Enable IRQ 23 and IRQ 40 in NVIC (so interrupts actually calls our handler function) 
	*(unsigned int*) NVIC_ADDRESS = 1 << 23;
200002ce:	4b0c      	ldr	r3, [pc, #48]	@ (20000300 <InitKeyboard+0x11c>)
200002d0:	2280      	movs	r2, #128	@ 0x80
200002d2:	0412      	lsls	r2, r2, #16
200002d4:	601a      	str	r2, [r3, #0]
	*(unsigned int*) (NVIC_ADDRESS + 4) = 1 << 8;
200002d6:	4b0b      	ldr	r3, [pc, #44]	@ (20000304 <InitKeyboard+0x120>)
200002d8:	2280      	movs	r2, #128	@ 0x80
200002da:	0052      	lsls	r2, r2, #1
200002dc:	601a      	str	r2, [r3, #0]
}
200002de:	46c0      	nop			@ (mov r8, r8)
200002e0:	46bd      	mov	sp, r7
200002e2:	bd80      	pop	{r7, pc}
200002e4:	2000057c 	andcs	r0, r0, ip, ror r5
200002e8:	40013810 	andmi	r3, r1, r0, lsl r8
200002ec:	00004444 	andeq	r4, r0, r4, asr #8
200002f0:	20000584 	andcs	r0, r0, r4, lsl #11
200002f4:	2001c09c 	mulcs	r1, ip, r0
200002f8:	20000185 	andcs	r0, r0, r5, lsl #3
200002fc:	2001c0e0 	andcs	ip, r1, r0, ror #1
20000300:	e000e100 	and	lr, r0, r0, lsl #2
20000304:	e000e104 	and	lr, r0, r4, lsl #2

20000308 <InvertWave>:

void InvertWave()
{
20000308:	b580      	push	{r7, lr}
2000030a:	af00      	add	r7, sp, #0
	portE->outputData.pin0 ^= 1;
2000030c:	4b0b      	ldr	r3, [pc, #44]	@ (2000033c <InvertWave+0x34>)
2000030e:	681b      	ldr	r3, [r3, #0]
20000310:	7d1b      	ldrb	r3, [r3, #20]
20000312:	07db      	lsls	r3, r3, #31
20000314:	0fdb      	lsrs	r3, r3, #31
20000316:	b2d9      	uxtb	r1, r3
20000318:	4b08      	ldr	r3, [pc, #32]	@ (2000033c <InvertWave+0x34>)
2000031a:	681a      	ldr	r2, [r3, #0]
2000031c:	2301      	movs	r3, #1
2000031e:	404b      	eors	r3, r1
20000320:	b2d9      	uxtb	r1, r3
20000322:	7d13      	ldrb	r3, [r2, #20]
20000324:	2001      	movs	r0, #1
20000326:	4008      	ands	r0, r1
20000328:	2101      	movs	r1, #1
2000032a:	438b      	bics	r3, r1
2000032c:	1c19      	adds	r1, r3, #0
2000032e:	1c03      	adds	r3, r0, #0
20000330:	430b      	orrs	r3, r1
20000332:	7513      	strb	r3, [r2, #20]
}
20000334:	46c0      	nop			@ (mov r8, r8)
20000336:	46bd      	mov	sp, r7
20000338:	bd80      	pop	{r7, pc}
2000033a:	46c0      	nop			@ (mov r8, r8)
2000033c:	2000057c 	andcs	r0, r0, ip, ror r5

20000340 <InitSquareWave>:

// I den hÃ¤r funktionen skall lÃ¤gre byten av Port E fÃ¶rberedas fÃ¶r att lÃ¤gga
// ut en signal pÃ¥ pinne 0. Den skall bara kallas en gÃ¥ng. 
void InitSquareWave()
{
20000340:	b580      	push	{r7, lr}
20000342:	af00      	add	r7, sp, #0
	portE->mode.pin0 = MODE_OUTPUT;
20000344:	4b0b      	ldr	r3, [pc, #44]	@ (20000374 <InitSquareWave+0x34>)
20000346:	681a      	ldr	r2, [r3, #0]
20000348:	7813      	ldrb	r3, [r2, #0]
2000034a:	2103      	movs	r1, #3
2000034c:	438b      	bics	r3, r1
2000034e:	1c19      	adds	r1, r3, #0
20000350:	2301      	movs	r3, #1
20000352:	430b      	orrs	r3, r1
20000354:	7013      	strb	r3, [r2, #0]
	portE->outputType.pin0 = OTYPE_PUSH_PULL;
20000356:	4b07      	ldr	r3, [pc, #28]	@ (20000374 <InitSquareWave+0x34>)
20000358:	681a      	ldr	r2, [r3, #0]
2000035a:	7913      	ldrb	r3, [r2, #4]
2000035c:	2101      	movs	r1, #1
2000035e:	438b      	bics	r3, r1
20000360:	7113      	strb	r3, [r2, #4]
	portE->outputSpeed.pin0 = OSPEED_LOW; // Jag vet inte hur snabbt ni vill ha det men men... Â¯\_(ã)_/Â¯
20000362:	4b04      	ldr	r3, [pc, #16]	@ (20000374 <InitSquareWave+0x34>)
20000364:	681a      	ldr	r2, [r3, #0]
20000366:	7a13      	ldrb	r3, [r2, #8]
20000368:	2103      	movs	r1, #3
2000036a:	438b      	bics	r3, r1
2000036c:	7213      	strb	r3, [r2, #8]
}
2000036e:	46c0      	nop			@ (mov r8, r8)
20000370:	46bd      	mov	sp, r7
20000372:	bd80      	pop	{r7, pc}
20000374:	2000057c 	andcs	r0, r0, ip, ror r5

20000378 <StartSquareWave>:

// NÃ¤r man kallat den hÃ¤r funktionen skall en fyrkantsvÃ¥g med given period 
// (i mikrosekunder) lÃ¤ggas ut pÃ¥ pinne 0, Port E. Perioden skall kunna 
// vara upp till 99000 mikrosekunder.
void StartSquareWave(unsigned int period_in_us)
{
20000378:	b590      	push	{r4, r7, lr}
2000037a:	b083      	sub	sp, #12
2000037c:	af00      	add	r7, sp, #0
2000037e:	6078      	str	r0, [r7, #4]
	sysTick->CLKSOURCE = CLK_SRC_ACTUAL;
20000380:	4b14      	ldr	r3, [pc, #80]	@ (200003d4 <StartSquareWave+0x5c>)
20000382:	681b      	ldr	r3, [r3, #0]
20000384:	781a      	ldrb	r2, [r3, #0]
20000386:	2104      	movs	r1, #4
20000388:	430a      	orrs	r2, r1
2000038a:	701a      	strb	r2, [r3, #0]
	*((void (**)(void)) (VTOR_ADDRESS + 0x3C)) = &InvertWave;
2000038c:	4b12      	ldr	r3, [pc, #72]	@ (200003d8 <StartSquareWave+0x60>)
2000038e:	4a13      	ldr	r2, [pc, #76]	@ (200003dc <StartSquareWave+0x64>)
20000390:	601a      	str	r2, [r3, #0]
	sysTick->TICKINT = 1;
20000392:	4b10      	ldr	r3, [pc, #64]	@ (200003d4 <StartSquareWave+0x5c>)
20000394:	681b      	ldr	r3, [r3, #0]
20000396:	781a      	ldrb	r2, [r3, #0]
20000398:	2102      	movs	r1, #2
2000039a:	430a      	orrs	r2, r1
2000039c:	701a      	strb	r2, [r3, #0]
	sysTick->LOAD = period_in_us * 1000 / 6 / 2; // Perioden mÃ¥ste halveras eftersom vÃ¥gen ska byta nivÃ¥ 2 gÃ¥nger per period.
2000039e:	687a      	ldr	r2, [r7, #4]
200003a0:	0013      	movs	r3, r2
200003a2:	015b      	lsls	r3, r3, #5
200003a4:	1a9b      	subs	r3, r3, r2
200003a6:	009b      	lsls	r3, r3, #2
200003a8:	189b      	adds	r3, r3, r2
200003aa:	00db      	lsls	r3, r3, #3
200003ac:	001a      	movs	r2, r3
200003ae:	4b09      	ldr	r3, [pc, #36]	@ (200003d4 <StartSquareWave+0x5c>)
200003b0:	681c      	ldr	r4, [r3, #0]
200003b2:	210c      	movs	r1, #12
200003b4:	0010      	movs	r0, r2
200003b6:	f000 f855 	bl	20000464 <__udivsi3>
200003ba:	0003      	movs	r3, r0
200003bc:	6063      	str	r3, [r4, #4]
	sysTick->ENABLE = 1;
200003be:	4b05      	ldr	r3, [pc, #20]	@ (200003d4 <StartSquareWave+0x5c>)
200003c0:	681b      	ldr	r3, [r3, #0]
200003c2:	781a      	ldrb	r2, [r3, #0]
200003c4:	2101      	movs	r1, #1
200003c6:	430a      	orrs	r2, r1
200003c8:	701a      	strb	r2, [r3, #0]
}
200003ca:	46c0      	nop			@ (mov r8, r8)
200003cc:	46bd      	mov	sp, r7
200003ce:	b003      	add	sp, #12
200003d0:	bd90      	pop	{r4, r7, pc}
200003d2:	46c0      	nop			@ (mov r8, r8)
200003d4:	20000580 	andcs	r0, r0, r0, lsl #11
200003d8:	2001c03c 	andcs	ip, r1, ip, lsr r0
200003dc:	20000309 	andcs	r0, r0, r9, lsl #6

200003e0 <StopSquareWave>:

// Den hÃ¤r funktionen skall avbryta fyrkantsvÃ¥gen. 
void StopSquareWave()
{
200003e0:	b580      	push	{r7, lr}
200003e2:	af00      	add	r7, sp, #0
	portE->outputData.pin0 = 0;
200003e4:	4b07      	ldr	r3, [pc, #28]	@ (20000404 <StopSquareWave+0x24>)
200003e6:	681a      	ldr	r2, [r3, #0]
200003e8:	7d13      	ldrb	r3, [r2, #20]
200003ea:	2101      	movs	r1, #1
200003ec:	438b      	bics	r3, r1
200003ee:	7513      	strb	r3, [r2, #20]
	sysTick->ENABLE = 0;
200003f0:	4b05      	ldr	r3, [pc, #20]	@ (20000408 <StopSquareWave+0x28>)
200003f2:	681b      	ldr	r3, [r3, #0]
200003f4:	781a      	ldrb	r2, [r3, #0]
200003f6:	2101      	movs	r1, #1
200003f8:	438a      	bics	r2, r1
200003fa:	701a      	strb	r2, [r3, #0]
}
200003fc:	46c0      	nop			@ (mov r8, r8)
200003fe:	46bd      	mov	sp, r7
20000400:	bd80      	pop	{r7, pc}
20000402:	46c0      	nop			@ (mov r8, r8)
20000404:	2000057c 	andcs	r0, r0, ip, ror r5
20000408:	20000580 	andcs	r0, r0, r0, lsl #11

2000040c <main>:

#define PERIOD 1000

void main()
{
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
  InitSquareWave();
20000410:	f7ff ff96 	bl	20000340 <InitSquareWave>
  InitKeyboard();
20000414:	f7ff fee6 	bl	200001e4 <InitKeyboard>
  StartSquareWave(PERIOD); 
20000418:	23fa      	movs	r3, #250	@ 0xfa
2000041a:	009b      	lsls	r3, r3, #2
2000041c:	0018      	movs	r0, r3
2000041e:	f7ff ffab 	bl	20000378 <StartSquareWave>
  while(currently_pressed_key != 0) { /* GÃ¶r ingenting */ }
20000422:	46c0      	nop			@ (mov r8, r8)
20000424:	4b0e      	ldr	r3, [pc, #56]	@ (20000460 <main+0x54>)
20000426:	781b      	ldrb	r3, [r3, #0]
20000428:	b2db      	uxtb	r3, r3
2000042a:	2b00      	cmp	r3, #0
2000042c:	d1fa      	bne.n	20000424 <main+0x18>
  StopSquareWave(); 
2000042e:	f7ff ffd7 	bl	200003e0 <StopSquareWave>
  while(currently_pressed_key != 5) { /* GÃ¶r ingenting */ }
20000432:	46c0      	nop			@ (mov r8, r8)
20000434:	4b0a      	ldr	r3, [pc, #40]	@ (20000460 <main+0x54>)
20000436:	781b      	ldrb	r3, [r3, #0]
20000438:	b2db      	uxtb	r3, r3
2000043a:	2b05      	cmp	r3, #5
2000043c:	d1fa      	bne.n	20000434 <main+0x28>
  StartSquareWave(PERIOD * 2); 
2000043e:	23fa      	movs	r3, #250	@ 0xfa
20000440:	00db      	lsls	r3, r3, #3
20000442:	0018      	movs	r0, r3
20000444:	f7ff ff98 	bl	20000378 <StartSquareWave>
  while(currently_pressed_key != 10) { /* GÃ¶r ingenting */ }
20000448:	46c0      	nop			@ (mov r8, r8)
2000044a:	4b05      	ldr	r3, [pc, #20]	@ (20000460 <main+0x54>)
2000044c:	781b      	ldrb	r3, [r3, #0]
2000044e:	b2db      	uxtb	r3, r3
20000450:	2b0a      	cmp	r3, #10
20000452:	d1fa      	bne.n	2000044a <main+0x3e>
  StopSquareWave(); 
20000454:	f7ff ffc4 	bl	200003e0 <StopSquareWave>
}
20000458:	46c0      	nop			@ (mov r8, r8)
2000045a:	46bd      	mov	sp, r7
2000045c:	bd80      	pop	{r7, pc}
2000045e:	46c0      	nop			@ (mov r8, r8)
20000460:	20000598 	mulcs	r0, r8, r5

20000464 <__udivsi3>:
20000464:	2200      	movs	r2, #0
20000466:	0843      	lsrs	r3, r0, #1
20000468:	428b      	cmp	r3, r1
2000046a:	d374      	bcc.n	20000556 <__udivsi3+0xf2>
2000046c:	0903      	lsrs	r3, r0, #4
2000046e:	428b      	cmp	r3, r1
20000470:	d35f      	bcc.n	20000532 <__udivsi3+0xce>
20000472:	0a03      	lsrs	r3, r0, #8
20000474:	428b      	cmp	r3, r1
20000476:	d344      	bcc.n	20000502 <__udivsi3+0x9e>
20000478:	0b03      	lsrs	r3, r0, #12
2000047a:	428b      	cmp	r3, r1
2000047c:	d328      	bcc.n	200004d0 <__udivsi3+0x6c>
2000047e:	0c03      	lsrs	r3, r0, #16
20000480:	428b      	cmp	r3, r1
20000482:	d30d      	bcc.n	200004a0 <__udivsi3+0x3c>
20000484:	22ff      	movs	r2, #255	@ 0xff
20000486:	0209      	lsls	r1, r1, #8
20000488:	ba12      	rev	r2, r2
2000048a:	0c03      	lsrs	r3, r0, #16
2000048c:	428b      	cmp	r3, r1
2000048e:	d302      	bcc.n	20000496 <__udivsi3+0x32>
20000490:	1212      	asrs	r2, r2, #8
20000492:	0209      	lsls	r1, r1, #8
20000494:	d065      	beq.n	20000562 <__udivsi3+0xfe>
20000496:	0b03      	lsrs	r3, r0, #12
20000498:	428b      	cmp	r3, r1
2000049a:	d319      	bcc.n	200004d0 <__udivsi3+0x6c>
2000049c:	e000      	b.n	200004a0 <__udivsi3+0x3c>
2000049e:	0a09      	lsrs	r1, r1, #8
200004a0:	0bc3      	lsrs	r3, r0, #15
200004a2:	428b      	cmp	r3, r1
200004a4:	d301      	bcc.n	200004aa <__udivsi3+0x46>
200004a6:	03cb      	lsls	r3, r1, #15
200004a8:	1ac0      	subs	r0, r0, r3
200004aa:	4152      	adcs	r2, r2
200004ac:	0b83      	lsrs	r3, r0, #14
200004ae:	428b      	cmp	r3, r1
200004b0:	d301      	bcc.n	200004b6 <__udivsi3+0x52>
200004b2:	038b      	lsls	r3, r1, #14
200004b4:	1ac0      	subs	r0, r0, r3
200004b6:	4152      	adcs	r2, r2
200004b8:	0b43      	lsrs	r3, r0, #13
200004ba:	428b      	cmp	r3, r1
200004bc:	d301      	bcc.n	200004c2 <__udivsi3+0x5e>
200004be:	034b      	lsls	r3, r1, #13
200004c0:	1ac0      	subs	r0, r0, r3
200004c2:	4152      	adcs	r2, r2
200004c4:	0b03      	lsrs	r3, r0, #12
200004c6:	428b      	cmp	r3, r1
200004c8:	d301      	bcc.n	200004ce <__udivsi3+0x6a>
200004ca:	030b      	lsls	r3, r1, #12
200004cc:	1ac0      	subs	r0, r0, r3
200004ce:	4152      	adcs	r2, r2
200004d0:	0ac3      	lsrs	r3, r0, #11
200004d2:	428b      	cmp	r3, r1
200004d4:	d301      	bcc.n	200004da <__udivsi3+0x76>
200004d6:	02cb      	lsls	r3, r1, #11
200004d8:	1ac0      	subs	r0, r0, r3
200004da:	4152      	adcs	r2, r2
200004dc:	0a83      	lsrs	r3, r0, #10
200004de:	428b      	cmp	r3, r1
200004e0:	d301      	bcc.n	200004e6 <__udivsi3+0x82>
200004e2:	028b      	lsls	r3, r1, #10
200004e4:	1ac0      	subs	r0, r0, r3
200004e6:	4152      	adcs	r2, r2
200004e8:	0a43      	lsrs	r3, r0, #9
200004ea:	428b      	cmp	r3, r1
200004ec:	d301      	bcc.n	200004f2 <__udivsi3+0x8e>
200004ee:	024b      	lsls	r3, r1, #9
200004f0:	1ac0      	subs	r0, r0, r3
200004f2:	4152      	adcs	r2, r2
200004f4:	0a03      	lsrs	r3, r0, #8
200004f6:	428b      	cmp	r3, r1
200004f8:	d301      	bcc.n	200004fe <__udivsi3+0x9a>
200004fa:	020b      	lsls	r3, r1, #8
200004fc:	1ac0      	subs	r0, r0, r3
200004fe:	4152      	adcs	r2, r2
20000500:	d2cd      	bcs.n	2000049e <__udivsi3+0x3a>
20000502:	09c3      	lsrs	r3, r0, #7
20000504:	428b      	cmp	r3, r1
20000506:	d301      	bcc.n	2000050c <__udivsi3+0xa8>
20000508:	01cb      	lsls	r3, r1, #7
2000050a:	1ac0      	subs	r0, r0, r3
2000050c:	4152      	adcs	r2, r2
2000050e:	0983      	lsrs	r3, r0, #6
20000510:	428b      	cmp	r3, r1
20000512:	d301      	bcc.n	20000518 <__udivsi3+0xb4>
20000514:	018b      	lsls	r3, r1, #6
20000516:	1ac0      	subs	r0, r0, r3
20000518:	4152      	adcs	r2, r2
2000051a:	0943      	lsrs	r3, r0, #5
2000051c:	428b      	cmp	r3, r1
2000051e:	d301      	bcc.n	20000524 <__udivsi3+0xc0>
20000520:	014b      	lsls	r3, r1, #5
20000522:	1ac0      	subs	r0, r0, r3
20000524:	4152      	adcs	r2, r2
20000526:	0903      	lsrs	r3, r0, #4
20000528:	428b      	cmp	r3, r1
2000052a:	d301      	bcc.n	20000530 <__udivsi3+0xcc>
2000052c:	010b      	lsls	r3, r1, #4
2000052e:	1ac0      	subs	r0, r0, r3
20000530:	4152      	adcs	r2, r2
20000532:	08c3      	lsrs	r3, r0, #3
20000534:	428b      	cmp	r3, r1
20000536:	d301      	bcc.n	2000053c <__udivsi3+0xd8>
20000538:	00cb      	lsls	r3, r1, #3
2000053a:	1ac0      	subs	r0, r0, r3
2000053c:	4152      	adcs	r2, r2
2000053e:	0883      	lsrs	r3, r0, #2
20000540:	428b      	cmp	r3, r1
20000542:	d301      	bcc.n	20000548 <__udivsi3+0xe4>
20000544:	008b      	lsls	r3, r1, #2
20000546:	1ac0      	subs	r0, r0, r3
20000548:	4152      	adcs	r2, r2
2000054a:	0843      	lsrs	r3, r0, #1
2000054c:	428b      	cmp	r3, r1
2000054e:	d301      	bcc.n	20000554 <__udivsi3+0xf0>
20000550:	004b      	lsls	r3, r1, #1
20000552:	1ac0      	subs	r0, r0, r3
20000554:	4152      	adcs	r2, r2
20000556:	1a41      	subs	r1, r0, r1
20000558:	d200      	bcs.n	2000055c <__udivsi3+0xf8>
2000055a:	4601      	mov	r1, r0
2000055c:	4152      	adcs	r2, r2
2000055e:	4610      	mov	r0, r2
20000560:	4770      	bx	lr
20000562:	e7ff      	b.n	20000564 <__udivsi3+0x100>
20000564:	b501      	push	{r0, lr}
20000566:	2000      	movs	r0, #0
20000568:	f000 f806 	bl	20000578 <__aeabi_idiv0>
2000056c:	bd02      	pop	{r1, pc}
2000056e:	46c0      	nop			@ (mov r8, r8)

20000570 <__aeabi_uidivmod>:
20000570:	2900      	cmp	r1, #0
20000572:	d0f7      	beq.n	20000564 <__udivsi3+0x100>
20000574:	e776      	b.n	20000464 <__udivsi3>
20000576:	4770      	bx	lr

20000578 <__aeabi_idiv0>:
20000578:	4770      	bx	lr
2000057a:	46c0      	nop			@ (mov r8, r8)

2000057c <portE>:
2000057c:	40021000 	andmi	r1, r2, r0

20000580 <sysTick>:
20000580:	e000e010 	and	lr, r0, r0, lsl r0

20000584 <exti>:
20000584:	40013c00 	andmi	r3, r1, r0, lsl #24

20000588 <keyValue>:
20000588:	0a030201 	beq	200c0d94 <currently_pressed_key+0xc07fc>
2000058c:	0b060504 	bleq	201819a4 <currently_pressed_key+0x18140c>
20000590:	0c090807 	stceq	8, cr0, [r9], {7}
20000594:	0d0f000e 	stceq	0, cr0, [pc, #-56]	@ 20000564 <__udivsi3+0x100>

20000598 <currently_pressed_key>:
20000598:	000000ff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000006cb 	andeq	r0, r0, fp, asr #13
   4:	04010005 	streq	r0, [r1], #-5
   8:	00000000 	andeq	r0, r0, r0
   c:	00035f12 	andeq	r5, r3, r2, lsl pc
  10:	02a40c00 	adceq	r0, r4, #0, 24
  14:	00d30000 	sbcseq	r0, r3, r0
  18:	000c0000 	andeq	r0, ip, r0
	...
  24:	04030000 	streq	r0, [r3], #-0
  28:	00ff090a 	rscseq	r0, pc, sl, lsl #18
  2c:	29010000 	stmdbcs	r1, {}	@ <UNPREDICTABLE>
  30:	0c000000 	stceq	0, cr0, [r0], {-0}
  34:	0000ff10 	andeq	pc, r0, r0, lsl pc	@ <UNPREDICTABLE>
  38:	01000200 	mrseq	r0, R8_usr
  3c:	0000002e 	andeq	r0, r0, lr, lsr #32
  40:	00ff100d 	rscseq	r1, pc, sp
  44:	02020000 	andeq	r0, r2, #0
  48:	00003301 	andeq	r3, r0, r1, lsl #6
  4c:	ff100e00 			@ <UNDEFINED> instruction: 0xff100e00
  50:	02000000 	andeq	r0, r0, #0
  54:	00380104 	eorseq	r0, r8, r4, lsl #2
  58:	100f0000 	andne	r0, pc, r0
  5c:	000000ff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
  60:	3d010602 	stccc	6, cr0, [r1, #-8]
  64:	10000000 	andne	r0, r0, r0
  68:	0000ff10 	andeq	pc, r0, r0, lsl pc	@ <UNPREDICTABLE>
  6c:	01080200 	mrseq	r0, R8_fiq
  70:	00000042 	andeq	r0, r0, r2, asr #32
  74:	00ff1011 	rscseq	r1, pc, r1, lsl r0	@ <UNPREDICTABLE>
  78:	0a020000 	beq	80080 <startup-0x1ff7ff80>
  7c:	00004701 	andeq	r4, r0, r1, lsl #14
  80:	ff101200 			@ <UNDEFINED> instruction: 0xff101200
  84:	02000000 	andeq	r0, r0, #0
  88:	004c010c 	subeq	r0, ip, ip, lsl #2
  8c:	10130000 	andsne	r0, r3, r0
  90:	000000ff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
  94:	51010e02 	tstpl	r1, r2, lsl #28
  98:	14000000 	strne	r0, [r0], #-0
  9c:	0000ff10 	andeq	pc, r0, r0, lsl pc	@ <UNPREDICTABLE>
  a0:	01100200 	tsteq	r0, r0, lsl #4
  a4:	00000056 	andeq	r0, r0, r6, asr r0
  a8:	00ff1015 	rscseq	r1, pc, r5, lsl r0	@ <UNPREDICTABLE>
  ac:	12020000 	andne	r0, r2, #0
  b0:	00034101 	andeq	r4, r3, r1, lsl #2
  b4:	ff101600 			@ <UNDEFINED> instruction: 0xff101600
  b8:	02000000 	andeq	r0, r0, #0
  bc:	03470114 	movteq	r0, #28948	@ 0x7114
  c0:	10170000 	andsne	r0, r7, r0
  c4:	000000ff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
  c8:	4d011602 	stcmi	6, cr1, [r1, #-8]
  cc:	18000003 	stmdane	r0, {r0, r1}
  d0:	0000ff10 	andeq	pc, r0, r0, lsl pc	@ <UNPREDICTABLE>
  d4:	01180200 	tsteq	r8, r0, lsl #4
  d8:	00000353 	andeq	r0, r0, r3, asr r3
  dc:	00ff1019 	rscseq	r1, pc, r9, lsl r0	@ <UNPREDICTABLE>
  e0:	1a020000 	bne	800e8 <startup-0x1ff7ff18>
  e4:	00035901 	andeq	r5, r3, r1, lsl #18
  e8:	ff101a00 			@ <UNDEFINED> instruction: 0xff101a00
  ec:	02000000 	andeq	r0, r0, #0
  f0:	03e5011c 	mvneq	r0, #28, 2
  f4:	101b0000 	andsne	r0, fp, r0
  f8:	000000ff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
  fc:	0c001e02 	stceq	14, cr1, [r0], {2}
 100:	014f0801 	cmpeq	pc, r1, lsl #16
 104:	ff0a0000 			@ <UNDEFINED> instruction: 0xff0a0000
 108:	05000000 	streq	r0, [r0, #-0]
 10c:	000003d7 	ldrdeq	r0, [r0], -r7
 110:	0026011d 	eoreq	r0, r6, sp, lsl r1
 114:	02030000 	andeq	r0, r3, #0
 118:	01ef091f 	mvneq	r0, pc, lsl r9
 11c:	29010000 	stmdbcs	r1, {}	@ <UNPREDICTABLE>
 120:	21000000 	mrscs	r0, (UNDEF: 0)
 124:	0000ff10 	andeq	pc, r0, r0, lsl pc	@ <UNPREDICTABLE>
 128:	01000100 	mrseq	r0, (UNDEF: 16)
 12c:	0000002e 	andeq	r0, r0, lr, lsr #32
 130:	00ff1022 	rscseq	r1, pc, r2, lsr #32
 134:	01010000 	mrseq	r0, (UNDEF: 1)
 138:	00003301 	andeq	r3, r0, r1, lsl #6
 13c:	ff102300 			@ <UNDEFINED> instruction: 0xff102300
 140:	01000000 	mrseq	r0, (UNDEF: 0)
 144:	00380102 	eorseq	r0, r8, r2, lsl #2
 148:	10240000 	eorne	r0, r4, r0
 14c:	000000ff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
 150:	3d010301 	stccc	3, cr0, [r1, #-4]
 154:	25000000 	strcs	r0, [r0, #-0]
 158:	0000ff10 	andeq	pc, r0, r0, lsl pc	@ <UNPREDICTABLE>
 15c:	01040100 	mrseq	r0, (UNDEF: 20)
 160:	00000042 	andeq	r0, r0, r2, asr #32
 164:	00ff1026 	rscseq	r1, pc, r6, lsr #32
 168:	05010000 	streq	r0, [r1, #-0]
 16c:	00004701 	andeq	r4, r0, r1, lsl #14
 170:	ff102700 			@ <UNDEFINED> instruction: 0xff102700
 174:	01000000 	mrseq	r0, (UNDEF: 0)
 178:	004c0106 	subeq	r0, ip, r6, lsl #2
 17c:	10280000 	eorne	r0, r8, r0
 180:	000000ff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
 184:	51010701 	tstpl	r1, r1, lsl #14
 188:	29000000 	stmdbcs	r0, {}	@ <UNPREDICTABLE>
 18c:	0000ff10 	andeq	pc, r0, r0, lsl pc	@ <UNPREDICTABLE>
 190:	01080100 	mrseq	r0, (UNDEF: 24)
 194:	00000056 	andeq	r0, r0, r6, asr r0
 198:	00ff102a 	rscseq	r1, pc, sl, lsr #32
 19c:	09010000 	stmdbeq	r1, {}	@ <UNPREDICTABLE>
 1a0:	00034101 	andeq	r4, r3, r1, lsl #2
 1a4:	ff102b00 			@ <UNDEFINED> instruction: 0xff102b00
 1a8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ac:	0347010a 	movteq	r0, #28938	@ 0x710a
 1b0:	102c0000 	eorne	r0, ip, r0
 1b4:	000000ff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
 1b8:	4d010b01 	vstrmi	d0, [r1, #-4]
 1bc:	2d000003 	stccs	0, cr0, [r0, #-12]
 1c0:	0000ff10 	andeq	pc, r0, r0, lsl pc	@ <UNPREDICTABLE>
 1c4:	010c0100 	mrseq	r0, (UNDEF: 28)
 1c8:	00000353 	andeq	r0, r0, r3, asr r3
 1cc:	00ff102e 	rscseq	r1, pc, lr, lsr #32
 1d0:	0d010000 	stceq	0, cr0, [r1, #-0]
 1d4:	00035901 	andeq	r5, r3, r1, lsl #18
 1d8:	ff102f00 			@ <UNDEFINED> instruction: 0xff102f00
 1dc:	01000000 	mrseq	r0, (UNDEF: 0)
 1e0:	03e5010e 	mvneq	r0, #-2147483645	@ 0x80000003
 1e4:	10300000 	eorsne	r0, r0, r0
 1e8:	000000ff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
 1ec:	05000f01 	streq	r0, [r0, #-3841]	@ 0xfffff0ff
 1f0:	000001d0 	ldrdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
 1f4:	01160132 	tsteq	r6, r2, lsr r1
 1f8:	17050000 	strne	r0, [r5, -r0]
 1fc:	34000000 	strcc	r0, [r0], #-0
 200:	00010b17 	andeq	r0, r1, r7, lsl fp
 204:	007a0500 	rsbseq	r0, sl, r0, lsl #10
 208:	16380000 	ldrtne	r0, [r8], -r0
 20c:	000001ef 	andeq	r0, r0, pc, ror #3
 210:	0003c805 	andeq	ip, r3, r5, lsl #16
 214:	0b173c00 	bleq	5cf21c <startup-0x1fa30de4>
 218:	05000001 	streq	r0, [r0, #-1]
 21c:	000000a3 	andeq	r0, r0, r3, lsr #1
 220:	010b1742 	tsteq	fp, r2, asr #14
 224:	04030000 	streq	r0, [r3], #-0
 228:	0247034d 	subeq	r0, r7, #872415233	@ 0x34000001
 22c:	ba020000 	blt	80234 <startup-0x1ff7fdcc>
 230:	4d000001 	stcmi	0, cr0, [r0, #-4]
 234:	0002471b 	andeq	r4, r2, fp, lsl r7
 238:	83020000 	movwhi	r0, #8192	@ 0x2000
 23c:	4d000001 	stcmi	0, cr0, [r0, #-4]
 240:	00024726 	andeq	r4, r2, r6, lsr #14
 244:	0c000200 	sfmeq	f0, 4, [r0], {-0}
 248:	018e0702 	orreq	r0, lr, r2, lsl #14
 24c:	04060000 	streq	r0, [r6], #-0
 250:	0272024b 	rsbseq	r0, r2, #-1342177276	@ 0xb0000004
 254:	88040000 	stmdahi	r4, {}	@ <UNPREDICTABLE>
 258:	4c000000 	stcmi	0, cr0, [r0], {-0}
 25c:	00027210 	andeq	r7, r2, r0, lsl r2
 260:	02260700 	eoreq	r0, r6, #0, 14
 264:	4e040000 	cdpmi	0, 0, cr0, cr4, cr0, {0}
 268:	4e000002 	cdpmi	0, 0, cr0, cr0, cr2, {0}
 26c:	0001fa0f 	andeq	pc, r1, pc, lsl #20
 270:	040c0000 	streq	r0, [ip], #-0
 274:	00019407 	andeq	r9, r1, r7, lsl #8
 278:	02720a00 	rsbseq	r0, r2, #0, 20
 27c:	02030000 	andeq	r0, r3, #0
 280:	029f0353 	addseq	r0, pc, #1275068417	@ 0x4c000001
 284:	00020000 	andeq	r0, r2, r0
 288:	53000000 	movwpl	r0, #0
 28c:	0000ff1a 	andeq	pc, r0, sl, lsl pc	@ <UNPREDICTABLE>
 290:	c4020000 	strgt	r0, [r2], #-0
 294:	53000001 	movwpl	r0, #1
 298:	0000ff26 	andeq	pc, r0, r6, lsr #30
 29c:	06000100 	streq	r0, [r0], -r0, lsl #2
 2a0:	c3025102 	movwgt	r5, #8450	@ 0x2102
 2a4:	04000002 	streq	r0, [r0], #-2
 2a8:	000000c5 	andeq	r0, r0, r5, asr #1
 2ac:	02471252 	subeq	r1, r7, #536870917	@ 0x20000005
 2b0:	7e070000 	cdpvc	0, 0, cr0, cr7, cr0, {0}
 2b4:	04000002 	streq	r0, [r0], #-2
 2b8:	000001a1 	andeq	r0, r0, r1, lsr #3
 2bc:	02051154 	andeq	r1, r5, #84, 2
 2c0:	03000000 	movweq	r0, #0
 2c4:	e4035904 	str	r5, [r3], #-2308	@ 0xfffff6fc
 2c8:	02000002 	andeq	r0, r0, #2
 2cc:	000003bc 			@ <UNDEFINED> instruction: 0x000003bc
 2d0:	02471b59 	subeq	r1, r7, #91136	@ 0x16400
 2d4:	02000000 	andeq	r0, r0, #0
 2d8:	00000176 	andeq	r0, r0, r6, ror r1
 2dc:	02472859 	subeq	r2, r7, #5832704	@ 0x590000
 2e0:	00020000 	andeq	r0, r2, r0
 2e4:	02570406 	subseq	r0, r7, #100663296	@ 0x6000000
 2e8:	00000308 	andeq	r0, r0, r8, lsl #6
 2ec:	0001ff04 	andeq	pc, r1, r4, lsl #30
 2f0:	72105800 	andsvc	r5, r0, #0, 16
 2f4:	07000002 	streq	r0, [r0, -r2]
 2f8:	000002c3 	andeq	r0, r0, r3, asr #5
 2fc:	00026d04 	andeq	r6, r2, r4, lsl #26
 300:	10125a00 	andsne	r5, r2, r0, lsl #20
 304:	00000002 	andeq	r0, r0, r2
 308:	035f0403 	cmpeq	pc, #50331648	@ 0x3000000
 30c:	00000329 	andeq	r0, r0, r9, lsr #6
 310:	00009902 	andeq	r9, r0, r2, lsl #18
 314:	471b5f00 	ldrmi	r5, [fp, -r0, lsl #30]
 318:	00000002 	andeq	r0, r0, r2
 31c:	00023b02 	andeq	r3, r2, r2, lsl #22
 320:	47265f00 	strmi	r5, [r6, -r0, lsl #30]!
 324:	02000002 	andeq	r0, r0, #2
 328:	5d040600 	stcpl	6, cr0, [r4, #-0]
 32c:	00034d02 	andeq	r4, r3, r2, lsl #26
 330:	02670400 	rsbeq	r0, r7, #0, 8
 334:	105e0000 	subsne	r0, lr, r0
 338:	00000272 	andeq	r0, r0, r2, ror r2
 33c:	00030807 	andeq	r0, r3, r7, lsl #16
 340:	02580400 	subseq	r0, r8, #0, 8
 344:	15600000 	strbne	r0, [r0, #-0]!
 348:	0000021b 	andeq	r0, r0, fp, lsl r2
 34c:	65020300 	strvs	r0, [r2, #-768]	@ 0xfffffd00
 350:	00036e03 	andeq	r6, r3, r3, lsl #28
 354:	02920200 	addseq	r0, r2, #0, 4
 358:	1a650000 	bne	1940360 <startup-0x1e6bfca0>
 35c:	000000ff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
 360:	01e20200 	mvneq	r0, r0, lsl #4
 364:	23650000 	cmncs	r5, #0
 368:	000000ff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
 36c:	02060001 	andeq	r0, r6, #1
 370:	03910b63 	orrseq	r0, r1, #101376	@ 0x18c00
 374:	490f0000 	stmdbmi	pc, {}	@ <UNPREDICTABLE>
 378:	64005244 	strvs	r5, [r0], #-580	@ 0xfffffdbc
 37c:	00000247 	andeq	r0, r0, r7, asr #4
 380:	00034d07 	andeq	r4, r3, r7, lsl #26
 384:	03310400 	teqeq	r1, #0, 8
 388:	10660000 	rsbne	r0, r6, r0
 38c:	000001ef 	andeq	r0, r0, pc, ror #3
 390:	036e0a00 	cmneq	lr, #0, 20
 394:	02030000 	andeq	r0, r3, #0
 398:	03b7036d 			@ <UNDEFINED> instruction: 0x03b7036d
 39c:	11020000 	mrsne	r0, (UNDEF: 2)
 3a0:	6d000002 	stcvs	0, cr0, [r0, #-8]
 3a4:	0000ff1a 	andeq	pc, r0, sl, lsl pc	@ <UNPREDICTABLE>
 3a8:	6d020000 	stcvs	0, cr0, [r2, #-0]
 3ac:	6d000001 	stcvs	0, cr0, [r0, #-4]
 3b0:	0000ff23 	andeq	pc, r0, r3, lsr #30
 3b4:	06000100 	streq	r0, [r0], -r0, lsl #2
 3b8:	da026b02 	ble	9afc8 <startup-0x1ff65038>
 3bc:	0f000003 	svceq	0x00000003
 3c0:	0052444f 	subseq	r4, r2, pc, asr #8
 3c4:	0002476c 	andeq	r4, r2, ip, ror #14
 3c8:	03960700 	orrseq	r0, r6, #0, 14
 3cc:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
 3d0:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
 3d4:	0001ef10 	andeq	lr, r1, r0, lsl pc
 3d8:	18030000 	stmdane	r3, {}	@ <UNPREDICTABLE>
 3dc:	04131248 	ldreq	r1, [r3], #-584	@ 0xfffffdb8
 3e0:	4e080000 	cdpmi	0, 0, cr0, cr8, cr0, {0}
 3e4:	00000002 	andeq	r0, r0, r2
 3e8:	00029f08 	andeq	r9, r2, r8, lsl #30
 3ec:	e4080400 	str	r0, [r8], #-1024	@ 0xfffffc00
 3f0:	08000002 	stmdaeq	r0, {r1}
 3f4:	00032908 	andeq	r2, r3, r8, lsl #18
 3f8:	91080c00 	tstls	r8, r0, lsl #24
 3fc:	10000003 	andne	r0, r0, r3
 400:	00015d02 	andeq	r5, r1, r2, lsl #26
 404:	47116900 	ldrmi	r6, [r1, -r0, lsl #18]
 408:	12000002 	andne	r0, r0, #2
 40c:	0003b708 	andeq	fp, r3, r8, lsl #14
 410:	0a001400 	beq	5418 <startup-0x1fffabe8>
 414:	000003da 	ldrdeq	r0, [r0], -sl
 418:	00021905 	andeq	r1, r2, r5, lsl #18
 41c:	13017100 	movwne	r7, #4352	@ 0x1100
 420:	03000004 	movweq	r0, #4
 424:	6d037704 	stcvs	7, cr7, [r3, #-16]
 428:	01000004 	tsteq	r0, r4
 42c:	000000cc 	andeq	r0, r0, ip, asr #1
 430:	02721178 	rsbseq	r1, r2, #120, 2
 434:	00010000 	andeq	r0, r1, r0
 438:	00032901 	andeq	r2, r3, r1, lsl #18
 43c:	72117900 	andsvc	r7, r1, #0, 18
 440:	01000002 	tsteq	r0, r2
 444:	03eb0101 	mvneq	r0, #1073741824	@ 0x40000000
 448:	117a0000 	cmnne	sl, r0
 44c:	00000272 	andeq	r0, r0, r2, ror r2
 450:	5d010201 	sfmpl	f0, 4, [r1, #-4]
 454:	7b000001 	blvc	460 <startup-0x1ffffba0>
 458:	00027211 	andeq	r7, r2, r1, lsl r2
 45c:	01030d00 	tsteq	r3, r0, lsl #26
 460:	00000207 	andeq	r0, r0, r7, lsl #4
 464:	02791a7c 	rsbseq	r1, r9, #124, 20	@ 0x7c000
 468:	10010000 	andne	r0, r1, r0
 46c:	75040600 	strvc	r0, [r4, #-1536]	@ 0xfffffa00
 470:	00048602 	andeq	r8, r4, r2, lsl #12
 474:	02530400 	subseq	r0, r3, #0, 8
 478:	10760000 	rsbsne	r0, r6, r0
 47c:	00000272 	andeq	r0, r0, r2, ror r2
 480:	00042307 	andeq	r2, r4, r7, lsl #6
 484:	0c030000 	stceq	0, cr0, [r3], {-0}
 488:	04ad0973 	strteq	r0, [sp], #2419	@ 0x973
 48c:	6d080000 	stcvs	0, cr0, [r8, #-0]
 490:	00000004 	andeq	r0, r0, r4
 494:	00029f02 	andeq	r9, r2, r2, lsl #30
 498:	720f8000 	andvc	r8, pc, #0
 49c:	04000002 	streq	r0, [r0], #-2
 4a0:	4c41560b 	mcrrmi	6, 0, r5, r1, cr11
 4a4:	79188200 	ldmdbvc	r8, {r9, pc}
 4a8:	08000002 	stmdaeq	r0, {r1}
 4ac:	01650500 	cmneq	r5, r0, lsl #10
 4b0:	01840000 	orreq	r0, r4, r0
 4b4:	00000486 	andeq	r0, r0, r6, lsl #9
 4b8:	098a1803 	stmibeq	sl, {r0, r1, fp, ip}
 4bc:	00000508 	andeq	r0, r0, r8, lsl #10
 4c0:	524d490b 	subpl	r4, sp, #180224	@ 0x2c000
 4c4:	720f8c00 	andvc	r8, pc, #0, 24
 4c8:	00000002 	andeq	r0, r0, r2
 4cc:	524d450b 	subpl	r4, sp, #46137344	@ 0x2c00000
 4d0:	720f8d00 	andvc	r8, pc, #0, 26
 4d4:	04000002 	streq	r0, [r0], #-2
 4d8:	0001ac02 	andeq	sl, r1, r2, lsl #24
 4dc:	720f8e00 	andvc	r8, pc, #0, 28
 4e0:	08000002 	stmdaeq	r0, {r1}
 4e4:	00040202 	andeq	r0, r4, r2, lsl #4
 4e8:	720f8f00 	andvc	r8, pc, #0, 30
 4ec:	0c000002 	stceq	0, cr0, [r0], {2}
 4f0:	00033b02 	andeq	r3, r3, r2, lsl #22
 4f4:	720f9000 	andvc	r9, pc, #0
 4f8:	10000002 	andne	r0, r0, r2
 4fc:	0052500b 	subseq	r5, r2, fp
 500:	02720f91 	rsbseq	r0, r2, #580	@ 0x244
 504:	00140000 	andseq	r0, r4, r0
 508:	0001dd05 	andeq	sp, r1, r5, lsl #26
 50c:	b8019300 	stmdalt	r1, {r8, r9, ip, pc}
 510:	09000004 	stmdbeq	r0, {r2}
 514:	00000023 	andeq	r0, r0, r3, lsr #32
 518:	0524079e 	streq	r0, [r4, #-1950]!	@ 0xfffff862
 51c:	03050000 	movweq	r0, #20480	@ 0x5000
 520:	2000057c 	andcs	r0, r0, ip, ror r5
 524:	0004180d 	andeq	r1, r4, sp, lsl #16
 528:	02850900 	addeq	r0, r5, #0, 18
 52c:	0a9f0000 	beq	fe7c0534 <currently_pressed_key+0xde7bff9c>
 530:	0000053a 	andeq	r0, r0, sl, lsr r5
 534:	05800305 	streq	r0, [r0, #773]	@ 0x305
 538:	ad0d2000 	stcge	0, cr2, [sp, #-0]
 53c:	09000004 	stmdbeq	r0, {r2}
 540:	000001eb 	andeq	r0, r0, fp, ror #3
 544:	055007a0 	ldrbeq	r0, [r0, #-1952]	@ 0xfffff860
 548:	03050000 	movweq	r0, #20480	@ 0x5000
 54c:	20000584 	andcs	r0, r0, r4, lsl #11
 550:	0005080d 	andeq	r0, r5, sp, lsl #16
 554:	00ff1300 	rscseq	r1, pc, r0, lsl #6
 558:	05690000 	strbeq	r0, [r9, #-0]!
 55c:	72100000 	andsvc	r0, r0, #0
 560:	10000002 	andne	r0, r0, r2
 564:	00000272 	andeq	r0, r0, r2, ror r2
 568:	005b0900 	subseq	r0, fp, r0, lsl #18
 56c:	0fb70000 	svceq	0x00b70000
 570:	00000555 	andeq	r0, r0, r5, asr r5
 574:	05880305 	streq	r0, [r8, #773]	@ 0x305
 578:	64092000 	strvs	r2, [r9], #-0
 57c:	d2000000 	andle	r0, r0, #0
 580:	00010618 	andeq	r0, r1, r8, lsl r6
 584:	98030500 	stmdals	r3, {r8, sl}
 588:	14200005 	strtne	r0, [r0], #-5
 58c:	0000028d 	andeq	r0, r0, sp, lsl #5
 590:	06013101 	streq	r3, [r1], -r1, lsl #2
 594:	2000040c 	andcs	r0, r0, ip, lsl #8
 598:	00000058 	andeq	r0, r0, r8, asr r0
 59c:	400e9c01 	andmi	r9, lr, r1, lsl #24
 5a0:	29000001 	stmdbcs	r0, {r0}
 5a4:	0003e001 	andeq	lr, r3, r1
 5a8:	00002c20 	andeq	r2, r0, r0, lsr #24
 5ac:	159c0100 	ldrne	r0, [ip, #256]	@ 0x100
 5b0:	000000b5 	strheq	r0, [r0], -r5
 5b4:	06011f01 	streq	r1, [r1], -r1, lsl #30
 5b8:	20000378 	andcs	r0, r0, r8, ror r3
 5bc:	00000068 	andeq	r0, r0, r8, rrx
 5c0:	05d79c01 	ldrbeq	r9, [r7, #3073]	@ 0xc01
 5c4:	f5160000 			@ <UNDEFINED> instruction: 0xf5160000
 5c8:	01000003 	tsteq	r0, r3
 5cc:	7223011f 	eorvc	r0, r3, #-1073741817	@ 0xc0000007
 5d0:	02000002 	andeq	r0, r0, #2
 5d4:	0e006c91 	mcreq	12, 0, r6, cr0, cr1, {4}
 5d8:	000001f0 	strdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
 5dc:	03400115 	movteq	r0, #277	@ 0x115
 5e0:	00382000 	eorseq	r2, r8, r0
 5e4:	9c010000 	stcls	0, cr0, [r1], {-0}
 5e8:	00008e0e 	andeq	r8, r0, lr, lsl #28
 5ec:	08010e00 	stmdaeq	r1, {r9, sl, fp}
 5f0:	38200003 	stmdacc	r0!, {r0, r1}
 5f4:	01000000 	mrseq	r0, (UNDEF: 0)
 5f8:	03af179c 			@ <UNDEFINED> instruction: 0x03af179c
 5fc:	e6010000 	str	r0, [r1], -r0
 600:	0001e406 	andeq	lr, r1, r6, lsl #8
 604:	00012420 	andeq	r2, r1, r0, lsr #8
 608:	189c0100 	ldmne	ip, {r8}
 60c:	00000229 	andeq	r0, r0, r9, lsr #4
 610:	8406d601 	strhi	sp, [r6], #-1537	@ 0xfffff9ff
 614:	60200001 	eorvs	r0, r0, r1
 618:	01000000 	mrseq	r0, (UNDEF: 0)
 61c:	029a199c 	addseq	r1, sl, #156, 18	@ 0x270000
 620:	c0010000 	andgt	r0, r1, r0
 624:	0000ff0f 	andeq	pc, r0, pc, lsl #30
 628:	00012800 	andeq	r2, r1, r0, lsl #16
 62c:	00005c20 	andeq	r5, r0, r0, lsr #24
 630:	6a9c0100 	bvs	fe700a38 <currently_pressed_key+0xde7004a0>
 634:	11000006 	tstne	r0, r6
 638:	2000012e 	andcs	r0, r0, lr, lsr #2
 63c:	00000048 	andeq	r0, r0, r8, asr #32
 640:	776f721a 			@ <UNDEFINED> instruction: 0x776f721a
 644:	0bc20100 	bleq	ff080a4c <currently_pressed_key+0xdf0804b4>
 648:	0000066a 	andeq	r0, r0, sl, ror #12
 64c:	116c9102 	cmnne	ip, r2, lsl #2
 650:	20000134 	andcs	r0, r0, r4, lsr r1
 654:	00000036 	andeq	r0, r0, r6, lsr r0
 658:	00031b1b 	andeq	r1, r3, fp, lsl fp
 65c:	11c60100 	bicne	r0, r6, r0, lsl #2
 660:	000000ff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
 664:	006b9102 	rsbeq	r9, fp, r2, lsl #2
 668:	041c0000 	ldreq	r0, [ip], #-0
 66c:	746e6905 	strbtvc	r6, [lr], #-2309	@ 0xfffff6fb
 670:	02791d00 	rsbseq	r1, r9, #0, 26
 674:	ac010000 	stcge	0, cr0, [r1], {-0}
 678:	0000ff0f 	andeq	pc, r0, pc, lsl #30
 67c:	0000c800 	andeq	ip, r0, r0, lsl #16
 680:	00006020 	andeq	r6, r0, r0, lsr #32
 684:	1e9c0100 	fmlnee	f0, f4, f0
 688:	0000000b 	andeq	r0, r0, fp
 68c:	1006a301 	andne	sl, r6, r1, lsl #6
 690:	b8200000 	stmdalt	r0!, {}	@ <UNPREDICTABLE>
 694:	01000000 	mrseq	r0, (UNDEF: 0)
 698:	0006bc9c 	muleq	r6, ip, ip
 69c:	6f721f00 	svcvs	0x00721f00
 6a0:	a3010077 	movwge	r0, #4215	@ 0x1077
 6a4:	00066a17 	andeq	r6, r6, r7, lsl sl
 6a8:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
 6ac:	0001b120 	andeq	fp, r1, r0, lsr #2
 6b0:	20a30100 	adccs	r0, r3, r0, lsl #2
 6b4:	0000066a 	andeq	r0, r0, sl, ror #12
 6b8:	00709102 	rsbseq	r9, r0, r2, lsl #2
 6bc:	00024621 	andeq	r4, r2, r1, lsr #12
 6c0:	06020100 	streq	r0, [r2], -r0, lsl #2
 6c4:	20000000 	andcs	r0, r0, r0
 6c8:	0000000c 	andeq	r0, r0, ip
 6cc:	Address 0x6cc is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	03000d01 	movweq	r0, #3329	@ 0xd01
   4:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
   8:	0b390b3b 	bleq	e42cfc <startup-0x1f1bd304>
   c:	0b0d1349 	bleq	344d38 <startup-0x1fcbb2c8>
  10:	00000b6b 	andeq	r0, r0, fp, ror #22
  14:	03000d02 	movweq	r0, #3330	@ 0xd02
  18:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
  1c:	0b390b3b 	bleq	e42d10 <startup-0x1f1bd2f0>
  20:	0b381349 	bleq	e04d4c <startup-0x1f1fb2b4>
  24:	13030000 	movwne	r0, #12288	@ 0x3000
  28:	3a0b0b01 	bcc	2c2c34 <startup-0x1fd3d3cc>
  2c:	0b3b0121 	bleq	ec04b8 <startup-0x1f13fb48>
  30:	13010b39 	movwne	r0, #6969	@ 0x1b39
  34:	0d040000 	stceq	0, cr0, [r4, #-0]
  38:	3a0e0300 	bcc	380c40 <startup-0x1fc7f3c0>
  3c:	0b3b0121 	bleq	ec04c8 <startup-0x1f13fb38>
  40:	13490b39 	movtne	r0, #39737	@ 0x9b39
  44:	16050000 	strne	r0, [r5], -r0
  48:	3a0e0300 	bcc	380c50 <startup-0x1fc7f3b0>
  4c:	0b3b0121 	bleq	ec04d8 <startup-0x1f13fb28>
  50:	13490b39 	movtne	r0, #39737	@ 0x9b39
  54:	17060000 	strne	r0, [r6, -r0]
  58:	3a0b0b01 	bcc	2c2c64 <startup-0x1fd3d39c>
  5c:	0b3b0121 	bleq	ec04e8 <startup-0x1f13fb18>
  60:	13010b39 	movwne	r0, #6969	@ 0x1b39
  64:	0d070000 	stceq	0, cr0, [r7, #-0]
  68:	00134900 	andseq	r4, r3, r0, lsl #18
  6c:	000d0800 	andeq	r0, sp, r0, lsl #16
  70:	0b381349 	bleq	e04d9c <startup-0x1f1fb264>
  74:	34090000 	strcc	r0, [r9], #-0
  78:	3a0e0300 	bcc	380c80 <startup-0x1fc7f380>
  7c:	0b3b0121 	bleq	ec0508 <startup-0x1f13faf8>
  80:	13490b39 	movtne	r0, #39737	@ 0x9b39
  84:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  88:	350a0000 	strcc	r0, [sl, #-0]
  8c:	00134900 	andseq	r4, r3, r0, lsl #18
  90:	000d0b00 	andeq	r0, sp, r0, lsl #22
  94:	213a0803 	teqcs	sl, r3, lsl #16
  98:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
  9c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  a0:	0c00000b 	stceq	0, cr0, [r0], {11}
  a4:	0b0b0024 	bleq	2c013c <startup-0x1fd3fec4>
  a8:	0e030b3e 	vmoveq.16	d3[0], r0
  ac:	0f0d0000 	svceq	0x000d0000
  b0:	04210b00 	strteq	r0, [r1], #-2816	@ 0xfffff500
  b4:	00001349 	andeq	r1, r0, r9, asr #6
  b8:	3f002e0e 	svccc	0x00002e0e
  bc:	3a0e0319 	bcc	380d28 <startup-0x1fc7f2d8>
  c0:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
  c4:	11062139 	tstne	r6, r9, lsr r1
  c8:	40061201 	andmi	r1, r6, r1, lsl #4
  cc:	00197a18 	andseq	r7, r9, r8, lsl sl
  d0:	000d0f00 	andeq	r0, sp, r0, lsl #30
  d4:	213a0803 	teqcs	sl, r3, lsl #16
  d8:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
  dc:	13491221 	movtne	r1, #37409	@ 0x9221
  e0:	21100000 	tstcs	r0, r0
  e4:	2f134900 	svccs	0x00134900
  e8:	00000321 	andeq	r0, r0, r1, lsr #6
  ec:	11010b11 	tstne	r1, r1, lsl fp
  f0:	00061201 	andeq	r1, r6, r1, lsl #4
  f4:	01111200 	tsteq	r1, r0, lsl #4
  f8:	0b130e25 	bleq	4c3994 <startup-0x1fb3c66c>
  fc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 100:	01111755 	tsteq	r1, r5, asr r7
 104:	00001710 	andeq	r1, r0, r0, lsl r7
 108:	49010113 	stmdbmi	r1, {r0, r1, r4, r8}
 10c:	00130113 	andseq	r0, r3, r3, lsl r1
 110:	002e1400 	eoreq	r1, lr, r0, lsl #8
 114:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
 118:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
 11c:	01110b39 	tsteq	r1, r9, lsr fp
 120:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 124:	0000197c 	andeq	r1, r0, ip, ror r9
 128:	3f012e15 	svccc	0x00012e15
 12c:	3a0e0319 	bcc	380d98 <startup-0x1fc7f268>
 130:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 134:	1119270b 	tstne	r9, fp, lsl #14
 138:	40061201 	andmi	r1, r6, r1, lsl #4
 13c:	01197c18 	tsteq	r9, r8, lsl ip
 140:	16000013 			@ <UNDEFINED> instruction: 0x16000013
 144:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
 14c:	13490b39 	movtne	r0, #39737	@ 0x9b39
 150:	00001802 	andeq	r1, r0, r2, lsl #16
 154:	3f002e17 	svccc	0x00002e17
 158:	3a0e0319 	bcc	380dc4 <startup-0x1fc7f23c>
 15c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 160:	1201110b 	andne	r1, r1, #-1073741822	@ 0xc0000002
 164:	7a184006 	bvc	610184 <startup-0x1f9efe7c>
 168:	18000019 	stmdane	r0, {r0, r3, r4}
 16c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	@ <UNPREDICTABLE>
 170:	0b3a0e03 	bleq	e83984 <startup-0x1f17c67c>
 174:	0b390b3b 	bleq	e42e68 <startup-0x1f1bd198>
 178:	06120111 			@ <UNDEFINED> instruction: 0x06120111
 17c:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
 180:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 184:	03193f01 	tsteq	r9, #1, 30
 188:	3b0b3a0e 	blcc	2ce9c8 <startup-0x1fd31638>
 18c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 190:	11134919 	tstne	r3, r9, lsl r9
 194:	40061201 	andmi	r1, r6, r1, lsl #4
 198:	01197c18 	tsteq	r9, r8, lsl ip
 19c:	1a000013 	bne	1f0 <startup-0x1ffffe10>
 1a0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 1a4:	0b3b0b3a 	bleq	ec2e94 <startup-0x1f13d16c>
 1a8:	13490b39 	movtne	r0, #39737	@ 0x9b39
 1ac:	00001802 	andeq	r1, r0, r2, lsl #16
 1b0:	0300341b 	movweq	r3, #1051	@ 0x41b
 1b4:	3b0b3a0e 	blcc	2ce9f4 <startup-0x1fd3160c>
 1b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1bc:	00180213 	andseq	r0, r8, r3, lsl r2
 1c0:	00241c00 	eoreq	r1, r4, r0, lsl #24
 1c4:	0b3e0b0b 	bleq	f82df8 <startup-0x1f07d208>
 1c8:	00000803 	andeq	r0, r0, r3, lsl #16
 1cc:	3f002e1d 	svccc	0x00002e1d
 1d0:	3a0e0319 	bcc	380e3c <startup-0x1fc7f1c4>
 1d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d8:	1113490b 	tstne	r3, fp, lsl #18
 1dc:	40061201 	andmi	r1, r6, r1, lsl #4
 1e0:	00197a18 	andseq	r7, r9, r8, lsl sl
 1e4:	012e1e00 			@ <UNDEFINED> instruction: 0x012e1e00
 1e8:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
 1ec:	0b3b0b3a 	bleq	ec2edc <startup-0x1f13d124>
 1f0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1f4:	06120111 			@ <UNDEFINED> instruction: 0x06120111
 1f8:	197a1840 	ldmdbne	sl!, {r6, fp, ip}^
 1fc:	00001301 	andeq	r1, r0, r1, lsl #6
 200:	0300051f 	movweq	r0, #1311	@ 0x51f
 204:	3b0b3a08 	blcc	2cea2c <startup-0x1fd315d4>
 208:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 20c:	00180213 	andseq	r0, r8, r3, lsl r2
 210:	00052000 	andeq	r2, r5, r0
 214:	0b3a0e03 	bleq	e83a28 <startup-0x1f17c5d8>
 218:	0b390b3b 	bleq	e42f0c <startup-0x1f1bd0f4>
 21c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 220:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 224:	03193f00 	tsteq	r9, #0, 30
 228:	3b0b3a0e 	blcc	2cea68 <startup-0x1fd31598>
 22c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 230:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
 234:	7a184006 	bvc	610254 <startup-0x1f9efdac>
 238:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000454 	andeq	r0, r0, r4, asr r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_rnglists:

00000000 <.debug_rnglists>:
   0:	00000016 	andeq	r0, r0, r6, lsl r0
   4:	00040005 	andeq	r0, r4, r5
   8:	00000000 	andeq	r0, r0, r0
   c:	00001007 	andeq	r1, r0, r7
  10:	0708d420 	streq	sp, [r8, -r0, lsr #8]
  14:	20000000 	andcs	r0, r0, r0
  18:	Address 0x18 is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000002bf 			@ <UNDEFINED> instruction: 0x000002bf
   4:	008d0003 	addeq	r0, sp, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	44010000 	strmi	r0, [r1], #-0
  1c:	74532f3a 	ldrbvc	r2, [r3], #-3898	@ 0xfffff0c6
  20:	65696475 	strbvs	r6, [r9, #-1141]!	@ 0xfffffb8b
  24:	614d2f73 	hvcvs	54003	@ 0xd2f3
  28:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
  2c:	724f2d65 	subvc	r2, pc, #6464	@ 0x1940
  30:	746e6569 	strbtvc	r6, [lr], #-1385	@ 0xfffffa97
  34:	502d6465 	eorpl	r6, sp, r5, ror #8
  38:	72676f72 	rsbvc	r6, r7, #456	@ 0x1c8
  3c:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
  40:	572f676e 	strpl	r6, [pc, -lr, ror #14]!
  44:	2f6b726f 	svccs	0x006b726f
  48:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
  4c:	2d656e69 	stclcs	14, cr6, [r5, #-420]!	@ 0xfffffe5c
  50:	6569724f 	strbvs	r7, [r9, #-591]!	@ 0xfffffdb1
  54:	6465746e 	strbtvs	r7, [r5], #-1134	@ 0xfffffb92
  58:	6f72502d 	svcvs	0x0072502d
  5c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	@ 0xfffffe64
  60:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
  64:	7574532d 	ldrbvc	r5, [r4, #-813]!	@ 0xfffffcd3
  68:	73656964 	cmnvc	r5, #100, 18	@ 0x190000
  6c:	462f432f 	strtmi	r4, [pc], -pc, lsr #6
  70:	68746669 	ldmdavs	r4!, {r0, r3, r5, r6, r9, sl, sp, lr}^
  74:	2f797254 	svccs	0x00797254
  78:	5462614c 	strbtpl	r6, [r2], #-332	@ 0xfffffeb4
  7c:	65657268 	strbvs	r7, [r5, #-616]!	@ 0xfffffd98
  80:	6b736154 	blvs	1cd85d8 <startup-0x1e327a28>
  84:	006f7754 	rsbeq	r7, pc, r4, asr r7	@ <UNPREDICTABLE>
  88:	61747300 	cmnvs	r4, r0, lsl #6
  8c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  90:	0100632e 	tsteq	r0, lr, lsr #6
  94:	05000000 	streq	r0, [r0, #-0]
  98:	02050001 	andeq	r0, r5, #1
  9c:	20000000 	andcs	r0, r0, r0
  a0:	21211314 			@ <UNDEFINED> instruction: 0x21211314
  a4:	0302212f 	movweq	r2, #8495	@ 0x212f
  a8:	05010100 	streq	r0, [r1, #-256]	@ 0xffffff00
  ac:	02050001 	andeq	r0, r5, #1
  b0:	20000010 	andcs	r0, r0, r0, lsl r0
  b4:	0101a303 	tsteq	r1, r3, lsl #6
  b8:	05590505 	ldrbeq	r0, [r9, #-1285]	@ 0xfffffafb
  bc:	04020018 	streq	r0, [r2], #-24	@ 0xffffffe8
  c0:	2b053c01 	blcs	14f0cc <startup-0x1feb0f34>
  c4:	01040200 	mrseq	r0, R12_usr
  c8:	0001052e 	andeq	r0, r1, lr, lsr #10
  cc:	e8010402 	stmda	r1, {r1, sl}
  d0:	051d0a05 	ldreq	r0, [sp, #-2565]	@ 0xfffff5fb
  d4:	0402001c 	streq	r0, [r2], #-28	@ 0xffffffe4
  d8:	2f053c01 	svccs	0x00053c01
  dc:	01040200 	mrseq	r0, R12_usr
  e0:	0001052e 	andeq	r0, r1, lr, lsr #10
  e4:	e7010402 	str	r0, [r1, -r2, lsl #8]
  e8:	051e0a05 	ldreq	r0, [lr, #-2565]	@ 0xfffff5fb
  ec:	0402001c 	streq	r0, [r2], #-28	@ 0xffffffe4
  f0:	2f053c01 	svccs	0x00053c01
  f4:	01040200 	mrseq	r0, R12_usr
  f8:	0001052e 	andeq	r0, r1, lr, lsr #10
  fc:	e6010402 	str	r0, [r1], -r2, lsl #8
 100:	051f0a05 	ldreq	r0, [pc, #-2565]	@ fffff703 <currently_pressed_key+0xdffff16b>
 104:	0402001c 	streq	r0, [r2], #-28	@ 0xffffffe4
 108:	2f053c01 	svccs	0x00053c01
 10c:	01040200 	mrseq	r0, R12_usr
 110:	c901052e 	stmdbgt	r1, {r1, r2, r3, r5, r8, sl}
 114:	300b056a 	andcc	r0, fp, sl, ror #10
 118:	052e1605 	streq	r1, [lr, #-1541]!	@ 0xfffff9fb
 11c:	2b054a05 	blcs	152938 <startup-0x1fead6c8>
 120:	01040200 	mrseq	r0, R12_usr
 124:	2f0b052e 	svccs	0x000b052e
 128:	052e1605 	streq	r1, [lr, #-1541]!	@ 0xfffff9fb
 12c:	2b054a05 	blcs	152948 <startup-0x1fead6b8>
 130:	01040200 	mrseq	r0, R12_usr
 134:	2f0b052e 	svccs	0x000b052e
 138:	052e1605 	streq	r1, [lr, #-1541]!	@ 0xfffff9fb
 13c:	2c054a05 			@ <UNDEFINED> instruction: 0x2c054a05
 140:	01040200 	mrseq	r0, R12_usr
 144:	2f0b052e 	svccs	0x000b052e
 148:	052e1605 	streq	r1, [lr, #-1541]!	@ 0xfffff9fb
 14c:	2c054a05 			@ <UNDEFINED> instruction: 0x2c054a05
 150:	01040200 	mrseq	r0, R12_usr
 154:	3009052e 	andcc	r0, r9, lr, lsr #10
 158:	03210105 			@ <UNDEFINED> instruction: 0x03210105
 15c:	0b05580c 	bleq	156194 <startup-0x1fea9e6c>
 160:	2e02053d 	mcrcs	5, 0, r0, cr2, cr13, {1}
 164:	05230305 	streq	r0, [r3, #-773]!	@ 0xfffffcfb
 168:	03055921 	movweq	r5, #22817	@ 0x5921
 16c:	5a060559 	bpl	1816d8 <startup-0x1fe7e928>
 170:	054c1805 	strbeq	r1, [ip, #-2053]	@ 0xfffff7fb
 174:	04020020 	streq	r0, [r2], #-32	@ 0xffffffe0
 178:	82770302 	rsbshi	r0, r7, #134217728	@ 0x8000000
 17c:	02001805 	andeq	r1, r0, #327680	@ 0x50000
 180:	053c0104 	ldreq	r0, [ip, #-260]!	@ 0xfffffefc
 184:	3c0d0309 	stccc	3, cr0, [sp], {9}
 188:	6d210105 	stfvss	f0, [r1, #-20]!	@ 0xffffffec
 18c:	052f0605 	streq	r0, [pc, #-1541]!	@ fffffb8f <currently_pressed_key+0xdffff5f7>
 190:	07052e0c 	streq	r2, [r5, -ip, lsl #28]
 194:	2e120531 	mrccs	5, 0, r0, cr2, cr1, {1}
 198:	052f1a05 	streq	r1, [pc, #-2565]!	@ fffff79b <currently_pressed_key+0xdffff203>
 19c:	07054a18 	smladeq	r5, r8, sl, r4
 1a0:	2e12052f 	cfmul64cs	mvdx0, mvdx2, mvdx15
 1a4:	05300605 	ldreq	r0, [r0, #-1541]!	@ 0xfffff9fb
 1a8:	0605580c 	streq	r5, [r5], -ip, lsl #16
 1ac:	580b054b 	stmdapl	fp, {r0, r1, r3, r6, r8, sl}
 1b0:	a44b0105 	strbge	r0, [fp], #-261	@ 0xfffffefb
 1b4:	05310705 	ldreq	r0, [r1, #-1797]!	@ 0xfffff8fb
 1b8:	07052e13 	smladeq	r5, r3, lr, r2
 1bc:	2e13054b 	cfmac32cs	mvfx0, mvfx3, mvfx11
 1c0:	054b0705 	strbeq	r0, [fp, #-1797]	@ 0xfffff8fb
 1c4:	07052e14 	smladeq	r5, r4, lr, r2
 1c8:	2e14054b 	cfmac32cs	mvfx0, mvfx4, mvfx11
 1cc:	054d0705 	strbeq	r0, [sp, #-1797]	@ 0xfffff8fb
 1d0:	07052e14 	smladeq	r5, r4, lr, r2
 1d4:	2e140575 	mrccs	5, 0, r0, cr4, cr5, {3}
 1d8:	05750705 	ldrbeq	r0, [r5, #-1797]!	@ 0xfffff8fb
 1dc:	07052e14 	smladeq	r5, r4, lr, r2
 1e0:	2e140575 	mrccs	5, 0, r0, cr4, cr5, {3}
 1e4:	05760705 	ldrbeq	r0, [r6, #-1797]!	@ 0xfffff8fb
 1e8:	07052e1a 	smladeq	r5, sl, lr, r2
 1ec:	2e1a054b 	cfmac32cs	mvfx0, mvfx10, mvfx11
 1f0:	054b0705 	strbeq	r0, [fp, #-1797]	@ 0xfffff8fb
 1f4:	07052e1a 	smladeq	r5, sl, lr, r2
 1f8:	2e1a054b 	cfmac32cs	mvfx0, mvfx10, mvfx11
 1fc:	054c0705 	strbeq	r0, [ip, #-1797]	@ 0xfffff8fb
 200:	02052e12 	andeq	r2, r5, #288	@ 0x120
 204:	202d0532 	eorcs	r0, sp, r2, lsr r5
 208:	05310605 	ldreq	r0, [r1, #-1541]!	@ 0xfffff9fb
 20c:	0605580c 	streq	r5, [r5], -ip, lsl #16
 210:	580d054b 	stmdapl	sp, {r0, r1, r3, r6, r8, sl}
 214:	054e0205 	strbeq	r0, [lr, #-517]	@ 0xfffffdfb
 218:	02052035 	andeq	r2, r5, #53	@ 0x35
 21c:	2037052f 	eorscs	r0, r7, pc, lsr #10
 220:	05310205 	ldreq	r0, [r1, #-517]!	@ 0xfffffdfb
 224:	02052020 	andeq	r2, r5, #32
 228:	2026053d 	eorcs	r0, r6, sp, lsr r5
 22c:	083d0105 	ldmdaeq	sp!, {r0, r2, r8}
 230:	2f07054d 	svccs	0x0007054d
 234:	052e1305 	streq	r1, [lr, #-773]!	@ 0xfffffcfb
 238:	19054a07 	stmdbne	r5, {r0, r1, r2, r9, fp, lr}
 23c:	bb01052e 	bllt	416fc <startup-0x1ffbe904>
 240:	2f07056b 	svccs	0x0007056b
 244:	052e1305 	streq	r1, [lr, #-773]!	@ 0xfffffcfb
 248:	19057507 	stmdbne	r5, {r0, r1, r2, r8, sl, ip, sp, lr}
 24c:	4b07052e 	blmi	1c170c <startup-0x1fe3e8f4>
 250:	052e1a05 	streq	r1, [lr, #-2565]!	@ 0xfffff5fb
 254:	055e4b01 	ldrbeq	r4, [lr, #-2817]	@ 0xfffff4ff
 258:	15054b09 	strne	r4, [r5, #-2825]	@ 0xfffff4f7
 25c:	4b02052e 	blmi	8171c <startup-0x1ff7e8e4>
 260:	05202d05 	streq	r2, [r0, #-3333]!	@ 0xfffff2fb
 264:	13052f09 	movwne	r2, #24329	@ 0x5f09
 268:	4b1f052e 	blmi	7c1728 <startup-0x1f83e8d8>
 26c:	05820905 	streq	r0, [r2, #2309]	@ 0x905
 270:	10052e2a 	andne	r2, r5, sl, lsr #28
 274:	21090558 	tstcs	r9, r8, asr r5
 278:	052e1205 	streq	r1, [lr, #-517]!	@ 0xfffffdfb
 27c:	05b04b01 	ldreq	r4, [r0, #2817]!	@ 0xb01
 280:	19052f07 	stmdbne	r5, {r0, r1, r2, r8, r9, sl, fp, sp}
 284:	4b09052e 	blmi	241744 <startup-0x1fdbe8bc>
 288:	052e1205 	streq	r1, [lr, #-517]!	@ 0xfffffdfb
 28c:	05874b01 	streq	r4, [r7, #2817]	@ 0xb01
 290:	2f2f2f03 	svccs	0x002f2f03
 294:	05590805 	ldrbeq	r0, [r9, #-2053]	@ 0xfffff7fb
 298:	0402001f 	streq	r0, [r2], #-31	@ 0xffffffe1
 29c:	03052001 	movweq	r2, #20481	@ 0x5001
 2a0:	2f080559 	svccs	0x00080559
 2a4:	02001f05 	andeq	r1, r0, #5, 30
 2a8:	05200104 	streq	r0, [r0, #-260]!	@ 0xfffffefc
 2ac:	08055903 	stmdaeq	r5, {r0, r1, r8, fp, ip, lr}
 2b0:	001f0559 	andseq	r0, pc, r9, asr r5	@ <UNPREDICTABLE>
 2b4:	20010402 	andcs	r0, r1, r2, lsl #8
 2b8:	05590305 	ldrbeq	r0, [r9, #-773]	@ 0xfffffcfb
 2bc:	06022f01 	streq	r2, [r2], -r1, lsl #30
 2c0:	Address 0x2c0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5059544f 	subspl	r5, r9, pc, asr #8
   4:	4c5f5245 	lfmmi	f5, 2, [pc], {69}	@ 0x45
   8:	7300574f 	movwvc	r5, #1871	@ 0x74f
   c:	6f527465 	svcvs	0x00527465
  10:	61745377 	cmnvs	r4, r7, ror r3
  14:	50006574 	andpl	r6, r0, r4, ror r5
  18:	4d74726f 	lfmmi	f7, 2, [r4, #-444]!	@ 0xfffffe44
  1c:	4d65646f 	cfstrdmi	mvd6, [r5, #-444]!	@ 0xfffffe44
  20:	70007061 	andvc	r7, r0, r1, rrx
  24:	4574726f 	ldrbmi	r7, [r4, #-623]!	@ 0xfffffd91
  28:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
  2c:	69700030 	ldmdbvs	r0!, {r4, r5}^
  30:	7000316e 	andvc	r3, r0, lr, ror #2
  34:	00326e69 	eorseq	r6, r2, r9, ror #28
  38:	336e6970 	cmncc	lr, #112, 18	@ 0x1c0000
  3c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
  40:	69700034 	ldmdbvs	r0!, {r2, r4, r5}^
  44:	7000356e 	andvc	r3, r0, lr, ror #10
  48:	00366e69 	eorseq	r6, r6, r9, ror #28
  4c:	376e6970 			@ <UNDEFINED> instruction: 0x376e6970
  50:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
  54:	69700038 	ldmdbvs	r0!, {r3, r4, r5}^
  58:	6b00396e 	blvs	e618 <startup-0x1fff19e8>
  5c:	61567965 	cmpvs	r6, r5, ror #18
  60:	0065756c 	rsbeq	r7, r5, ip, ror #10
  64:	72727563 	rsbsvc	r7, r2, #415236096	@ 0x18c00000
  68:	6c746e65 	ldclvs	14, cr6, [r4], #-404	@ 0xfffffe6c
  6c:	72705f79 	rsbsvc	r5, r0, #484	@ 0x1e4
  70:	65737365 	ldrbvs	r7, [r3, #-869]!	@ 0xfffffc9b
  74:	656b5f64 	strbvs	r5, [fp, #-3940]!	@ 0xfffff09c
  78:	754f0079 	strbvc	r0, [pc, #-121]	@ 7 <startup-0x1ffffff9>
  7c:	74757074 	ldrbtvc	r7, [r5], #-116	@ 0xffffff8c
  80:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
  84:	0070614d 	rsbseq	r6, r0, sp, asr #2
  88:	45444f4d 	strbmi	r4, [r4, #-3917]	@ 0xfffff0b3
  8c:	6e490052 	mcrvs	0, 2, r0, cr9, cr2, {2}
  90:	74726576 	ldrbtvc	r6, [r2], #-1398	@ 0xfffffa8a
  94:	65766157 	ldrbvs	r6, [r6, #-343]!	@ 0xfffffea9
  98:	50555000 	subspl	r5, r5, r0
  9c:	4c5f5244 	lfmmi	f5, 2, [pc], {68}	@ 0x44
  a0:	5000574f 	andpl	r5, r0, pc, asr #14
  a4:	556c6c75 	strbpl	r6, [ip, #-3189]!	@ 0xfffff38b
  a8:	6c755070 	ldclvs	0, cr5, [r5], #-448	@ 0xfffffe40
  ac:	776f446c 	strbvc	r4, [pc, -ip, ror #8]!
  b0:	70614d6e 	rsbvc	r4, r1, lr, ror #26
  b4:	61745300 	cmnvs	r4, r0, lsl #6
  b8:	71537472 	cmpvc	r3, r2, ror r4
  bc:	65726175 	ldrbvs	r6, [r2, #-373]!	@ 0xfffffe8b
  c0:	65766157 	ldrbvs	r6, [r6, #-343]!	@ 0xfffffea9
  c4:	59544f00 	ldmdbpl	r4, {r8, r9, sl, fp, lr}^
  c8:	00524550 	subseq	r4, r2, r0, asr r5
  cc:	42414e45 	submi	r4, r1, #1104	@ 0x450
  d0:	4400454c 	strmi	r4, [r0], #-1356	@ 0xfffffab4
  d4:	74535c3a 	ldrbvc	r5, [r3], #-3130	@ 0xfffff3c6
  d8:	65696475 	strbvs	r6, [r9, #-1141]!	@ 0xfffffb8b
  dc:	614d5c73 	hvcvs	54723	@ 0xd5c3
  e0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
  e4:	724f2d65 	subvc	r2, pc, #6464	@ 0x1940
  e8:	746e6569 	strbtvc	r6, [lr], #-1385	@ 0xfffffa97
  ec:	502d6465 	eorpl	r6, sp, r5, ror #8
  f0:	72676f72 	rsbvc	r6, r7, #456	@ 0x1c8
  f4:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
  f8:	575c676e 	ldrbpl	r6, [ip, -lr, ror #14]
  fc:	5c6b726f 	sfmpl	f7, 2, [fp], #-444	@ 0xfffffe44
 100:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
 104:	2d656e69 	stclcs	14, cr6, [r5, #-420]!	@ 0xfffffe5c
 108:	6569724f 	strbvs	r7, [r9, #-591]!	@ 0xfffffdb1
 10c:	6465746e 	strbtvs	r7, [r5], #-1134	@ 0xfffffb92
 110:	6f72502d 	svcvs	0x0072502d
 114:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	@ 0xfffffe64
 118:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
 11c:	7574532d 	ldrbvc	r5, [r4, #-813]!	@ 0xfffffcd3
 120:	73656964 	cmnvc	r5, #100, 18	@ 0x190000
 124:	465c435c 			@ <UNDEFINED> instruction: 0x465c435c
 128:	68746669 	ldmdavs	r4!, {r0, r3, r5, r6, r9, sl, sp, lr}^
 12c:	5c797254 	lfmpl	f7, 2, [r9], #-336	@ 0xfffffeb0
 130:	5462614c 	strbtpl	r6, [r2], #-332	@ 0xfffffeb4
 134:	65657268 	strbvs	r7, [r5, #-616]!	@ 0xfffffd98
 138:	6b736154 	blvs	1cd8690 <startup-0x1e327970>
 13c:	006f7754 	rsbeq	r7, pc, r4, asr r7	@ <UNPREDICTABLE>
 140:	706f7453 	rsbvc	r7, pc, r3, asr r4	@ <UNPREDICTABLE>
 144:	61757153 	cmnvs	r5, r3, asr r1
 148:	61576572 	cmpvs	r7, r2, ror r5
 14c:	75006576 	strvc	r6, [r0, #-1398]	@ 0xfffffa8a
 150:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 154:	2064656e 	rsbcs	r6, r4, lr, ror #10
 158:	72616863 	rsbvc	r6, r1, #6488064	@ 0x630000
 15c:	756e7500 	strbvc	r7, [lr, #-1280]!	@ 0xfffffb00
 160:	30646573 	rsbcc	r6, r4, r3, ror r5
 164:	73795300 	cmnvc	r9, #0, 6
 168:	6b636954 	blvs	18da6c0 <startup-0x1e725940>
 16c:	52444f00 	subpl	r4, r4, #0, 30
 170:	4749485f 	smlsldmi	r4, r9, pc, r8	@ <UNPREDICTABLE>
 174:	534f0048 	movtpl	r0, #61512	@ 0xf048
 178:	44454550 	strbmi	r4, [r5], #-1360	@ 0xfffffab0
 17c:	49485f52 	stmdbmi	r8, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
 180:	4d004847 	stcmi	8, cr4, [r0, #-284]	@ 0xfffffee4
 184:	5245444f 	subpl	r4, r5, #1325400064	@ 0x4f000000
 188:	4749485f 	smlsldmi	r4, r9, pc, r8	@ <UNPREDICTABLE>
 18c:	68730048 	ldmdavs	r3!, {r3, r6}^
 190:	2074726f 	rsbscs	r7, r4, pc, ror #4
 194:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 198:	64656e67 	strbtvs	r6, [r5], #-3687	@ 0xfffff199
 19c:	746e6920 	strbtvc	r6, [lr], #-2336	@ 0xfffff6e0
 1a0:	74756f00 	ldrbtvc	r6, [r5], #-3840	@ 0xfffff100
 1a4:	54747570 	ldrbtpl	r7, [r4], #-1392	@ 0xfffffa90
 1a8:	00657079 	rsbeq	r7, r5, r9, ror r0
 1ac:	52535452 	subspl	r5, r3, #1375731712	@ 0x52000000
 1b0:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 1b4:	74617453 	strbtvc	r7, [r1], #-1107	@ 0xfffffbad
 1b8:	4f4d0065 	svcmi	0x004d0065
 1bc:	5f524544 	svcpl	0x00524544
 1c0:	00574f4c 	subseq	r4, r7, ip, asr #30
 1c4:	5059544f 	subspl	r5, r9, pc, asr #8
 1c8:	485f5245 	ldmdami	pc, {r0, r2, r6, r9, ip, lr}^	@ <UNPREDICTABLE>
 1cc:	00484749 	subeq	r4, r8, r9, asr #14
 1d0:	42656e4f 	rsbmi	r6, r5, #1264	@ 0x4f0
 1d4:	65507469 	ldrbvs	r7, [r0, #-1129]	@ 0xfffffb97
 1d8:	6e695072 	mcrvs	0, 3, r5, cr9, cr2, {3}
 1dc:	54584500 	ldrbpl	r4, [r8], #-1280	@ 0xfffffb00
 1e0:	44490049 	strbmi	r0, [r9], #-73	@ 0xffffffb7
 1e4:	49485f52 	stmdbmi	r8, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
 1e8:	65004847 	strvs	r4, [r0, #-2119]	@ 0xfffff7b9
 1ec:	00697478 	rsbeq	r7, r9, r8, ror r4
 1f0:	74696e49 	strbtvc	r6, [r9], #-3657	@ 0xfffff1b7
 1f4:	61757153 	cmnvs	r5, r3, asr r1
 1f8:	61576572 	cmpvs	r7, r2, ror r5
 1fc:	4f006576 	svcmi	0x00006576
 200:	45455053 	strbmi	r5, [r5, #-83]	@ 0xffffffad
 204:	43005244 	movwmi	r5, #580	@ 0x244
 208:	544e554f 	strbpl	r5, [lr], #-1359	@ 0xfffffab1
 20c:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
 210:	52444f00 	subpl	r4, r4, #0, 30
 214:	574f4c5f 	smlsldpl	r4, pc, pc, ip	@ <UNPREDICTABLE>
 218:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 21c:	756f004f 	strbvc	r0, [pc, #-79]!	@ 1d5 <startup-0x1ffffe2b>
 220:	74757074 	ldrbtvc	r7, [r5], #-116	@ 0xffffff8c
 224:	61746144 	cmnvs	r4, r4, asr #2
 228:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
 22c:	73657250 	cmnvc	r5, #80, 4
 230:	48646573 	stmdami	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 234:	6c646e61 	stclvs	14, cr6, [r4], #-388	@ 0xfffffe7c
 238:	50007265 	andpl	r7, r0, r5, ror #4
 23c:	52445055 	subpl	r5, r4, #85	@ 0x55
 240:	4749485f 	smlsldmi	r4, r9, pc, r8	@ <UNPREDICTABLE>
 244:	74730048 	ldrbtvc	r0, [r3], #-72	@ 0xffffffb8
 248:	75747261 	ldrbvc	r7, [r4, #-609]!	@ 0xfffffd9f
 24c:	6f6d0070 	svcvs	0x006d0070
 250:	43006564 	movwmi	r6, #1380	@ 0x564
 254:	004c5254 	subeq	r5, ip, r4, asr r2
 258:	6c6c7570 	cfstr64vs	mvdx7, [ip], #-448	@ 0xfffffe40
 25c:	75507055 	ldrbvc	r7, [r0, #-85]	@ 0xffffffab
 260:	6f446c6c 	svcvs	0x00446c6c
 264:	50006e77 	andpl	r6, r0, r7, ror lr
 268:	52445055 	subpl	r5, r4, #85	@ 0x55
 26c:	74756f00 	ldrbtvc	r6, [r5], #-3840	@ 0xfffff100
 270:	53747570 	cmnpl	r4, #112, 10	@ 0x1c000000
 274:	64656570 	strbtvs	r6, [r5], #-1392	@ 0xfffffa90
 278:	61657200 	cmnvs	r5, r0, lsl #4
 27c:	6c6f4364 	stclvs	3, cr4, [pc], #-400	@ f4 <startup-0x1fffff0c>
 280:	736e6d75 	cmnvc	lr, #7488	@ 0x1d40
 284:	73797300 	cmnvc	r9, #0, 6
 288:	6b636954 	blvs	18da7e0 <startup-0x1e725820>
 28c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 290:	4449006e 	strbmi	r0, [r9], #-110	@ 0xffffff92
 294:	4f4c5f52 	svcmi	0x004c5f52
 298:	656b0057 	strbvs	r0, [fp, #-87]!	@ 0xffffffa9
 29c:	4c006279 	sfmmi	f6, 4, [r0], {121}	@ 0x79
 2a0:	0044414f 	subeq	r4, r4, pc, asr #2
 2a4:	532f3a44 			@ <UNDEFINED> instruction: 0x532f3a44
 2a8:	69647574 	stmdbvs	r4!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 2ac:	4d2f7365 	stcmi	3, cr7, [pc, #-404]!	@ 120 <startup-0x1ffffee0>
 2b0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 2b4:	4f2d656e 	svcmi	0x002d656e
 2b8:	6e656972 			@ <UNDEFINED> instruction: 0x6e656972
 2bc:	2d646574 	cfstr64cs	mvdx6, [r4, #-464]!	@ 0xfffffe30
 2c0:	676f7250 			@ <UNDEFINED> instruction: 0x676f7250
 2c4:	6d6d6172 	stfvse	f6, [sp, #-456]!	@ 0xfffffe38
 2c8:	2f676e69 	svccs	0x00676e69
 2cc:	6b726f57 	blvs	1c9c030 <startup-0x1e363fd0>
 2d0:	63614d2f 	cmnvs	r1, #3008	@ 0xbc0
 2d4:	656e6968 	strbvs	r6, [lr, #-2408]!	@ 0xfffff698
 2d8:	69724f2d 	ldmdbvs	r2!, {r0, r2, r3, r5, r8, r9, sl, fp, lr}^
 2dc:	65746e65 	ldrbvs	r6, [r4, #-3685]!	@ 0xfffff19b
 2e0:	72502d64 	subsvc	r2, r0, #100, 26	@ 0x1900
 2e4:	6172676f 	cmnvs	r2, pc, ror #14
 2e8:	6e696d6d 	cdpvs	13, 6, cr6, cr9, cr13, {3}
 2ec:	74532d67 	ldrbvc	r2, [r3], #-3431	@ 0xfffff299
 2f0:	65696475 	strbvs	r6, [r9, #-1141]!	@ 0xfffffb8b
 2f4:	2f432f73 	svccs	0x00432f73
 2f8:	74666946 	strbtvc	r6, [r6], #-2374	@ 0xfffff6ba
 2fc:	79725468 	ldmdbvc	r2!, {r3, r5, r6, sl, ip, lr}^
 300:	62614c2f 	rsbvs	r4, r1, #12032	@ 0x2f00
 304:	65726854 	ldrbvs	r6, [r2, #-2132]!	@ 0xfffff7ac
 308:	73615465 	cmnvc	r1, #1694498816	@ 0x65000000
 30c:	6f77546b 	svcvs	0x0077546b
 310:	6174732f 	cmnvs	r4, pc, lsr #6
 314:	70757472 	rsbsvc	r7, r5, r2, ror r4
 318:	6300632e 	movwvs	r6, #814	@ 0x32e
 31c:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	@ 0xfffffe44
 320:	6572506e 	ldrbvs	r5, [r2, #-110]!	@ 0xffffff92
 324:	64657373 	strbtvs	r7, [r5], #-883	@ 0xfffffc8d
 328:	43495400 	movtmi	r5, #37888	@ 0x9400
 32c:	544e494b 	strbpl	r4, [lr], #-2379	@ 0xfffff6b5
 330:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 334:	61447475 	hvcvs	18245	@ 0x4745
 338:	53006174 	movwpl	r6, #372	@ 0x174
 33c:	52454957 	subpl	r4, r5, #1425408	@ 0x15c000
 340:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
 344:	70003031 	andvc	r3, r0, r1, lsr r0
 348:	31316e69 	teqcc	r1, r9, ror #28
 34c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
 350:	70003231 	andvc	r3, r0, r1, lsr r2
 354:	33316e69 	teqcc	r1, #1680	@ 0x690
 358:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
 35c:	47003431 	smladxmi	r0, r1, r4, r3
 360:	4320554e 			@ <UNDEFINED> instruction: 0x4320554e
 364:	31203939 			@ <UNDEFINED> instruction: 0x31203939
 368:	2e332e32 	mrccs	14, 1, r2, cr3, cr2, {1}
 36c:	30322031 	eorscc	r2, r2, r1, lsr r0
 370:	36303332 			@ <UNDEFINED> instruction: 0x36303332
 374:	2d203632 	stccs	6, cr3, [r0, #-200]!	@ 0xffffff38
 378:	7568746d 	strbvc	r7, [r8, #-1133]!	@ 0xfffffb93
 37c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	@ 0xfffffe4c
 380:	6f6c666d 	svcvs	0x006c666d
 384:	612d7461 			@ <UNDEFINED> instruction: 0x612d7461
 388:	733d6962 	teqvc	sp, #1605632	@ 0x188000
 38c:	2074666f 	rsbscs	r6, r4, pc, ror #12
 390:	72616d2d 	rsbvc	r6, r1, #2880	@ 0xb40
 394:	613d6863 	teqvs	sp, r3, ror #16
 398:	36766d72 			@ <UNDEFINED> instruction: 0x36766d72
 39c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	@ 0xffffff4c
 3a0:	4f2d2067 	svcmi	0x002d2067
 3a4:	732d2030 			@ <UNDEFINED> instruction: 0x732d2030
 3a8:	633d6474 	teqvs	sp, #116, 8	@ 0x74000000
 3ac:	49003939 	stmdbmi	r0, {r0, r3, r4, r5, r8, fp, ip, sp}
 3b0:	4b74696e 	blmi	1d1a970 <startup-0x1e2e5690>
 3b4:	6f627965 	svcvs	0x00627965
 3b8:	00647261 	rsbeq	r7, r4, r1, ror #4
 3bc:	4550534f 	ldrbmi	r5, [r0, #-847]	@ 0xfffffcb1
 3c0:	5f524445 	svcpl	0x00524445
 3c4:	00574f4c 	subseq	r4, r7, ip, asr #30
 3c8:	7074754f 	rsbsvc	r7, r4, pc, asr #10
 3cc:	70537475 	subsvc	r7, r3, r5, ror r4
 3d0:	4d646565 	cfstr64mi	mvdx6, [r4, #-404]!	@ 0xfffffe6c
 3d4:	54007061 	strpl	r7, [r0], #-97	@ 0xffffff9f
 3d8:	69426f77 	stmdbvs	r2, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 3dc:	65507374 	ldrbvs	r7, [r0, #-884]	@ 0xfffffc8c
 3e0:	6e695072 	mcrvs	0, 3, r5, cr9, cr2, {3}
 3e4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
 3e8:	43003531 	movwmi	r3, #1329	@ 0x531
 3ec:	4f534b4c 	svcmi	0x00534b4c
 3f0:	45435255 	strbmi	r5, [r3, #-597]	@ 0xfffffdab
 3f4:	72657000 	rsbvc	r7, r5, #0
 3f8:	5f646f69 	svcpl	0x00646f69
 3fc:	755f6e69 	ldrbvc	r6, [pc, #-3689]	@ fffff59b <currently_pressed_key+0xdffff003>
 400:	54460073 	strbpl	r0, [r6], #-115	@ 0xffffff8d
 404:	Address 0x404 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	72412820 	subvc	r2, r1, #32, 16	@ 0x200000
   8:	4e47206d 	cdpmi	0, 4, cr2, cr7, cr13, {3}
   c:	6f542055 	svcvs	0x00542055
  10:	68636c6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
  14:	206e6961 	rsbcs	r6, lr, r1, ror #18
  18:	332e3231 			@ <UNDEFINED> instruction: 0x332e3231
  1c:	6c65522e 	sfmvs	f5, 2, [r5], #-184	@ 0xffffff48
  20:	42282031 	eormi	r2, r8, #49	@ 0x31
  24:	646c6975 	strbtvs	r6, [ip], #-2421	@ 0xfffff68b
  28:	6d726120 	ldfvse	f6, [r2, #-128]!	@ 0xffffff80
  2c:	2e32312d 	rsfcssp	f3, f2, #5.0
  30:	29293533 	stmdbcs	r9!, {r0, r1, r4, r5, r8, sl, ip, sp}
  34:	2e323120 	rsfcssp	f3, f2, f0
  38:	20312e33 	eorscs	r2, r1, r3, lsr lr
  3c:	33323032 	teqcc	r2, #50	@ 0x32
  40:	36323630 			@ <UNDEFINED> instruction: 0x36323630
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	@ 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	@ 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	@ 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			@ <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	000000b8 	strheq	r0, [r0], -r8
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0d41100e 	stcleq	0, cr1, [r1, #-56]	@ 0xffffffc8
  3c:	00000007 	andeq	r0, r0, r7
  40:	00000018 	andeq	r0, r0, r8, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	200000c8 	andcs	r0, r0, r8, asr #1
  4c:	00000060 	andeq	r0, r0, r0, rrx
  50:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  54:	41018e02 	tstmi	r1, r2, lsl #28
  58:	0000070d 	andeq	r0, r0, sp, lsl #14
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000128 	andcs	r0, r0, r8, lsr #2
  68:	0000005c 	andeq	r0, r0, ip, asr r0
  6c:	840c0e41 	strhi	r0, [ip], #-3649	@ 0xfffff1bf
  70:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  74:	180e4101 	stmdane	lr, {r0, r8, lr}
  78:	00070d41 	andeq	r0, r7, r1, asr #26
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	20000184 	andcs	r0, r0, r4, lsl #3
  88:	00000060 	andeq	r0, r0, r0, rrx
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0000070d 	andeq	r0, r0, sp, lsl #14
  98:	00000018 	andeq	r0, r0, r8, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200001e4 	andcs	r0, r0, r4, ror #3
  a4:	00000124 	andeq	r0, r0, r4, lsr #2
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0000070d 	andeq	r0, r0, sp, lsl #14
  b4:	00000018 	andeq	r0, r0, r8, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	20000308 	andcs	r0, r0, r8, lsl #6
  c0:	00000038 	andeq	r0, r0, r8, lsr r0
  c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c8:	41018e02 	tstmi	r1, r2, lsl #28
  cc:	0000070d 	andeq	r0, r0, sp, lsl #14
  d0:	00000018 	andeq	r0, r0, r8, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000340 	andcs	r0, r0, r0, asr #6
  dc:	00000038 	andeq	r0, r0, r8, lsr r0
  e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e4:	41018e02 	tstmi	r1, r2, lsl #28
  e8:	0000070d 	andeq	r0, r0, sp, lsl #14
  ec:	0000001c 	andeq	r0, r0, ip, lsl r0
  f0:	00000000 	andeq	r0, r0, r0
  f4:	20000378 	andcs	r0, r0, r8, ror r3
  f8:	00000068 	andeq	r0, r0, r8, rrx
  fc:	840c0e41 	strhi	r0, [ip], #-3649	@ 0xfffff1bf
 100:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 104:	180e4101 	stmdane	lr, {r0, r8, lr}
 108:	00070d41 	andeq	r0, r7, r1, asr #26
 10c:	00000018 	andeq	r0, r0, r8, lsl r0
 110:	00000000 	andeq	r0, r0, r0
 114:	200003e0 	andcs	r0, r0, r0, ror #7
 118:	0000002c 	andeq	r0, r0, ip, lsr #32
 11c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 120:	41018e02 	tstmi	r1, r2, lsl #28
 124:	0000070d 	andeq	r0, r0, sp, lsl #14
 128:	00000018 	andeq	r0, r0, r8, lsl r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	2000040c 	andcs	r0, r0, ip, lsl #8
 134:	00000058 	andeq	r0, r0, r8, asr r0
 138:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 13c:	41018e02 	tstmi	r1, r2, lsl #28
 140:	0000070d 	andeq	r0, r0, sp, lsl #14
 144:	0000000c 	andeq	r0, r0, ip
 148:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 14c:	7c010001 	stcvc	0, cr0, [r1], {1}
 150:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 154:	0000000c 	andeq	r0, r0, ip
 158:	00000144 	andeq	r0, r0, r4, asr #2
 15c:	20000465 	andcs	r0, r0, r5, ror #8
 160:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_line_str:

00000000 <.debug_line_str>:
   0:	7461642f 	strbtvc	r6, [r1], #-1071	@ 0xfffffbd1
   4:	656a2f61 	strbvs	r2, [sl, #-3937]!	@ 0xfffff09f
   8:	6e696b6e 	vnmulvs.f64	d22, d9, d30
   c:	6f772f73 	svcvs	0x00772f73
  10:	70736b72 	rsbsvc	r6, r3, r2, ror fp
  14:	2f656361 	svccs	0x00656361
  18:	2d554e47 	ldclcs	14, cr4, [r5, #-284]	@ 0xfffffee4
  1c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	@ fffffe54 <currently_pressed_key+0xdffff8bc>
  20:	69616863 	stmdbvs	r1!, {r0, r1, r5, r6, fp, sp, lr}^
  24:	72612f6e 	rsbvc	r2, r1, #440	@ 0x1b8
  28:	32312d6d 	eorscc	r2, r1, #6976	@ 0x1b40
  2c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
  30:	6e2d646c 	cdpvs	4, 2, cr6, cr13, cr12, {3}
  34:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
  38:	72612d62 	rsbvc	r2, r1, #6272	@ 0x1880
  3c:	6f6e2d6d 	svcvs	0x006e2d6d
  40:	652d656e 	strvs	r6, [sp, #-1390]!	@ 0xfffffa92
  44:	2f696261 	svccs	0x00696261
  48:	2f6a626f 	svccs	0x006a626f
  4c:	32636367 	rsbcc	r6, r3, #-1677721599	@ 0x9c000001
  50:	6d72612f 	ldfvse	f6, [r2, #-188]!	@ 0xffffff44
  54:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  58:	61652d65 	cmnvs	r5, r5, ror #26
  5c:	742f6962 	strtvc	r6, [pc], #-2402	@ 64 <startup-0x1fffff9c>
  60:	626d7568 	rsbvs	r7, sp, #104, 10	@ 0x1a000000
  64:	2d36762f 	ldccs	6, cr7, [r6, #-188]!	@ 0xffffff44
  68:	6f6e2f6d 	svcvs	0x006e2f6d
  6c:	6c2f7066 	stcvs	0, cr7, [pc], #-408	@ fffffedc <currently_pressed_key+0xdffff944>
  70:	63676269 	cmnvs	r7, #-1879048186	@ 0x90000006
  74:	642f0063 	strtvs	r0, [pc], #-99	@ 7c <startup-0x1fffff84>
  78:	2f617461 	svccs	0x00617461
  7c:	6b6e656a 	blvs	1b9962c <startup-0x1e4669d4>
  80:	2f736e69 	svccs	0x00736e69
  84:	6b726f77 	blvs	1c9be68 <startup-0x1e364198>
  88:	63617073 	cmnvs	r1, #115	@ 0x73
  8c:	4e472f65 	cdpmi	15, 4, cr2, cr7, cr5, {3}
  90:	6f742d55 	svcvs	0x00742d55
  94:	68636c6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
  98:	2f6e6961 	svccs	0x006e6961
  9c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	@ 0xfffffe7c
  a0:	732f3231 			@ <UNDEFINED> instruction: 0x732f3231
  a4:	672f6372 			@ <UNDEFINED> instruction: 0x672f6372
  a8:	6c2f6363 	stcvs	3, cr6, [pc], #-396	@ ffffff24 <currently_pressed_key+0xdffff98c>
  ac:	63676269 	cmnvs	r7, #-1879048186	@ 0x90000006
  b0:	6f632f63 	svcvs	0x00632f63
  b4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
  b8:	6d72612f 	ldfvse	f6, [r2, #-188]!	@ 0xffffff44
  bc:	62696c00 	rsbvs	r6, r9, #0, 24
  c0:	6e756631 	mrcvs	6, 3, r6, cr5, cr1, {1}
  c4:	532e7363 			@ <UNDEFINED> instruction: 0x532e7363
	...
