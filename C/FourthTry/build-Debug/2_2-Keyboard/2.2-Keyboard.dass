
..\build-Debug\bin\2.2-Keyboard.exe:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

__attribute__((naked)) 
__attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	@ (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f964 	bl	200002d0 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			@ (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <app_init>:

#define GPIO_D 0x40020C00
GPIO* portD = (GPIO*) GPIO_D; 

void app_init (void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	portD->MODER_LOW = 0x55;	// D0-D7 as output for 7-segment display.
20000014:	4b41      	ldr	r3, [pc, #260]	@ (2000011c <app_init+0x10c>)
20000016:	681b      	ldr	r3, [r3, #0]
20000018:	2255      	movs	r2, #85	@ 0x55
2000001a:	801a      	strh	r2, [r3, #0]
	portD->OTYPER_LOW = 0;		// D0-D7 as push-pull.
2000001c:	4b3f      	ldr	r3, [pc, #252]	@ (2000011c <app_init+0x10c>)
2000001e:	681b      	ldr	r3, [r3, #0]
20000020:	2200      	movs	r2, #0
20000022:	711a      	strb	r2, [r3, #4]
	
	// Lower nibble of higher byte, the columns, are input with pull-up.
	portD->mode.pin8 = MODE_INPUT;
20000024:	4b3d      	ldr	r3, [pc, #244]	@ (2000011c <app_init+0x10c>)
20000026:	681b      	ldr	r3, [r3, #0]
20000028:	789a      	ldrb	r2, [r3, #2]
2000002a:	2103      	movs	r1, #3
2000002c:	438a      	bics	r2, r1
2000002e:	709a      	strb	r2, [r3, #2]
	portD->mode.pin9 = MODE_INPUT;
20000030:	4b3a      	ldr	r3, [pc, #232]	@ (2000011c <app_init+0x10c>)
20000032:	681b      	ldr	r3, [r3, #0]
20000034:	789a      	ldrb	r2, [r3, #2]
20000036:	210c      	movs	r1, #12
20000038:	438a      	bics	r2, r1
2000003a:	709a      	strb	r2, [r3, #2]
	portD->mode.pin10 = MODE_INPUT;
2000003c:	4b37      	ldr	r3, [pc, #220]	@ (2000011c <app_init+0x10c>)
2000003e:	681b      	ldr	r3, [r3, #0]
20000040:	789a      	ldrb	r2, [r3, #2]
20000042:	2130      	movs	r1, #48	@ 0x30
20000044:	438a      	bics	r2, r1
20000046:	709a      	strb	r2, [r3, #2]
	portD->mode.pin11 = MODE_INPUT;
20000048:	4b34      	ldr	r3, [pc, #208]	@ (2000011c <app_init+0x10c>)
2000004a:	681b      	ldr	r3, [r3, #0]
2000004c:	789a      	ldrb	r2, [r3, #2]
2000004e:	213f      	movs	r1, #63	@ 0x3f
20000050:	400a      	ands	r2, r1
20000052:	709a      	strb	r2, [r3, #2]
	portD->pullUpPullDown.pin8 = PUPD_PULL_UP;
20000054:	4b31      	ldr	r3, [pc, #196]	@ (2000011c <app_init+0x10c>)
20000056:	681b      	ldr	r3, [r3, #0]
20000058:	7b9a      	ldrb	r2, [r3, #14]
2000005a:	2103      	movs	r1, #3
2000005c:	438a      	bics	r2, r1
2000005e:	1c11      	adds	r1, r2, #0
20000060:	2201      	movs	r2, #1
20000062:	430a      	orrs	r2, r1
20000064:	739a      	strb	r2, [r3, #14]
	portD->pullUpPullDown.pin9 = PUPD_PULL_UP;
20000066:	4b2d      	ldr	r3, [pc, #180]	@ (2000011c <app_init+0x10c>)
20000068:	681b      	ldr	r3, [r3, #0]
2000006a:	7b9a      	ldrb	r2, [r3, #14]
2000006c:	210c      	movs	r1, #12
2000006e:	438a      	bics	r2, r1
20000070:	1c11      	adds	r1, r2, #0
20000072:	2204      	movs	r2, #4
20000074:	430a      	orrs	r2, r1
20000076:	739a      	strb	r2, [r3, #14]
	portD->pullUpPullDown.pin10 = PUPD_PULL_UP;
20000078:	4b28      	ldr	r3, [pc, #160]	@ (2000011c <app_init+0x10c>)
2000007a:	681b      	ldr	r3, [r3, #0]
2000007c:	7b9a      	ldrb	r2, [r3, #14]
2000007e:	2130      	movs	r1, #48	@ 0x30
20000080:	438a      	bics	r2, r1
20000082:	1c11      	adds	r1, r2, #0
20000084:	2210      	movs	r2, #16
20000086:	430a      	orrs	r2, r1
20000088:	739a      	strb	r2, [r3, #14]
	portD->pullUpPullDown.pin11 = PUPD_PULL_UP;
2000008a:	4b24      	ldr	r3, [pc, #144]	@ (2000011c <app_init+0x10c>)
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	7b9a      	ldrb	r2, [r3, #14]
20000090:	213f      	movs	r1, #63	@ 0x3f
20000092:	400a      	ands	r2, r1
20000094:	1c11      	adds	r1, r2, #0
20000096:	2240      	movs	r2, #64	@ 0x40
20000098:	430a      	orrs	r2, r1
2000009a:	739a      	strb	r2, [r3, #14]
	
	// Higher nibble of higher byte, the rows, are output in open-drain.
	portD->mode.pin12 = MODE_OUTPUT;
2000009c:	4b1f      	ldr	r3, [pc, #124]	@ (2000011c <app_init+0x10c>)
2000009e:	681b      	ldr	r3, [r3, #0]
200000a0:	78da      	ldrb	r2, [r3, #3]
200000a2:	2103      	movs	r1, #3
200000a4:	438a      	bics	r2, r1
200000a6:	1c11      	adds	r1, r2, #0
200000a8:	2201      	movs	r2, #1
200000aa:	430a      	orrs	r2, r1
200000ac:	70da      	strb	r2, [r3, #3]
	portD->mode.pin13 = MODE_OUTPUT;
200000ae:	4b1b      	ldr	r3, [pc, #108]	@ (2000011c <app_init+0x10c>)
200000b0:	681b      	ldr	r3, [r3, #0]
200000b2:	78da      	ldrb	r2, [r3, #3]
200000b4:	210c      	movs	r1, #12
200000b6:	438a      	bics	r2, r1
200000b8:	1c11      	adds	r1, r2, #0
200000ba:	2204      	movs	r2, #4
200000bc:	430a      	orrs	r2, r1
200000be:	70da      	strb	r2, [r3, #3]
	portD->mode.pin14 = MODE_OUTPUT;
200000c0:	4b16      	ldr	r3, [pc, #88]	@ (2000011c <app_init+0x10c>)
200000c2:	681b      	ldr	r3, [r3, #0]
200000c4:	78da      	ldrb	r2, [r3, #3]
200000c6:	2130      	movs	r1, #48	@ 0x30
200000c8:	438a      	bics	r2, r1
200000ca:	1c11      	adds	r1, r2, #0
200000cc:	2210      	movs	r2, #16
200000ce:	430a      	orrs	r2, r1
200000d0:	70da      	strb	r2, [r3, #3]
	portD->mode.pin15 = MODE_OUTPUT;
200000d2:	4b12      	ldr	r3, [pc, #72]	@ (2000011c <app_init+0x10c>)
200000d4:	681b      	ldr	r3, [r3, #0]
200000d6:	78da      	ldrb	r2, [r3, #3]
200000d8:	213f      	movs	r1, #63	@ 0x3f
200000da:	400a      	ands	r2, r1
200000dc:	1c11      	adds	r1, r2, #0
200000de:	2240      	movs	r2, #64	@ 0x40
200000e0:	430a      	orrs	r2, r1
200000e2:	70da      	strb	r2, [r3, #3]
	portD->outputType.pin12 = OTYPE_OPEN_DRAIN;
200000e4:	4b0d      	ldr	r3, [pc, #52]	@ (2000011c <app_init+0x10c>)
200000e6:	681b      	ldr	r3, [r3, #0]
200000e8:	795a      	ldrb	r2, [r3, #5]
200000ea:	2110      	movs	r1, #16
200000ec:	430a      	orrs	r2, r1
200000ee:	715a      	strb	r2, [r3, #5]
	portD->outputType.pin13 = OTYPE_OPEN_DRAIN;
200000f0:	4b0a      	ldr	r3, [pc, #40]	@ (2000011c <app_init+0x10c>)
200000f2:	681b      	ldr	r3, [r3, #0]
200000f4:	795a      	ldrb	r2, [r3, #5]
200000f6:	2120      	movs	r1, #32
200000f8:	430a      	orrs	r2, r1
200000fa:	715a      	strb	r2, [r3, #5]
	portD->outputType.pin14 = OTYPE_OPEN_DRAIN;
200000fc:	4b07      	ldr	r3, [pc, #28]	@ (2000011c <app_init+0x10c>)
200000fe:	681b      	ldr	r3, [r3, #0]
20000100:	795a      	ldrb	r2, [r3, #5]
20000102:	2140      	movs	r1, #64	@ 0x40
20000104:	430a      	orrs	r2, r1
20000106:	715a      	strb	r2, [r3, #5]
	portD->outputType.pin15 = OTYPE_OPEN_DRAIN;
20000108:	4b04      	ldr	r3, [pc, #16]	@ (2000011c <app_init+0x10c>)
2000010a:	681b      	ldr	r3, [r3, #0]
2000010c:	795a      	ldrb	r2, [r3, #5]
2000010e:	2180      	movs	r1, #128	@ 0x80
20000110:	4249      	negs	r1, r1
20000112:	430a      	orrs	r2, r1
20000114:	715a      	strb	r2, [r3, #5]
}
20000116:	46c0      	nop			@ (mov r8, r8)
20000118:	46bd      	mov	sp, r7
2000011a:	bd80      	pop	{r7, pc}
2000011c:	200002e8 	andcs	r0, r0, r8, ror #5

20000120 <setRowState>:
#define DRAIN 0
#define OPEN 1

// Changes the state of a single row to newState.
void setRowState (int row, int newState)
{
20000120:	b580      	push	{r7, lr}
20000122:	b082      	sub	sp, #8
20000124:	af00      	add	r7, sp, #0
20000126:	6078      	str	r0, [r7, #4]
20000128:	6039      	str	r1, [r7, #0]
	if (row == 0) 		{portD->outputData.pin12 = newState; }
2000012a:	687b      	ldr	r3, [r7, #4]
2000012c:	2b00      	cmp	r3, #0
2000012e:	d111      	bne.n	20000154 <setRowState+0x34>
20000130:	4b28      	ldr	r3, [pc, #160]	@ (200001d4 <setRowState+0xb4>)
20000132:	681b      	ldr	r3, [r3, #0]
20000134:	683a      	ldr	r2, [r7, #0]
20000136:	1c11      	adds	r1, r2, #0
20000138:	2201      	movs	r2, #1
2000013a:	400a      	ands	r2, r1
2000013c:	b2d2      	uxtb	r2, r2
2000013e:	2101      	movs	r1, #1
20000140:	400a      	ands	r2, r1
20000142:	0110      	lsls	r0, r2, #4
20000144:	7d5a      	ldrb	r2, [r3, #21]
20000146:	2110      	movs	r1, #16
20000148:	438a      	bics	r2, r1
2000014a:	1c11      	adds	r1, r2, #0
2000014c:	1c02      	adds	r2, r0, #0
2000014e:	430a      	orrs	r2, r1
20000150:	755a      	strb	r2, [r3, #21]
	else if (row == 1) 	{portD->outputData.pin13 = newState; }
	else if (row == 2) 	{portD->outputData.pin14 = newState; }
	else if (row == 3) 	{portD->outputData.pin15 = newState; }
}
20000152:	e03b      	b.n	200001cc <setRowState+0xac>
	else if (row == 1) 	{portD->outputData.pin13 = newState; }
20000154:	687b      	ldr	r3, [r7, #4]
20000156:	2b01      	cmp	r3, #1
20000158:	d111      	bne.n	2000017e <setRowState+0x5e>
2000015a:	4b1e      	ldr	r3, [pc, #120]	@ (200001d4 <setRowState+0xb4>)
2000015c:	681b      	ldr	r3, [r3, #0]
2000015e:	683a      	ldr	r2, [r7, #0]
20000160:	1c11      	adds	r1, r2, #0
20000162:	2201      	movs	r2, #1
20000164:	400a      	ands	r2, r1
20000166:	b2d2      	uxtb	r2, r2
20000168:	2101      	movs	r1, #1
2000016a:	400a      	ands	r2, r1
2000016c:	0150      	lsls	r0, r2, #5
2000016e:	7d5a      	ldrb	r2, [r3, #21]
20000170:	2120      	movs	r1, #32
20000172:	438a      	bics	r2, r1
20000174:	1c11      	adds	r1, r2, #0
20000176:	1c02      	adds	r2, r0, #0
20000178:	430a      	orrs	r2, r1
2000017a:	755a      	strb	r2, [r3, #21]
}
2000017c:	e026      	b.n	200001cc <setRowState+0xac>
	else if (row == 2) 	{portD->outputData.pin14 = newState; }
2000017e:	687b      	ldr	r3, [r7, #4]
20000180:	2b02      	cmp	r3, #2
20000182:	d111      	bne.n	200001a8 <setRowState+0x88>
20000184:	4b13      	ldr	r3, [pc, #76]	@ (200001d4 <setRowState+0xb4>)
20000186:	681b      	ldr	r3, [r3, #0]
20000188:	683a      	ldr	r2, [r7, #0]
2000018a:	1c11      	adds	r1, r2, #0
2000018c:	2201      	movs	r2, #1
2000018e:	400a      	ands	r2, r1
20000190:	b2d2      	uxtb	r2, r2
20000192:	2101      	movs	r1, #1
20000194:	400a      	ands	r2, r1
20000196:	0190      	lsls	r0, r2, #6
20000198:	7d5a      	ldrb	r2, [r3, #21]
2000019a:	2140      	movs	r1, #64	@ 0x40
2000019c:	438a      	bics	r2, r1
2000019e:	1c11      	adds	r1, r2, #0
200001a0:	1c02      	adds	r2, r0, #0
200001a2:	430a      	orrs	r2, r1
200001a4:	755a      	strb	r2, [r3, #21]
}
200001a6:	e011      	b.n	200001cc <setRowState+0xac>
	else if (row == 3) 	{portD->outputData.pin15 = newState; }
200001a8:	687b      	ldr	r3, [r7, #4]
200001aa:	2b03      	cmp	r3, #3
200001ac:	d10e      	bne.n	200001cc <setRowState+0xac>
200001ae:	4b09      	ldr	r3, [pc, #36]	@ (200001d4 <setRowState+0xb4>)
200001b0:	681b      	ldr	r3, [r3, #0]
200001b2:	683a      	ldr	r2, [r7, #0]
200001b4:	1c11      	adds	r1, r2, #0
200001b6:	2201      	movs	r2, #1
200001b8:	400a      	ands	r2, r1
200001ba:	b2d2      	uxtb	r2, r2
200001bc:	01d0      	lsls	r0, r2, #7
200001be:	7d5a      	ldrb	r2, [r3, #21]
200001c0:	217f      	movs	r1, #127	@ 0x7f
200001c2:	400a      	ands	r2, r1
200001c4:	1c11      	adds	r1, r2, #0
200001c6:	1c02      	adds	r2, r0, #0
200001c8:	430a      	orrs	r2, r1
200001ca:	755a      	strb	r2, [r3, #21]
}
200001cc:	46c0      	nop			@ (mov r8, r8)
200001ce:	46bd      	mov	sp, r7
200001d0:	b002      	add	sp, #8
200001d2:	bd80      	pop	{r7, pc}
200001d4:	200002e8 	andcs	r0, r0, r8, ror #5

200001d8 <readColumns>:

// Returns a column with a pressed button. 0xFF is returned with no button pressed.
unsigned char readColumns ()
{
200001d8:	b580      	push	{r7, lr}
200001da:	af00      	add	r7, sp, #0
	// When a button is pressed it actually makes a connection to ground.
	// Meaning that a (normally pulled-up to 1) button is read as 0 when pressed.
	if (portD->inputData.pin8 == 0) { return 0; }
200001dc:	4b15      	ldr	r3, [pc, #84]	@ (20000234 <readColumns+0x5c>)
200001de:	681b      	ldr	r3, [r3, #0]
200001e0:	7c5b      	ldrb	r3, [r3, #17]
200001e2:	2201      	movs	r2, #1
200001e4:	4013      	ands	r3, r2
200001e6:	b2db      	uxtb	r3, r3
200001e8:	2b00      	cmp	r3, #0
200001ea:	d101      	bne.n	200001f0 <readColumns+0x18>
200001ec:	2300      	movs	r3, #0
200001ee:	e01e      	b.n	2000022e <readColumns+0x56>
	if (portD->inputData.pin9 == 0) { return 1; }
200001f0:	4b10      	ldr	r3, [pc, #64]	@ (20000234 <readColumns+0x5c>)
200001f2:	681b      	ldr	r3, [r3, #0]
200001f4:	7c5b      	ldrb	r3, [r3, #17]
200001f6:	2202      	movs	r2, #2
200001f8:	4013      	ands	r3, r2
200001fa:	b2db      	uxtb	r3, r3
200001fc:	2b00      	cmp	r3, #0
200001fe:	d101      	bne.n	20000204 <readColumns+0x2c>
20000200:	2301      	movs	r3, #1
20000202:	e014      	b.n	2000022e <readColumns+0x56>
	if (portD->inputData.pin10 == 0) { return 2; }
20000204:	4b0b      	ldr	r3, [pc, #44]	@ (20000234 <readColumns+0x5c>)
20000206:	681b      	ldr	r3, [r3, #0]
20000208:	7c5b      	ldrb	r3, [r3, #17]
2000020a:	2204      	movs	r2, #4
2000020c:	4013      	ands	r3, r2
2000020e:	b2db      	uxtb	r3, r3
20000210:	2b00      	cmp	r3, #0
20000212:	d101      	bne.n	20000218 <readColumns+0x40>
20000214:	2302      	movs	r3, #2
20000216:	e00a      	b.n	2000022e <readColumns+0x56>
	if (portD->inputData.pin11 == 0) { return 3; }
20000218:	4b06      	ldr	r3, [pc, #24]	@ (20000234 <readColumns+0x5c>)
2000021a:	681b      	ldr	r3, [r3, #0]
2000021c:	7c5b      	ldrb	r3, [r3, #17]
2000021e:	2208      	movs	r2, #8
20000220:	4013      	ands	r3, r2
20000222:	b2db      	uxtb	r3, r3
20000224:	2b00      	cmp	r3, #0
20000226:	d101      	bne.n	2000022c <readColumns+0x54>
20000228:	2303      	movs	r3, #3
2000022a:	e000      	b.n	2000022e <readColumns+0x56>
	
	return 0xFF;
2000022c:	23ff      	movs	r3, #255	@ 0xff
}
2000022e:	0018      	movs	r0, r3
20000230:	46bd      	mov	sp, r7
20000232:	bd80      	pop	{r7, pc}
20000234:	200002e8 	andcs	r0, r0, r8, ror #5

20000238 <keyb>:
{ 7, 8,  9, 12},
{14, 0, 15, 13}	
};

unsigned char keyb(void)
{
20000238:	b590      	push	{r4, r7, lr}
2000023a:	b083      	sub	sp, #12
2000023c:	af00      	add	r7, sp, #0
	for (int row = 0; row < 4; row++) {
2000023e:	2300      	movs	r3, #0
20000240:	607b      	str	r3, [r7, #4]
20000242:	e01d      	b.n	20000280 <keyb+0x48>
		setRowState(row, DRAIN);
20000244:	687b      	ldr	r3, [r7, #4]
20000246:	2100      	movs	r1, #0
20000248:	0018      	movs	r0, r3
2000024a:	f7ff ff69 	bl	20000120 <setRowState>
		
		unsigned char columnPressed = readColumns ();
2000024e:	1cfc      	adds	r4, r7, #3
20000250:	f7ff ffc2 	bl	200001d8 <readColumns>
20000254:	0003      	movs	r3, r0
20000256:	7023      	strb	r3, [r4, #0]
		if (columnPressed != 0xFF)
20000258:	1cfb      	adds	r3, r7, #3
2000025a:	781b      	ldrb	r3, [r3, #0]
2000025c:	2bff      	cmp	r3, #255	@ 0xff
2000025e:	d007      	beq.n	20000270 <keyb+0x38>
		{
			return keyValue[row][columnPressed];
20000260:	1cfb      	adds	r3, r7, #3
20000262:	781b      	ldrb	r3, [r3, #0]
20000264:	490a      	ldr	r1, [pc, #40]	@ (20000290 <keyb+0x58>)
20000266:	687a      	ldr	r2, [r7, #4]
20000268:	0092      	lsls	r2, r2, #2
2000026a:	188a      	adds	r2, r1, r2
2000026c:	5cd3      	ldrb	r3, [r2, r3]
2000026e:	e00b      	b.n	20000288 <keyb+0x50>
		}

		setRowState(row, OPEN);
20000270:	687b      	ldr	r3, [r7, #4]
20000272:	2101      	movs	r1, #1
20000274:	0018      	movs	r0, r3
20000276:	f7ff ff53 	bl	20000120 <setRowState>
	for (int row = 0; row < 4; row++) {
2000027a:	687b      	ldr	r3, [r7, #4]
2000027c:	3301      	adds	r3, #1
2000027e:	607b      	str	r3, [r7, #4]
20000280:	687b      	ldr	r3, [r7, #4]
20000282:	2b03      	cmp	r3, #3
20000284:	ddde      	ble.n	20000244 <keyb+0xc>
	}
	
	return 0xFF;
20000286:	23ff      	movs	r3, #255	@ 0xff
}
20000288:	0018      	movs	r0, r3
2000028a:	46bd      	mov	sp, r7
2000028c:	b003      	add	sp, #12
2000028e:	bd90      	pop	{r4, r7, pc}
20000290:	200002ec 	andcs	r0, r0, ip, ror #5

20000294 <out7Seg>:
	0b1111001,  // E
	0b1110001   // F
};

void out7Seg (unsigned char c)
{
20000294:	b580      	push	{r7, lr}
20000296:	b082      	sub	sp, #8
20000298:	af00      	add	r7, sp, #0
2000029a:	0002      	movs	r2, r0
2000029c:	1dfb      	adds	r3, r7, #7
2000029e:	701a      	strb	r2, [r3, #0]
	if (c > 15)
200002a0:	1dfb      	adds	r3, r7, #7
200002a2:	781b      	ldrb	r3, [r3, #0]
200002a4:	2b0f      	cmp	r3, #15
200002a6:	d904      	bls.n	200002b2 <out7Seg+0x1e>
	{
		portD->ODR_LOW = 0;
200002a8:	4b07      	ldr	r3, [pc, #28]	@ (200002c8 <out7Seg+0x34>)
200002aa:	681b      	ldr	r3, [r3, #0]
200002ac:	2200      	movs	r2, #0
200002ae:	751a      	strb	r2, [r3, #20]
	}
	else
	{
		portD->ODR_LOW = segments[c];
	}
}
200002b0:	e006      	b.n	200002c0 <out7Seg+0x2c>
		portD->ODR_LOW = segments[c];
200002b2:	1dfb      	adds	r3, r7, #7
200002b4:	781a      	ldrb	r2, [r3, #0]
200002b6:	4b04      	ldr	r3, [pc, #16]	@ (200002c8 <out7Seg+0x34>)
200002b8:	681b      	ldr	r3, [r3, #0]
200002ba:	4904      	ldr	r1, [pc, #16]	@ (200002cc <out7Seg+0x38>)
200002bc:	5c8a      	ldrb	r2, [r1, r2]
200002be:	751a      	strb	r2, [r3, #20]
}
200002c0:	46c0      	nop			@ (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b002      	add	sp, #8
200002c6:	bd80      	pop	{r7, pc}
200002c8:	200002e8 	andcs	r0, r0, r8, ror #5
200002cc:	200002fc 	strdcs	r0, [r0], -ip

200002d0 <main>:

void main(void)
{
200002d0:	b580      	push	{r7, lr}
200002d2:	af00      	add	r7, sp, #0
	app_init();
200002d4:	f7ff fe9c 	bl	20000010 <app_init>
	while(1)
	{
		out7Seg(keyb());
200002d8:	f7ff ffae 	bl	20000238 <keyb>
200002dc:	0003      	movs	r3, r0
200002de:	0018      	movs	r0, r3
200002e0:	f7ff ffd8 	bl	20000294 <out7Seg>
200002e4:	e7f8      	b.n	200002d8 <main+0x8>
200002e6:	46c0      	nop			@ (mov r8, r8)

200002e8 <portD>:
200002e8:	40020c00 	andmi	r0, r2, r0, lsl #24

200002ec <keyValue>:
200002ec:	0a030201 	beq	200c0af8 <segments+0xc07fc>
200002f0:	0b060504 	bleq	20181708 <segments+0x18140c>
200002f4:	0c090807 	stceq	8, cr0, [r9], {7}
200002f8:	0d0f000e 	stceq	0, cr0, [pc, #-56]	@ 200002c8 <out7Seg+0x34>

200002fc <segments>:
200002fc:	4f5b063f 	svcmi	0x005b063f
20000300:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20000304:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	@ 0xfffffe04
20000308:	71795e39 	cmnvc	r9, r9, lsr lr

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000053b 	andeq	r0, r0, fp, lsr r5
   4:	04010005 	streq	r0, [r1], #-5
   8:	00000000 	andeq	r0, r0, r0
   c:	0002cc12 	andeq	ip, r2, r2, lsl ip
  10:	01f60c00 	mvnseq	r0, r0, lsl #24
  14:	00d30000 	sbcseq	r0, r3, r0
  18:	000c0000 	andeq	r0, ip, r0
	...
  24:	04040000 	streq	r0, [r4], #-0
  28:	00ef0910 	rsceq	r0, pc, r0, lsl r9	@ <UNPREDICTABLE>
  2c:	23010000 	movwcs	r0, #4096	@ 0x1000
  30:	12000000 	andne	r0, r0, #0
  34:	000000ef 	andeq	r0, r0, pc, ror #1
  38:	28010002 	stmdacs	r1, {r1}
  3c:	13000000 	movwne	r0, #0
  40:	000000ef 	andeq	r0, r0, pc, ror #1
  44:	2d010202 	sfmcs	f0, 4, [r1, #-8]
  48:	14000000 	strne	r0, [r0], #-0
  4c:	000000ef 	andeq	r0, r0, pc, ror #1
  50:	32010402 	andcc	r0, r1, #33554432	@ 0x2000000
  54:	15000000 	strne	r0, [r0, #-0]
  58:	000000ef 	andeq	r0, r0, pc, ror #1
  5c:	37010602 	strcc	r0, [r1, -r2, lsl #12]
  60:	16000000 	strne	r0, [r0], -r0
  64:	000000ef 	andeq	r0, r0, pc, ror #1
  68:	3c010802 	stccc	8, cr0, [r1], {2}
  6c:	17000000 	strne	r0, [r0, -r0]
  70:	000000ef 	andeq	r0, r0, pc, ror #1
  74:	41010a02 	tstmi	r1, r2, lsl #20
  78:	18000000 	stmdane	r0, {}	@ <UNPREDICTABLE>
  7c:	000000ef 	andeq	r0, r0, pc, ror #1
  80:	46010c02 	strmi	r0, [r1], -r2, lsl #24
  84:	19000000 	stmdbne	r0, {}	@ <UNPREDICTABLE>
  88:	000000ef 	andeq	r0, r0, pc, ror #1
  8c:	4b010e02 	blmi	4389c <startup-0x1ffbc764>
  90:	1a000000 	bne	98 <startup-0x1fffff68>
  94:	000000ef 	andeq	r0, r0, pc, ror #1
  98:	50011002 	andpl	r1, r1, r2
  9c:	1b000000 	blne	a4 <startup-0x1fffff5c>
  a0:	000000ef 	andeq	r0, r0, pc, ror #1
  a4:	ae011202 	cdpge	2, 0, cr1, cr1, cr2, {0}
  a8:	1c000002 	stcne	0, cr0, [r0], {2}
  ac:	000000ef 	andeq	r0, r0, pc, ror #1
  b0:	b4011402 	strlt	r1, [r1], #-1026	@ 0xfffffbfe
  b4:	1d000002 	stcne	0, cr0, [r0, #-8]
  b8:	000000ef 	andeq	r0, r0, pc, ror #1
  bc:	ba011602 	blt	458cc <startup-0x1ffba734>
  c0:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
  c4:	000000ef 	andeq	r0, r0, pc, ror #1
  c8:	c0011802 	andgt	r1, r1, r2, lsl #16
  cc:	1f000002 	svcne	0x00000002
  d0:	000000ef 	andeq	r0, r0, pc, ror #1
  d4:	c6011a02 	strgt	r1, [r1], -r2, lsl #20
  d8:	20000002 	andcs	r0, r0, r2
  dc:	000000ef 	andeq	r0, r0, pc, ror #1
  e0:	45011c02 	strmi	r1, [r1, #-3074]	@ 0xfffff3fe
  e4:	21000003 	tstcs	r0, r3
  e8:	000000ef 	andeq	r0, r0, pc, ror #1
  ec:	09001e02 	stmdbeq	r0, {r1, r9, sl, fp, ip}
  f0:	009e0801 	addseq	r0, lr, r1, lsl #16
  f4:	37050000 	strcc	r0, [r5, -r0]
  f8:	23000003 	movwcs	r0, #3
  fc:	00002601 	andeq	r2, r0, r1, lsl #12
 100:	25020400 	strcs	r0, [r2, #-1024]	@ 0xfffffc00
 104:	0001ca09 	andeq	ip, r1, r9, lsl #20
 108:	00230100 	eoreq	r0, r3, r0, lsl #2
 10c:	ef270000 	svc	0x00270000
 110:	01000000 	mrseq	r0, (UNDEF: 0)
 114:	00280100 	eoreq	r0, r8, r0, lsl #2
 118:	ef280000 	svc	0x00280000
 11c:	01000000 	mrseq	r0, (UNDEF: 0)
 120:	002d0101 	eoreq	r0, sp, r1, lsl #2
 124:	ef290000 	svc	0x00290000
 128:	01000000 	mrseq	r0, (UNDEF: 0)
 12c:	00320102 	eorseq	r0, r2, r2, lsl #2
 130:	ef2a0000 	svc	0x002a0000
 134:	01000000 	mrseq	r0, (UNDEF: 0)
 138:	00370103 	eorseq	r0, r7, r3, lsl #2
 13c:	ef2b0000 	svc	0x002b0000
 140:	01000000 	mrseq	r0, (UNDEF: 0)
 144:	003c0104 	eorseq	r0, ip, r4, lsl #2
 148:	ef2c0000 	svc	0x002c0000
 14c:	01000000 	mrseq	r0, (UNDEF: 0)
 150:	00410105 	subeq	r0, r1, r5, lsl #2
 154:	ef2d0000 	svc	0x002d0000
 158:	01000000 	mrseq	r0, (UNDEF: 0)
 15c:	00460106 	subeq	r0, r6, r6, lsl #2
 160:	ef2e0000 	svc	0x002e0000
 164:	01000000 	mrseq	r0, (UNDEF: 0)
 168:	004b0107 	subeq	r0, fp, r7, lsl #2
 16c:	ef2f0000 	svc	0x002f0000
 170:	01000000 	mrseq	r0, (UNDEF: 0)
 174:	00500108 	subseq	r0, r0, r8, lsl #2
 178:	ef300000 	svc	0x00300000
 17c:	01000000 	mrseq	r0, (UNDEF: 0)
 180:	02ae0109 	adceq	r0, lr, #1073741826	@ 0x40000002
 184:	ef310000 	svc	0x00310000
 188:	01000000 	mrseq	r0, (UNDEF: 0)
 18c:	02b4010a 	adcseq	r0, r4, #-2147483646	@ 0x80000002
 190:	ef320000 	svc	0x00320000
 194:	01000000 	mrseq	r0, (UNDEF: 0)
 198:	02ba010b 	adcseq	r0, sl, #-1073741822	@ 0xc0000002
 19c:	ef330000 	svc	0x00330000
 1a0:	01000000 	mrseq	r0, (UNDEF: 0)
 1a4:	02c0010c 	sbceq	r0, r0, #12, 2
 1a8:	ef340000 	svc	0x00340000
 1ac:	01000000 	mrseq	r0, (UNDEF: 0)
 1b0:	02c6010d 	sbceq	r0, r6, #1073741827	@ 0x40000003
 1b4:	ef350000 	svc	0x00350000
 1b8:	01000000 	mrseq	r0, (UNDEF: 0)
 1bc:	0345010e 	movteq	r0, #20750	@ 0x510e
 1c0:	ef360000 	svc	0x00360000
 1c4:	01000000 	mrseq	r0, (UNDEF: 0)
 1c8:	8c05000f 	stchi	0, cr0, [r5], {15}
 1cc:	38000001 	stmdacc	r0, {r0}
 1d0:	00010101 	andeq	r0, r1, r1, lsl #2
 1d4:	000b0500 	andeq	r0, fp, r0, lsl #10
 1d8:	173a0000 	ldrne	r0, [sl, -r0]!
 1dc:	000000f6 	strdeq	r0, [r0], -r6
 1e0:	00005e05 	andeq	r5, r0, r5, lsl #28
 1e4:	ca163e00 	bgt	58f9ec <startup-0x1fa70614>
 1e8:	05000001 	streq	r0, [r0, #-1]
 1ec:	00000328 	andeq	r0, r0, r8, lsr #6
 1f0:	00f61742 	rscseq	r1, r6, r2, asr #14
 1f4:	85050000 	strhi	r0, [r5, #-0]
 1f8:	48000000 	stmdami	r0, {}	@ <UNPREDICTABLE>
 1fc:	0000f617 	andeq	pc, r0, r7, lsl r6	@ <UNPREDICTABLE>
 200:	53040400 	movwpl	r0, #17408	@ 0x4400
 204:	00022203 	andeq	r2, r2, r3, lsl #4
 208:	01760200 	cmneq	r6, r0, lsl #4
 20c:	1b530000 	blne	14c0214 <startup-0x1eb3fdec>
 210:	00000222 	andeq	r0, r0, r2, lsr #4
 214:	016b0200 	cmneq	fp, r0, lsl #4
 218:	26530000 	ldrbcs	r0, [r3], -r0
 21c:	00000222 	andeq	r0, r0, r2, lsr #4
 220:	02090002 	andeq	r0, r9, #2
 224:	00013e07 	andeq	r3, r1, r7, lsl #28
 228:	51040600 	tstpl	r4, r0, lsl #12
 22c:	0000024c 	andeq	r0, r0, ip, asr #4
 230:	00006c03 	andeq	r6, r0, r3, lsl #24
 234:	4c105200 	lfmmi	f5, 4, [r0], {-0}
 238:	07000002 	streq	r0, [r0, -r2]
 23c:	00000201 	andeq	r0, r0, r1, lsl #4
 240:	0001e203 	andeq	lr, r1, r3, lsl #4
 244:	d50f5400 	strle	r5, [pc, #-1024]	@ fffffe4c <segments+0xdffffb50>
 248:	00000001 	andeq	r0, r0, r1
 24c:	44070409 	strmi	r0, [r7], #-1033	@ 0xfffffbf7
 250:	04000001 	streq	r0, [r0], #-1
 254:	74035902 	strvc	r5, [r3], #-2306	@ 0xfffff6fe
 258:	02000002 	andeq	r0, r0, #2
 25c:	00000000 	andeq	r0, r0, r0
 260:	00ef1a59 	rsceq	r1, pc, r9, asr sl	@ <UNPREDICTABLE>
 264:	02000000 	andeq	r0, r0, #0
 268:	00000180 	andeq	r0, r0, r0, lsl #3
 26c:	00ef2659 	rsceq	r2, pc, r9, asr r6	@ <UNPREDICTABLE>
 270:	00010000 	andeq	r0, r1, r0
 274:	97570206 	ldrbls	r0, [r7, -r6, lsl #4]
 278:	03000002 	movweq	r0, #2
 27c:	00000097 	muleq	r0, r7, r0
 280:	02221258 	eoreq	r1, r2, #88, 4	@ 0x80000005
 284:	53070000 	movwpl	r0, #28672	@ 0x7000
 288:	03000002 	movweq	r0, #2
 28c:	00000157 	andeq	r0, r0, r7, asr r1
 290:	01e0115a 	mvneq	r1, sl, asr r1
 294:	04000000 	streq	r0, [r0], #-0
 298:	b8035f04 	stmdalt	r3, {r2, r8, r9, sl, fp, ip, lr}
 29c:	02000002 	andeq	r0, r0, #2
 2a0:	0000031c 	andeq	r0, r0, ip, lsl r3
 2a4:	02221b5f 	eoreq	r1, r2, #97280	@ 0x17c00
 2a8:	02000000 	andeq	r0, r0, #0
 2ac:	000000c6 	andeq	r0, r0, r6, asr #1
 2b0:	0222285f 	eoreq	r2, r2, #6225920	@ 0x5f0000
 2b4:	00020000 	andeq	r0, r2, r0
 2b8:	db5d0406 	blle	17412d8 <startup-0x1e8bed28>
 2bc:	03000002 	movweq	r0, #2
 2c0:	000001aa 	andeq	r0, r0, sl, lsr #3
 2c4:	024c105e 	subeq	r1, ip, #94	@ 0x5e
 2c8:	97070000 	strls	r0, [r7, -r0]
 2cc:	03000002 	movweq	r0, #2
 2d0:	00000271 	andeq	r0, r0, r1, ror r2
 2d4:	01eb1260 	mvneq	r1, r0, ror #4
 2d8:	04000000 	streq	r0, [r0], #-0
 2dc:	fc036504 	stc2	5, cr6, [r3], {4}
 2e0:	02000002 	andeq	r0, r0, #2
 2e4:	00000072 	andeq	r0, r0, r2, ror r0
 2e8:	02221b65 	eoreq	r1, r2, #103424	@ 0x19400
 2ec:	02000000 	andeq	r0, r0, #0
 2f0:	000001cf 	andeq	r0, r0, pc, asr #3
 2f4:	02222665 	eoreq	r2, r2, #105906176	@ 0x6500000
 2f8:	00020000 	andeq	r0, r2, r0
 2fc:	1f630406 	svcne	0x00630406
 300:	03000003 	movweq	r0, #3
 304:	0000026b 	andeq	r0, r0, fp, ror #4
 308:	024c1064 	subeq	r1, ip, #100	@ 0x64
 30c:	db070000 	blle	1c0314 <startup-0x1fe3fcec>
 310:	03000002 	movweq	r0, #2
 314:	000001e7 	andeq	r0, r0, r7, ror #3
 318:	01f61566 	mvnseq	r1, r6, ror #10
 31c:	04000000 	streq	r0, [r0], #-0
 320:	40036b02 	andmi	r6, r3, r2, lsl #22
 324:	02000003 	andeq	r0, r0, #3
 328:	00000289 	andeq	r0, r0, r9, lsl #5
 32c:	00ef1a6b 	rsceq	r1, pc, fp, ror #20
 330:	02000000 	andeq	r0, r0, #0
 334:	000001a1 	andeq	r0, r0, r1, lsr #3
 338:	00ef236b 	rsceq	r2, pc, fp, ror #6
 33c:	00010000 	andeq	r0, r1, r0
 340:	62690206 	rsbvs	r0, r9, #1610612736	@ 0x60000000
 344:	0c000003 	stceq	0, cr0, [r0], {3}
 348:	00524449 	subseq	r4, r2, r9, asr #8
 34c:	0002226a 	andeq	r2, r2, sl, ror #4
 350:	031f0700 	tsteq	pc, #0, 14
 354:	96030000 	strls	r0, [r3], -r0
 358:	6c000002 	stcvs	0, cr0, [r0], {2}
 35c:	0001ca10 	andeq	ip, r1, r0, lsl sl
 360:	02040000 	andeq	r0, r4, #0
 364:	03830373 	orreq	r0, r3, #-872415231	@ 0xcc000001
 368:	b7020000 	strlt	r0, [r2, -r0]
 36c:	73000001 	movwvc	r0, #1
 370:	0000ef1a 	andeq	lr, r0, sl, lsl pc
 374:	bd020000 	stclt	0, cr0, [r2, #-0]
 378:	73000000 	movwvc	r0, #0
 37c:	0000ef23 	andeq	lr, r0, r3, lsr #30
 380:	06000100 	streq	r0, [r0], -r0, lsl #2
 384:	03a57102 			@ <UNDEFINED> instruction: 0x03a57102
 388:	4f0c0000 	svcmi	0x000c0000
 38c:	72005244 	andvc	r5, r0, #68, 4	@ 0x40000004
 390:	00000222 	andeq	r0, r0, r2, lsr #4
 394:	00036207 	andeq	r6, r3, r7, lsl #4
 398:	01c40300 	biceq	r0, r4, r0, lsl #6
 39c:	10740000 	rsbsne	r0, r4, r0
 3a0:	000001ca 	andeq	r0, r0, sl, asr #3
 3a4:	4e180400 	cfmulsmi	mvf0, mvf8, mvf0
 3a8:	0003de09 	andeq	sp, r3, r9, lsl #28
 3ac:	02290800 	eoreq	r0, r9, #0, 16
 3b0:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
 3b4:	00000274 	andeq	r0, r0, r4, ror r2
 3b8:	02b80804 	adcseq	r0, r8, #4, 16	@ 0x40000
 3bc:	08080000 	stmdaeq	r8, {}	@ <UNPREDICTABLE>
 3c0:	000002fc 	strdeq	r0, [r0], -ip
 3c4:	0340080c 	movteq	r0, #2060	@ 0x80c
 3c8:	02100000 	andseq	r0, r0, #0
 3cc:	000000ac 	andeq	r0, r0, ip, lsr #1
 3d0:	0222116f 	eoreq	r1, r2, #-1073741797	@ 0xc000001b
 3d4:	08120000 	ldmdaeq	r2, {}	@ <UNPREDICTABLE>
 3d8:	00000383 	andeq	r0, r0, r3, lsl #7
 3dc:	bf050014 	svclt	0x00050014
 3e0:	77000001 	strvc	r0, [r0, -r1]
 3e4:	0003a501 	andeq	sl, r3, r1, lsl #10
 3e8:	01510a00 	cmpeq	r1, r0, lsl #20
 3ec:	077a0000 	ldrbeq	r0, [sl, -r0]!
 3f0:	000003fa 	strdeq	r0, [r0], -sl
 3f4:	02e80305 	rsceq	r0, r8, #335544320	@ 0x14000000
 3f8:	04132000 	ldreq	r2, [r3], #-0
 3fc:	000003de 	ldrdeq	r0, [r0], -lr
 400:	0000ef0d 	andeq	lr, r0, sp, lsl #30
 404:	00041600 	andeq	r1, r4, r0, lsl #12
 408:	024c0b00 	subeq	r0, ip, #0, 22
 40c:	0b030000 	bleq	c0414 <startup-0x1ff3fbec>
 410:	0000024c 	andeq	r0, r0, ip, asr #4
 414:	550a0003 	strpl	r0, [sl, #-3]
 418:	af000000 	svcge	0x00000000
 41c:	0004000f 	andeq	r0, r4, pc
 420:	ec030500 	cfstr32	mvfx0, [r3], {-0}
 424:	0d200002 	stceq	0, cr0, [r0, #-8]!
 428:	00000437 	andeq	r0, r0, r7, lsr r4
 42c:	00000437 	andeq	r0, r0, r7, lsr r4
 430:	00024c0b 	andeq	r4, r2, fp, lsl #24
 434:	09000f00 	stmdbeq	r0, {r8, r9, sl, fp}
 438:	00a70801 	adceq	r0, r7, r1, lsl #16
 43c:	7c0a0000 	stcvc	0, cr0, [sl], {-0}
 440:	c8000000 	stmdagt	r0, {}	@ <UNPREDICTABLE>
 444:	00042706 	andeq	r2, r4, r6, lsl #14
 448:	fc030500 	stc2	5, cr0, [r3], {-0}
 44c:	14200002 	strtne	r0, [r0], #-2
 450:	000001b2 			@ <UNDEFINED> instruction: 0x000001b2
 454:	d006e701 	andle	lr, r6, r1, lsl #14
 458:	16200002 	strtne	r0, [r0], -r2
 45c:	01000000 	mrseq	r0, (UNDEF: 0)
 460:	01990e9c 			@ <UNDEFINED> instruction: 0x01990e9c
 464:	94db0000 	ldrbls	r0, [fp], #0
 468:	3c200002 	stccc	0, cr0, [r0], #-8
 46c:	01000000 	mrseq	r0, (UNDEF: 0)
 470:	0004829c 	muleq	r4, ip, r2
 474:	00630f00 	rsbeq	r0, r3, r0, lsl #30
 478:	00ef1ddb 	ldrdeq	r1, [pc], #219	@ <UNPREDICTABLE>
 47c:	91020000 	mrsls	r0, (UNDEF: 2)
 480:	91150077 	tstls	r5, r7, ror r0
 484:	01000002 	tsteq	r0, r2
 488:	00ef0fb7 	strhteq	r0, [pc], #247
 48c:	02380000 	eorseq	r0, r8, #0
 490:	005c2000 	subseq	r2, ip, r0
 494:	9c010000 	stcls	0, cr0, [r1], {-0}
 498:	000004cf 	andeq	r0, r0, pc, asr #9
 49c:	00023e10 	andeq	r3, r2, r0, lsl lr
 4a0:	00004820 	andeq	r4, r0, r0, lsr #16
 4a4:	6f721600 	svcvs	0x00721600
 4a8:	b9010077 	stmdblt	r1, {r0, r1, r2, r4, r5, r6}
 4ac:	0004cf0b 	andeq	ip, r4, fp, lsl #30
 4b0:	6c910200 	lfmvs	f0, 4, [r1], {0}
 4b4:	00024410 	andeq	r4, r2, r0, lsl r4
 4b8:	00003620 	andeq	r3, r0, r0, lsr #12
 4bc:	02a01700 	adceq	r1, r0, #0, 14
 4c0:	bc010000 	stclt	0, cr0, [r1], {-0}
 4c4:	0000ef11 	andeq	lr, r0, r1, lsl pc
 4c8:	6b910200 	blvs	fe440cd0 <segments+0xde4409d4>
 4cc:	18000000 	stmdane	r0, {}	@ <UNPREDICTABLE>
 4d0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 4d4:	7d190074 	ldcvc	0, cr0, [r9, #-464]	@ 0xfffffe30
 4d8:	01000002 	tsteq	r0, r2
 4dc:	00ef0fa3 	rsceq	r0, pc, r3, lsr #31
 4e0:	01d80000 	bicseq	r0, r8, r0
 4e4:	00602000 	rsbeq	r2, r0, r0
 4e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 4ec:	0000170e 	andeq	r1, r0, lr, lsl #14
 4f0:	01209a00 			@ <UNDEFINED> instruction: 0x01209a00
 4f4:	00b82000 	adcseq	r2, r8, r0
 4f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 4fc:	0000051e 	andeq	r0, r0, lr, lsl r5
 500:	776f720f 	strbvc	r7, [pc, -pc, lsl #4]!
 504:	cf179a00 	svcgt	0x00179a00
 508:	02000004 	andeq	r0, r0, #4
 50c:	621a7491 	andsvs	r7, sl, #-1862270976	@ 0x91000000
 510:	01000001 	tsteq	r0, r1
 514:	04cf209a 	strbeq	r2, [pc], #154	@ 51c <startup-0x1ffffae4>
 518:	91020000 	mrsls	r0, (UNDEF: 2)
 51c:	b4110070 	ldrlt	r0, [r1], #-112	@ 0xffffff90
 520:	7c000000 	stcvc	0, cr0, [r0], {-0}
 524:	20000010 	andcs	r0, r0, r0, lsl r0
 528:	00000110 	andeq	r0, r0, r0, lsl r1
 52c:	da119c01 	ble	467538 <startup-0x1fb98ac8>
 530:	08000001 	stmdaeq	r0, {r0}
 534:	20000000 	andcs	r0, r0, r0
 538:	0000000c 	andeq	r0, r0, ip
 53c:	Address 0x53c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	03000d01 	movweq	r0, #3329	@ 0xd01
   4:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
   8:	21390b3b 	teqcs	r9, fp, lsr fp
   c:	0d134910 	vldreq.16	s8, [r3, #-32]	@ 0xffffffe0	@ <UNPREDICTABLE>
  10:	000b6b0b 	andeq	r6, fp, fp, lsl #22
  14:	000d0200 	andeq	r0, sp, r0, lsl #4
  18:	213a0e03 	teqcs	sl, r3, lsl #28
  1c:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
  20:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  24:	0300000b 	movweq	r0, #11
  28:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  2c:	3b01213a 	blcc	4851c <startup-0x1ffb7ae4>
  30:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  34:	04000013 	streq	r0, [r0], #-19	@ 0xffffffed
  38:	0b0b0113 	bleq	2c048c <startup-0x1fd3fb74>
  3c:	3b01213a 	blcc	4852c <startup-0x1ffb7ad4>
  40:	010b390b 	tsteq	fp, fp, lsl #18
  44:	05000013 	streq	r0, [r0, #-19]	@ 0xffffffed
  48:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  4c:	3b01213a 	blcc	4853c <startup-0x1ffb7ac4>
  50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  54:	06000013 			@ <UNDEFINED> instruction: 0x06000013
  58:	0b0b0117 	bleq	2c04bc <startup-0x1fd3fb44>
  5c:	3b01213a 	blcc	4854c <startup-0x1ffb7ab4>
  60:	0221390b 	eoreq	r3, r1, #180224	@ 0x2c000
  64:	00001301 	andeq	r1, r0, r1, lsl #6
  68:	49000d07 	stmdbmi	r0, {r0, r1, r2, r8, sl, fp}
  6c:	08000013 	stmdaeq	r0, {r0, r1, r4}
  70:	1349000d 	movtne	r0, #36877	@ 0x900d
  74:	00000b38 	andeq	r0, r0, r8, lsr fp
  78:	0b002409 	bleq	90a4 <startup-0x1fff6f5c>
  7c:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
  80:	0a00000e 	beq	c0 <startup-0x1fffff40>
  84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  88:	3b01213a 	blcc	48578 <startup-0x1ffb7a88>
  8c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  90:	02193f13 	andseq	r3, r9, #19, 30	@ 0x4c
  94:	0b000018 	bleq	fc <startup-0x1fffff04>
  98:	13490021 	movtne	r0, #36897	@ 0x9021
  9c:	00000b2f 	andeq	r0, r0, pc, lsr #22
  a0:	03000d0c 	movweq	r0, #3340	@ 0xd0c
  a4:	01213a08 			@ <UNDEFINED> instruction: 0x01213a08
  a8:	21390b3b 	teqcs	r9, fp, lsr fp
  ac:	00134912 	andseq	r4, r3, r2, lsl r9
  b0:	01010d00 	tsteq	r1, r0, lsl #26
  b4:	13011349 	movwne	r1, #4937	@ 0x1349
  b8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
  bc:	03193f01 	tsteq	r9, #1, 30
  c0:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
  c4:	21390b3b 	teqcs	r9, fp, lsr fp
  c8:	11192706 	tstne	r9, r6, lsl #14
  cc:	40061201 	andmi	r1, r6, r1, lsl #4
  d0:	01197a18 	tsteq	r9, r8, lsl sl
  d4:	0f000013 	svceq	0x00000013
  d8:	08030005 	stmdaeq	r3, {r0, r2}
  dc:	3b01213a 	blcc	485cc <startup-0x1ffb7a34>
  e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  e4:	00180213 	andseq	r0, r8, r3, lsl r2
  e8:	010b1000 	mrseq	r1, (UNDEF: 11)
  ec:	06120111 			@ <UNDEFINED> instruction: 0x06120111
  f0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
  f4:	03193f00 	tsteq	r9, #0, 30
  f8:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
  fc:	21390b3b 	teqcs	r9, fp, lsr fp
 100:	11192706 	tstne	r9, r6, lsl #14
 104:	40061201 	andmi	r1, r6, r1, lsl #4
 108:	00197a18 	andseq	r7, r9, r8, lsl sl
 10c:	01111200 	tsteq	r1, r0, lsl #4
 110:	0b130e25 	bleq	4c39ac <startup-0x1fb3c654>
 114:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 118:	01111755 	tsteq	r1, r5, asr r7
 11c:	00001710 	andeq	r1, r0, r0, lsl r7
 120:	0b000f13 	bleq	3d74 <startup-0x1fffc28c>
 124:	0013490b 	andseq	r4, r3, fp, lsl #18
 128:	002e1400 	eoreq	r1, lr, r0, lsl #8
 12c:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
 130:	0b3b0b3a 	bleq	ec2e20 <startup-0x1f13d1e0>
 134:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 138:	06120111 			@ <UNDEFINED> instruction: 0x06120111
 13c:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
 140:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 144:	03193f01 	tsteq	r9, #1, 30
 148:	3b0b3a0e 	blcc	2ce988 <startup-0x1fd31678>
 14c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 150:	11134919 	tstne	r3, r9, lsl r9
 154:	40061201 	andmi	r1, r6, r1, lsl #4
 158:	01197c18 	tsteq	r9, r8, lsl ip
 15c:	16000013 			@ <UNDEFINED> instruction: 0x16000013
 160:	08030034 	stmdaeq	r3, {r2, r4, r5}
 164:	0b3b0b3a 	bleq	ec2e54 <startup-0x1f13d1ac>
 168:	13490b39 	movtne	r0, #39737	@ 0x9b39
 16c:	00001802 	andeq	r1, r0, r2, lsl #16
 170:	03003417 	movweq	r3, #1047	@ 0x417
 174:	3b0b3a0e 	blcc	2ce9b4 <startup-0x1fd3164c>
 178:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 17c:	00180213 	andseq	r0, r8, r3, lsl r2
 180:	00241800 	eoreq	r1, r4, r0, lsl #16
 184:	0b3e0b0b 	bleq	f82db8 <startup-0x1f07d248>
 188:	00000803 	andeq	r0, r0, r3, lsl #16
 18c:	3f002e19 	svccc	0x00002e19
 190:	3a0e0319 	bcc	380dfc <startup-0x1fc7f204>
 194:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 198:	1113490b 	tstne	r3, fp, lsl #18
 19c:	40061201 	andmi	r1, r6, r1, lsl #4
 1a0:	00197a18 	andseq	r7, r9, r8, lsl sl
 1a4:	00051a00 	andeq	r1, r5, r0, lsl #20
 1a8:	0b3a0e03 	bleq	e839bc <startup-0x1f17c644>
 1ac:	0b390b3b 	bleq	e42ea0 <startup-0x1f1bd160>
 1b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1b4:	Address 0x1b4 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000002d6 	ldrdeq	r0, [r0], -r6
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_rnglists:

00000000 <.debug_rnglists>:
   0:	00000016 	andeq	r0, r0, r6, lsl r0
   4:	00040005 	andeq	r0, r4, r5
   8:	00000000 	andeq	r0, r0, r0
   c:	00001007 	andeq	r1, r0, r7
  10:	0705d620 	streq	sp, [r5, -r0, lsr #12]
  14:	20000000 	andcs	r0, r0, r0
  18:	Address 0x18 is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000227 	andeq	r0, r0, r7, lsr #4
   4:	008b0003 	addeq	r0, fp, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	44010000 	strmi	r0, [r1], #-0
  1c:	74532f3a 	ldrbvc	r2, [r3], #-3898	@ 0xfffff0c6
  20:	65696475 	strbvs	r6, [r9, #-1141]!	@ 0xfffffb8b
  24:	614d2f73 	hvcvs	54003	@ 0xd2f3
  28:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
  2c:	724f2d65 	subvc	r2, pc, #6464	@ 0x1940
  30:	746e6569 	strbtvc	r6, [lr], #-1385	@ 0xfffffa97
  34:	502d6465 	eorpl	r6, sp, r5, ror #8
  38:	72676f72 	rsbvc	r6, r7, #456	@ 0x1c8
  3c:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
  40:	572f676e 	strpl	r6, [pc, -lr, ror #14]!
  44:	2f6b726f 	svccs	0x006b726f
  48:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
  4c:	2d656e69 	stclcs	14, cr6, [r5, #-420]!	@ 0xfffffe5c
  50:	6569724f 	strbvs	r7, [r9, #-591]!	@ 0xfffffdb1
  54:	6465746e 	strbtvs	r7, [r5], #-1134	@ 0xfffffb92
  58:	6f72502d 	svcvs	0x0072502d
  5c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	@ 0xfffffe64
  60:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
  64:	7574532d 	ldrbvc	r5, [r4, #-813]!	@ 0xfffffcd3
  68:	73656964 	cmnvc	r5, #100, 18	@ 0x190000
  6c:	462f432f 	strtmi	r4, [pc], -pc, lsr #6
  70:	7472756f 	ldrbtvc	r7, [r2], #-1391	@ 0xfffffa91
  74:	79725468 	ldmdbvc	r2!, {r3, r5, r6, sl, ip, lr}^
  78:	322e322f 	eorcc	r3, lr, #-268435454	@ 0xf0000002
  7c:	79654b2d 	stmdbvc	r5!, {r0, r2, r3, r5, r8, r9, fp, lr}^
  80:	72616f62 	rsbvc	r6, r1, #392	@ 0x188
  84:	73000064 	movwvc	r0, #100	@ 0x64
  88:	74726174 	ldrbtvc	r6, [r2], #-372	@ 0xfffffe8c
  8c:	632e7075 			@ <UNDEFINED> instruction: 0x632e7075
  90:	00000100 	andeq	r0, r0, r0, lsl #2
  94:	00010500 	andeq	r0, r1, r0, lsl #10
  98:	00000205 	andeq	r0, r0, r5, lsl #4
  9c:	131a2000 	tstne	sl, #0
  a0:	212f2121 			@ <UNDEFINED> instruction: 0x212f2121
  a4:	01000302 	tsteq	r0, r2, lsl #6
  a8:	00010501 	andeq	r0, r1, r1, lsl #10
  ac:	00100205 	andseq	r0, r0, r5, lsl #4
  b0:	fc032000 	stc2	0, cr2, [r3], {-0}
  b4:	07050100 	streq	r0, [r5, -r0, lsl #2]
  b8:	2e13052f 	cfmul64cs	mvdx0, mvdx3, mvdx15
  bc:	052f0705 	streq	r0, [pc, #-1797]!	@ fffff9bf <segments+0xdffff6c3>
  c0:	07052e14 	smladeq	r5, r4, lr, r2
  c4:	2e130531 	mrccs	5, 0, r0, cr3, cr1, {1}
  c8:	054b0705 	strbeq	r0, [fp, #-1797]	@ 0xfffff8fb
  cc:	07052e13 	smladeq	r5, r3, lr, r2
  d0:	2e14054b 	cfmac32cs	mvfx0, mvfx4, mvfx11
  d4:	054b0705 	strbeq	r0, [fp, #-1797]	@ 0xfffff8fb
  d8:	07052e14 	smladeq	r5, r4, lr, r2
  dc:	2e1d054b 	cfmac32cs	mvfx0, mvfx13, mvfx11
  e0:	05750705 	ldrbeq	r0, [r5, #-1797]!	@ 0xfffff8fb
  e4:	07052e1d 	smladeq	r5, sp, lr, r2
  e8:	2e1e0575 	mrccs	5, 0, r0, cr14, cr5, {3}
  ec:	05750705 	ldrbeq	r0, [r5, #-1797]!	@ 0xfffff8fb
  f0:	07052e1e 	smladeq	r5, lr, lr, r2
  f4:	2e140577 	mrccs	5, 0, r0, cr4, cr7, {3}
  f8:	05750705 	ldrbeq	r0, [r5, #-1797]!	@ 0xfffff8fb
  fc:	07052e14 	smladeq	r5, r4, lr, r2
 100:	2e140575 	mrccs	5, 0, r0, cr4, cr5, {3}
 104:	05750705 	ldrbeq	r0, [r5, #-1797]!	@ 0xfffff8fb
 108:	07052e14 	smladeq	r5, r4, lr, r2
 10c:	2e1a0575 	mrccs	5, 0, r0, cr10, cr5, {3}
 110:	054b0705 	strbeq	r0, [fp, #-1797]	@ 0xfffff8fb
 114:	07052e1a 	smladeq	r5, sl, lr, r2
 118:	2e1a054b 	cfmac32cs	mvfx0, mvfx10, mvfx11
 11c:	054b0705 	strbeq	r0, [fp, #-1797]	@ 0xfffff8fb
 120:	01052e1a 	tsteq	r5, sl, lsl lr
 124:	05055f59 	streq	r5, [r5, #-3929]	@ 0xfffff0a7
 128:	00180559 	andseq	r0, r8, r9, asr r5
 12c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 130:	02002b05 	andeq	r2, r0, #5120	@ 0x1400
 134:	052e0104 	streq	r0, [lr, #-260]!	@ 0xfffffefc
 138:	04020001 	streq	r0, [r2], #-1
 13c:	0a05e801 	beq	17a148 <startup-0x1fe85eb8>
 140:	001c051d 	andseq	r0, ip, sp, lsl r5
 144:	3c010402 	cfstrscc	mvf0, [r1], {2}
 148:	02002f05 	andeq	r2, r0, #5, 30
 14c:	052e0104 	streq	r0, [lr, #-260]!	@ 0xfffffefc
 150:	04020001 	streq	r0, [r2], #-1
 154:	0a05e701 	beq	179d60 <startup-0x1fe862a0>
 158:	001c051e 	andseq	r0, ip, lr, lsl r5
 15c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 160:	02002f05 	andeq	r2, r0, #5, 30
 164:	052e0104 	streq	r0, [lr, #-260]!	@ 0xfffffefc
 168:	04020001 	streq	r0, [r2], #-1
 16c:	0a05e601 	beq	179978 <startup-0x1fe86688>
 170:	001c051f 	andseq	r0, ip, pc, lsl r5
 174:	3c010402 	cfstrscc	mvf0, [r1], {2}
 178:	02002f05 	andeq	r2, r0, #5, 30
 17c:	052e0104 	streq	r0, [lr, #-260]!	@ 0xfffffefc
 180:	056ac901 	strbeq	ip, [sl, #-2305]!	@ 0xfffff6ff
 184:	1c05310b 	stfnes	f3, [r5], {11}
 188:	4a05052e 	bmi	141648 <startup-0x1febe9b8>
 18c:	02002b05 	andeq	r2, r0, #5120	@ 0x1400
 190:	052e0104 	streq	r0, [lr, #-260]!	@ 0xfffffefc
 194:	1c052f0b 	stcne	15, cr2, [r5], {11}
 198:	4a05052e 	bmi	141658 <startup-0x1febe9a8>
 19c:	02002b05 	andeq	r2, r0, #5120	@ 0x1400
 1a0:	052e0104 	streq	r0, [lr, #-260]!	@ 0xfffffefc
 1a4:	1d052f0b 	stcne	15, cr2, [r5, #-44]	@ 0xffffffd4
 1a8:	4a05052e 	bmi	141668 <startup-0x1febe998>
 1ac:	02002c05 	andeq	r2, r0, #1280	@ 0x500
 1b0:	052e0104 	streq	r0, [lr, #-260]!	@ 0xfffffefc
 1b4:	1d052f0b 	stcne	15, cr2, [r5, #-44]	@ 0xffffffd4
 1b8:	4a05052e 	bmi	141678 <startup-0x1febe988>
 1bc:	02002c05 	andeq	r2, r0, #1280	@ 0x500
 1c0:	052e0104 	streq	r0, [lr, #-260]!	@ 0xfffffefc
 1c4:	01053009 	tsteq	r5, r9
 1c8:	580b0321 	stmdapl	fp, {r0, r5, r8, r9}
 1cc:	053d0b05 	ldreq	r0, [sp, #-2821]!	@ 0xfffff4fb
 1d0:	03052e02 	movweq	r2, #24066	@ 0x5e02
 1d4:	5a210521 	bpl	841660 <startup-0x1f7be9a0>
 1d8:	05590605 	ldrbeq	r0, [r9, #-1541]	@ 0xfffff9fb
 1dc:	03054c18 	movweq	r4, #23576	@ 0x5c18
 1e0:	02040200 	andeq	r0, r4, #0, 4
 1e4:	00200585 	eoreq	r0, r0, r5, lsl #11
 1e8:	03020402 	movweq	r0, #9218	@ 0x2402
 1ec:	18055877 	stmdane	r5, {r0, r1, r2, r4, r5, r6, fp, ip, lr}
 1f0:	01040200 	mrseq	r0, R12_usr
 1f4:	0309053c 	movweq	r0, #38204	@ 0x953c
 1f8:	01053c0c 	tsteq	r5, ip, lsl #24
 1fc:	66160321 	ldrvs	r0, [r6], -r1, lsr #6
 200:	05670505 	strbeq	r0, [r7, #-1285]!	@ 0xfffffafb
 204:	12054c08 	andne	r4, r5, #8, 24	@ 0x800
 208:	3401052e 	strcc	r0, [r1], #-1326	@ 0xfffffad2
 20c:	051e1c05 	ldreq	r1, [lr, #-3077]	@ 0xfffff3fb
 210:	1c052e08 	stcne	14, cr2, [r5], {8}
 214:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
 218:	85220105 	strhi	r0, [r2, #-261]!	@ 0xfffffefb
 21c:	052f0205 	streq	r0, [pc, #-517]!	@ 1f <startup-0x1fffffe1>
 220:	04020003 	streq	r0, [r2], #-3
 224:	07023101 	streq	r3, [r2, -r1, lsl #2]
 228:	Address 0x228 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5059544f 	subspl	r5, r9, pc, asr #8
   4:	4c5f5245 	lfmmi	f5, 2, [pc], {69}	@ 0x45
   8:	5000574f 	andpl	r5, r0, pc, asr #14
   c:	4d74726f 	lfmmi	f7, 2, [r4, #-444]!	@ 0xfffffe44
  10:	4d65646f 	cfstrdmi	mvd6, [r5, #-444]!	@ 0xfffffe44
  14:	73007061 	movwvc	r7, #97	@ 0x61
  18:	6f527465 	svcvs	0x00527465
  1c:	61745377 	cmnvs	r4, r7, ror r3
  20:	70006574 	andvc	r6, r0, r4, ror r5
  24:	00306e69 	eorseq	r6, r0, r9, ror #28
  28:	316e6970 	smccc	59024	@ 0xe690
  2c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
  30:	69700032 	ldmdbvs	r0!, {r1, r4, r5}^
  34:	7000336e 	andvc	r3, r0, lr, ror #6
  38:	00346e69 	eorseq	r6, r4, r9, ror #28
  3c:	356e6970 	strbcc	r6, [lr, #-2416]!	@ 0xfffff690
  40:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
  44:	69700036 	ldmdbvs	r0!, {r1, r2, r4, r5}^
  48:	7000376e 	andvc	r3, r0, lr, ror #14
  4c:	00386e69 	eorseq	r6, r8, r9, ror #28
  50:	396e6970 	stmdbcc	lr!, {r4, r5, r6, r8, fp, sp, lr}^
  54:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
  58:	756c6156 	strbvc	r6, [ip, #-342]!	@ 0xfffffeaa
  5c:	754f0065 	strbvc	r0, [pc, #-101]	@ ffffffff <segments+0xdffffd03>
  60:	74757074 	ldrbtvc	r7, [r5], #-116	@ 0xffffff8c
  64:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
  68:	0070614d 	rsbseq	r6, r0, sp, asr #2
  6c:	45444f4d 	strbmi	r4, [r4, #-3917]	@ 0xfffff0b3
  70:	55500052 	ldrbpl	r0, [r0, #-82]	@ 0xffffffae
  74:	5f524450 	svcpl	0x00524450
  78:	00574f4c 	subseq	r4, r7, ip, asr #30
  7c:	6d676573 	cfstr64vs	mvdx6, [r7, #-460]!	@ 0xfffffe34
  80:	73746e65 	cmnvc	r4, #1616	@ 0x650
  84:	6c755000 	ldclvs	0, cr5, [r5], #-0
  88:	5070556c 	rsbspl	r5, r0, ip, ror #10
  8c:	446c6c75 	strbtmi	r6, [ip], #-3189	@ 0xfffff38b
  90:	4d6e776f 	stclmi	7, cr7, [lr, #-444]!	@ 0xfffffe44
  94:	4f007061 	svcmi	0x00007061
  98:	45505954 	ldrbmi	r5, [r0, #-2388]	@ 0xfffff6ac
  9c:	6e750052 	mrcvs	0, 3, r0, cr5, cr2, {2}
  a0:	6e676973 			@ <UNDEFINED> instruction: 0x6e676973
  a4:	63206465 			@ <UNDEFINED> instruction: 0x63206465
  a8:	00726168 	rsbseq	r6, r2, r8, ror #2
  ac:	73756e75 	cmnvc	r5, #1872	@ 0x750
  b0:	00306465 	eorseq	r6, r0, r5, ror #8
  b4:	5f707061 	svcpl	0x00707061
  b8:	74696e69 	strbtvc	r6, [r9], #-3689	@ 0xfffff197
  bc:	52444f00 	subpl	r4, r4, #0, 30
  c0:	4749485f 	smlsldmi	r4, r9, pc, r8	@ <UNPREDICTABLE>
  c4:	534f0048 	movtpl	r0, #61512	@ 0xf048
  c8:	44454550 	strbmi	r4, [r5], #-1360	@ 0xfffffab0
  cc:	49485f52 	stmdbmi	r8, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
  d0:	44004847 	strmi	r4, [r0], #-2119	@ 0xfffff7b9
  d4:	74535c3a 	ldrbvc	r5, [r3], #-3130	@ 0xfffff3c6
  d8:	65696475 	strbvs	r6, [r9, #-1141]!	@ 0xfffffb8b
  dc:	614d5c73 	hvcvs	54723	@ 0xd5c3
  e0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
  e4:	724f2d65 	subvc	r2, pc, #6464	@ 0x1940
  e8:	746e6569 	strbtvc	r6, [lr], #-1385	@ 0xfffffa97
  ec:	502d6465 	eorpl	r6, sp, r5, ror #8
  f0:	72676f72 	rsbvc	r6, r7, #456	@ 0x1c8
  f4:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
  f8:	575c676e 	ldrbpl	r6, [ip, -lr, ror #14]
  fc:	5c6b726f 	sfmpl	f7, 2, [fp], #-444	@ 0xfffffe44
 100:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
 104:	2d656e69 	stclcs	14, cr6, [r5, #-420]!	@ 0xfffffe5c
 108:	6569724f 	strbvs	r7, [r9, #-591]!	@ 0xfffffdb1
 10c:	6465746e 	strbtvs	r7, [r5], #-1134	@ 0xfffffb92
 110:	6f72502d 	svcvs	0x0072502d
 114:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	@ 0xfffffe64
 118:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
 11c:	7574532d 	ldrbvc	r5, [r4, #-813]!	@ 0xfffffcd3
 120:	73656964 	cmnvc	r5, #100, 18	@ 0x190000
 124:	465c435c 			@ <UNDEFINED> instruction: 0x465c435c
 128:	7472756f 	ldrbtvc	r7, [r2], #-1391	@ 0xfffffa91
 12c:	79725468 	ldmdbvc	r2!, {r3, r5, r6, sl, ip, lr}^
 130:	322e325c 	eorcc	r3, lr, #92, 4	@ 0xc0000005
 134:	79654b2d 	stmdbvc	r5!, {r0, r2, r3, r5, r8, r9, fp, lr}^
 138:	72616f62 	rsbvc	r6, r1, #392	@ 0x188
 13c:	68730064 	ldmdavs	r3!, {r2, r5, r6}^
 140:	2074726f 	rsbscs	r7, r4, pc, ror #4
 144:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 148:	64656e67 	strbtvs	r6, [r5], #-3687	@ 0xfffff199
 14c:	746e6920 	strbtvc	r6, [lr], #-2336	@ 0xfffff6e0
 150:	726f7000 	rsbvc	r7, pc, #0
 154:	6f004474 	svcvs	0x00004474
 158:	75707475 	ldrbvc	r7, [r0, #-1141]!	@ 0xfffffb8b
 15c:	70795474 	rsbsvc	r5, r9, r4, ror r4
 160:	656e0065 	strbvs	r0, [lr, #-101]!	@ 0xffffff9b
 164:	61745377 	cmnvs	r4, r7, ror r3
 168:	4d006574 	cfstr32mi	mvfx6, [r0, #-464]	@ 0xfffffe30
 16c:	5245444f 	subpl	r4, r5, #1325400064	@ 0x4f000000
 170:	4749485f 	smlsldmi	r4, r9, pc, r8	@ <UNPREDICTABLE>
 174:	4f4d0048 	svcmi	0x004d0048
 178:	5f524544 	svcpl	0x00524544
 17c:	00574f4c 	subseq	r4, r7, ip, asr #30
 180:	5059544f 	subspl	r5, r9, pc, asr #8
 184:	485f5245 	ldmdami	pc, {r0, r2, r6, r9, ip, lr}^	@ <UNPREDICTABLE>
 188:	00484749 	subeq	r4, r8, r9, asr #14
 18c:	42656e4f 	rsbmi	r6, r5, #1264	@ 0x4f0
 190:	65507469 	ldrbvs	r7, [r0, #-1129]	@ 0xfffffb97
 194:	6e695072 	mcrvs	0, 3, r5, cr9, cr2, {3}
 198:	74756f00 	ldrbtvc	r6, [r5], #-3840	@ 0xfffff100
 19c:	67655337 			@ <UNDEFINED> instruction: 0x67655337
 1a0:	52444900 	subpl	r4, r4, #0, 18
 1a4:	4749485f 	smlsldmi	r4, r9, pc, r8	@ <UNPREDICTABLE>
 1a8:	534f0048 	movtpl	r0, #61512	@ 0xf048
 1ac:	44454550 	strbmi	r4, [r5], #-1360	@ 0xfffffab0
 1b0:	616d0052 	qdsubvs	r0, r2, sp
 1b4:	4f006e69 	svcmi	0x00006e69
 1b8:	4c5f5244 	lfmmi	f5, 2, [pc], {68}	@ 0x44
 1bc:	4700574f 	strmi	r5, [r0, -pc, asr #14]
 1c0:	004f4950 	subeq	r4, pc, r0, asr r9	@ <UNPREDICTABLE>
 1c4:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 1c8:	61447475 	hvcvs	18245	@ 0x4745
 1cc:	50006174 	andpl	r6, r0, r4, ror r1
 1d0:	52445055 	subpl	r5, r4, #85	@ 0x55
 1d4:	4749485f 	smlsldmi	r4, r9, pc, r8	@ <UNPREDICTABLE>
 1d8:	74730048 	ldrbtvc	r0, [r3], #-72	@ 0xffffffb8
 1dc:	75747261 	ldrbvc	r7, [r4, #-609]!	@ 0xfffffd9f
 1e0:	6f6d0070 	svcvs	0x006d0070
 1e4:	70006564 	andvc	r6, r0, r4, ror #10
 1e8:	556c6c75 	strbpl	r6, [ip, #-3189]!	@ 0xfffff38b
 1ec:	6c755070 	ldclvs	0, cr5, [r5], #-448	@ 0xfffffe40
 1f0:	776f446c 	strbvc	r4, [pc, -ip, ror #8]!
 1f4:	3a44006e 	bcc	11003b4 <startup-0x1eeffc4c>
 1f8:	7574532f 	ldrbvc	r5, [r4, #-815]!	@ 0xfffffcd1
 1fc:	73656964 	cmnvc	r5, #100, 18	@ 0x190000
 200:	63614d2f 	cmnvs	r1, #3008	@ 0xbc0
 204:	656e6968 	strbvs	r6, [lr, #-2408]!	@ 0xfffff698
 208:	69724f2d 	ldmdbvs	r2!, {r0, r2, r3, r5, r8, r9, sl, fp, lr}^
 20c:	65746e65 	ldrbvs	r6, [r4, #-3685]!	@ 0xfffff19b
 210:	72502d64 	subsvc	r2, r0, #100, 26	@ 0x1900
 214:	6172676f 	cmnvs	r2, pc, ror #14
 218:	6e696d6d 	cdpvs	13, 6, cr6, cr9, cr13, {3}
 21c:	6f572f67 	svcvs	0x00572f67
 220:	4d2f6b72 	vstmdbmi	pc!, {d6-<overflow reg d62>}
 224:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 228:	4f2d656e 	svcmi	0x002d656e
 22c:	6e656972 			@ <UNDEFINED> instruction: 0x6e656972
 230:	2d646574 	cfstr64cs	mvdx6, [r4, #-464]!	@ 0xfffffe30
 234:	676f7250 			@ <UNDEFINED> instruction: 0x676f7250
 238:	6d6d6172 	stfvse	f6, [sp, #-456]!	@ 0xfffffe38
 23c:	2d676e69 	stclcs	14, cr6, [r7, #-420]!	@ 0xfffffe5c
 240:	64757453 	ldrbtvs	r7, [r5], #-1107	@ 0xfffffbad
 244:	2f736569 	svccs	0x00736569
 248:	6f462f43 	svcvs	0x00462f43
 24c:	68747275 	ldmdavs	r4!, {r0, r2, r4, r5, r6, r9, ip, sp, lr}^
 250:	2f797254 	svccs	0x00797254
 254:	2d322e32 	ldccs	14, cr2, [r2, #-200]!	@ 0xffffff38
 258:	6279654b 	rsbsvs	r6, r9, #314572800	@ 0x12c00000
 25c:	6472616f 	ldrbtvs	r6, [r2], #-367	@ 0xfffffe91
 260:	6174732f 	cmnvs	r4, pc, lsr #6
 264:	70757472 	rsbsvc	r7, r5, r2, ror r4
 268:	5000632e 	andpl	r6, r0, lr, lsr #6
 26c:	52445055 	subpl	r5, r4, #85	@ 0x55
 270:	74756f00 	ldrbtvc	r6, [r5], #-3840	@ 0xfffff100
 274:	53747570 	cmnpl	r4, #112, 10	@ 0x1c000000
 278:	64656570 	strbtvs	r6, [r5], #-1392	@ 0xfffffa90
 27c:	61657200 	cmnvs	r5, r0, lsl #4
 280:	6c6f4364 	stclvs	3, cr4, [pc], #-400	@ f8 <startup-0x1fffff08>
 284:	736e6d75 	cmnvc	lr, #7488	@ 0x1d40
 288:	52444900 	subpl	r4, r4, #0, 18
 28c:	574f4c5f 	smlsldpl	r4, pc, pc, ip	@ <UNPREDICTABLE>
 290:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 294:	6e690062 	cdpvs	0, 6, cr0, cr9, cr2, {3}
 298:	44747570 	ldrbtmi	r7, [r4], #-1392	@ 0xfffffa90
 29c:	00617461 	rsbeq	r7, r1, r1, ror #8
 2a0:	756c6f63 	strbvc	r6, [ip, #-3939]!	@ 0xfffff09d
 2a4:	72506e6d 	subsvc	r6, r0, #1744	@ 0x6d0
 2a8:	65737365 	ldrbvs	r7, [r3, #-869]!	@ 0xfffffc9b
 2ac:	69700064 	ldmdbvs	r0!, {r2, r5, r6}^
 2b0:	0030316e 	eorseq	r3, r0, lr, ror #2
 2b4:	316e6970 	smccc	59024	@ 0xe690
 2b8:	69700031 	ldmdbvs	r0!, {r0, r4, r5}^
 2bc:	0032316e 	eorseq	r3, r2, lr, ror #2
 2c0:	316e6970 	smccc	59024	@ 0xe690
 2c4:	69700033 	ldmdbvs	r0!, {r0, r1, r4, r5}^
 2c8:	0034316e 	eorseq	r3, r4, lr, ror #2
 2cc:	20554e47 	subscs	r4, r5, r7, asr #28
 2d0:	20393943 	eorscs	r3, r9, r3, asr #18
 2d4:	332e3231 			@ <UNDEFINED> instruction: 0x332e3231
 2d8:	3220312e 	eorcc	r3, r0, #-2147483637	@ 0x8000000b
 2dc:	30333230 	eorscc	r3, r3, r0, lsr r2
 2e0:	20363236 	eorscs	r3, r6, r6, lsr r2
 2e4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 2e8:	20626d75 	rsbcs	r6, r2, r5, ror sp
 2ec:	6c666d2d 	stclvs	13, cr6, [r6], #-180	@ 0xffffff4c
 2f0:	2d74616f 	ldfcse	f6, [r4, #-444]!	@ 0xfffffe44
 2f4:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	@ 0xfffffe7c
 2f8:	74666f73 	strbtvc	r6, [r6], #-3955	@ 0xfffff08d
 2fc:	616d2d20 	cmnvs	sp, r0, lsr #26
 300:	3d686372 	stclcc	3, cr6, [r8, #-456]!	@ 0xfffffe38
 304:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 308:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 30c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	@ 0xffffff4c
 310:	2d20304f 	stccs	0, cr3, [r0, #-316]!	@ 0xfffffec4
 314:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	@ 0xfffffe34
 318:	00393963 	eorseq	r3, r9, r3, ror #18
 31c:	4550534f 	ldrbmi	r5, [r0, #-847]	@ 0xfffffcb1
 320:	5f524445 	svcpl	0x00524445
 324:	00574f4c 	subseq	r4, r7, ip, asr #30
 328:	7074754f 	rsbsvc	r7, r4, pc, asr #10
 32c:	70537475 	subsvc	r7, r3, r5, ror r4
 330:	4d646565 	cfstr64mi	mvdx6, [r4, #-404]!	@ 0xfffffe6c
 334:	54007061 	strpl	r7, [r0], #-97	@ 0xffffff9f
 338:	69426f77 	stmdbvs	r2, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 33c:	65507374 	ldrbvs	r7, [r0, #-884]	@ 0xfffffc8c
 340:	6e695072 	mcrvs	0, 3, r5, cr9, cr2, {3}
 344:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
 348:	Address 0x348 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	72412820 	subvc	r2, r1, #32, 16	@ 0x200000
   8:	4e47206d 	cdpmi	0, 4, cr2, cr7, cr13, {3}
   c:	6f542055 	svcvs	0x00542055
  10:	68636c6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
  14:	206e6961 	rsbcs	r6, lr, r1, ror #18
  18:	332e3231 			@ <UNDEFINED> instruction: 0x332e3231
  1c:	6c65522e 	sfmvs	f5, 2, [r5], #-184	@ 0xffffff48
  20:	42282031 	eormi	r2, r8, #49	@ 0x31
  24:	646c6975 	strbtvs	r6, [ip], #-2421	@ 0xfffff68b
  28:	6d726120 	ldfvse	f6, [r2, #-128]!	@ 0xffffff80
  2c:	2e32312d 	rsfcssp	f3, f2, #5.0
  30:	29293533 	stmdbcs	r9!, {r0, r1, r4, r5, r8, sl, ip, sp}
  34:	2e323120 	rsfcssp	f3, f2, f0
  38:	20312e33 	eorscs	r2, r1, r3, lsr lr
  3c:	33323032 	teqcc	r2, #50	@ 0x32
  40:	36323630 			@ <UNDEFINED> instruction: 0x36323630
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	@ 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	@ 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	@ 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x28 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000110 	andeq	r0, r0, r0, lsl r1
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000120 	andcs	r0, r0, r0, lsr #2
  48:	000000b8 	strheq	r0, [r0], -r8
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41100e 	stcleq	0, cr1, [r1, #-56]	@ 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	00000018 	andeq	r0, r0, r8, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	200001d8 	ldrdcs	r0, [r0], -r8
  68:	00000060 	andeq	r0, r0, r0, rrx
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0000070d 	andeq	r0, r0, sp, lsl #14
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	20000238 	andcs	r0, r0, r8, lsr r2
  84:	0000005c 	andeq	r0, r0, ip, asr r0
  88:	840c0e41 	strhi	r0, [ip], #-3649	@ 0xfffff1bf
  8c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  90:	180e4101 	stmdane	lr, {r0, r8, lr}
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	20000294 	mulcs	r0, r4, r2
  a4:	0000003c 	andeq	r0, r0, ip, lsr r0
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	@ 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	00000018 	andeq	r0, r0, r8, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200002d0 	ldrdcs	r0, [r0], -r0	@ <UNPREDICTABLE>
  c4:	00000016 	andeq	r0, r0, r6, lsl r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0000070d 	andeq	r0, r0, sp, lsl #14
