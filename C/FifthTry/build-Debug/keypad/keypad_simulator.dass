
..\build-Debug\bin\keypad_simulator.exe:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
__attribute__((naked)) 
__attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	@ (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f942 	bl	2000028c <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			@ (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <app_init>:

#define GPIO_D 0x40020C00
GPIO* portD = (GPIO*) GPIO_D; 

void app_init (void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	portD->MODER_LOW = 0x5555;	// D0-D7 as output for 7-segment display.
20000014:	4b2f      	ldr	r3, [pc, #188]	@ (200000d4 <app_init+0xc4>)
20000016:	681b      	ldr	r3, [r3, #0]
20000018:	4a2f      	ldr	r2, [pc, #188]	@ (200000d8 <app_init+0xc8>)
2000001a:	801a      	strh	r2, [r3, #0]
	portD->OTYPER_LOW = 0;		// D0-D7 as push-pull.
2000001c:	4b2d      	ldr	r3, [pc, #180]	@ (200000d4 <app_init+0xc4>)
2000001e:	681b      	ldr	r3, [r3, #0]
20000020:	2200      	movs	r2, #0
20000022:	711a      	strb	r2, [r3, #4]
	
	// Lower nibble of higher byte, the columns, are input without pull-up since it's broken on simulator.
	portD->mode.pin8 = MODE_INPUT;
20000024:	4b2b      	ldr	r3, [pc, #172]	@ (200000d4 <app_init+0xc4>)
20000026:	681b      	ldr	r3, [r3, #0]
20000028:	789a      	ldrb	r2, [r3, #2]
2000002a:	2103      	movs	r1, #3
2000002c:	438a      	bics	r2, r1
2000002e:	709a      	strb	r2, [r3, #2]
	portD->mode.pin9 = MODE_INPUT;
20000030:	4b28      	ldr	r3, [pc, #160]	@ (200000d4 <app_init+0xc4>)
20000032:	681b      	ldr	r3, [r3, #0]
20000034:	789a      	ldrb	r2, [r3, #2]
20000036:	210c      	movs	r1, #12
20000038:	438a      	bics	r2, r1
2000003a:	709a      	strb	r2, [r3, #2]
	portD->mode.pin10 = MODE_INPUT;
2000003c:	4b25      	ldr	r3, [pc, #148]	@ (200000d4 <app_init+0xc4>)
2000003e:	681b      	ldr	r3, [r3, #0]
20000040:	789a      	ldrb	r2, [r3, #2]
20000042:	2130      	movs	r1, #48	@ 0x30
20000044:	438a      	bics	r2, r1
20000046:	709a      	strb	r2, [r3, #2]
	portD->mode.pin11 = MODE_INPUT;
20000048:	4b22      	ldr	r3, [pc, #136]	@ (200000d4 <app_init+0xc4>)
2000004a:	681b      	ldr	r3, [r3, #0]
2000004c:	789a      	ldrb	r2, [r3, #2]
2000004e:	213f      	movs	r1, #63	@ 0x3f
20000050:	400a      	ands	r2, r1
20000052:	709a      	strb	r2, [r3, #2]
	portD->pullUpPullDown.pin10 = PUPD_PULL_UP;
	portD->pullUpPullDown.pin11 = PUPD_PULL_UP;
	*/
	
	// Higher nibble of higher byte, the rows, are output in open-drain.
	portD->mode.pin12 = MODE_OUTPUT;
20000054:	4b1f      	ldr	r3, [pc, #124]	@ (200000d4 <app_init+0xc4>)
20000056:	681b      	ldr	r3, [r3, #0]
20000058:	78da      	ldrb	r2, [r3, #3]
2000005a:	2103      	movs	r1, #3
2000005c:	438a      	bics	r2, r1
2000005e:	1c11      	adds	r1, r2, #0
20000060:	2201      	movs	r2, #1
20000062:	430a      	orrs	r2, r1
20000064:	70da      	strb	r2, [r3, #3]
	portD->mode.pin13 = MODE_OUTPUT;
20000066:	4b1b      	ldr	r3, [pc, #108]	@ (200000d4 <app_init+0xc4>)
20000068:	681b      	ldr	r3, [r3, #0]
2000006a:	78da      	ldrb	r2, [r3, #3]
2000006c:	210c      	movs	r1, #12
2000006e:	438a      	bics	r2, r1
20000070:	1c11      	adds	r1, r2, #0
20000072:	2204      	movs	r2, #4
20000074:	430a      	orrs	r2, r1
20000076:	70da      	strb	r2, [r3, #3]
	portD->mode.pin14 = MODE_OUTPUT;
20000078:	4b16      	ldr	r3, [pc, #88]	@ (200000d4 <app_init+0xc4>)
2000007a:	681b      	ldr	r3, [r3, #0]
2000007c:	78da      	ldrb	r2, [r3, #3]
2000007e:	2130      	movs	r1, #48	@ 0x30
20000080:	438a      	bics	r2, r1
20000082:	1c11      	adds	r1, r2, #0
20000084:	2210      	movs	r2, #16
20000086:	430a      	orrs	r2, r1
20000088:	70da      	strb	r2, [r3, #3]
	portD->mode.pin15 = MODE_OUTPUT;
2000008a:	4b12      	ldr	r3, [pc, #72]	@ (200000d4 <app_init+0xc4>)
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	78da      	ldrb	r2, [r3, #3]
20000090:	213f      	movs	r1, #63	@ 0x3f
20000092:	400a      	ands	r2, r1
20000094:	1c11      	adds	r1, r2, #0
20000096:	2240      	movs	r2, #64	@ 0x40
20000098:	430a      	orrs	r2, r1
2000009a:	70da      	strb	r2, [r3, #3]
	// Simulator doesn't understand pull-up so we have to use push-pull (which would short output pins, bruh)
	portD->outputType.pin12 = OTYPE_PUSH_PULL;
2000009c:	4b0d      	ldr	r3, [pc, #52]	@ (200000d4 <app_init+0xc4>)
2000009e:	681b      	ldr	r3, [r3, #0]
200000a0:	795a      	ldrb	r2, [r3, #5]
200000a2:	2110      	movs	r1, #16
200000a4:	438a      	bics	r2, r1
200000a6:	715a      	strb	r2, [r3, #5]
	portD->outputType.pin13 = OTYPE_PUSH_PULL;
200000a8:	4b0a      	ldr	r3, [pc, #40]	@ (200000d4 <app_init+0xc4>)
200000aa:	681b      	ldr	r3, [r3, #0]
200000ac:	795a      	ldrb	r2, [r3, #5]
200000ae:	2120      	movs	r1, #32
200000b0:	438a      	bics	r2, r1
200000b2:	715a      	strb	r2, [r3, #5]
	portD->outputType.pin14 = OTYPE_PUSH_PULL;
200000b4:	4b07      	ldr	r3, [pc, #28]	@ (200000d4 <app_init+0xc4>)
200000b6:	681b      	ldr	r3, [r3, #0]
200000b8:	795a      	ldrb	r2, [r3, #5]
200000ba:	2140      	movs	r1, #64	@ 0x40
200000bc:	438a      	bics	r2, r1
200000be:	715a      	strb	r2, [r3, #5]
	portD->outputType.pin15 = OTYPE_PUSH_PULL;
200000c0:	4b04      	ldr	r3, [pc, #16]	@ (200000d4 <app_init+0xc4>)
200000c2:	681b      	ldr	r3, [r3, #0]
200000c4:	795a      	ldrb	r2, [r3, #5]
200000c6:	217f      	movs	r1, #127	@ 0x7f
200000c8:	400a      	ands	r2, r1
200000ca:	715a      	strb	r2, [r3, #5]

}
200000cc:	46c0      	nop			@ (mov r8, r8)
200000ce:	46bd      	mov	sp, r7
200000d0:	bd80      	pop	{r7, pc}
200000d2:	46c0      	nop			@ (mov r8, r8)
200000d4:	200002a4 	andcs	r0, r0, r4, lsr #5
200000d8:	00005555 	andeq	r5, r0, r5, asr r5

200000dc <setRowState>:

// Changes the state of a single row to newState.
void setRowState (int row, int newState)
{
200000dc:	b580      	push	{r7, lr}
200000de:	b082      	sub	sp, #8
200000e0:	af00      	add	r7, sp, #0
200000e2:	6078      	str	r0, [r7, #4]
200000e4:	6039      	str	r1, [r7, #0]
	if (row == 0) 		{portD->outputData.pin12 = newState; }
200000e6:	687b      	ldr	r3, [r7, #4]
200000e8:	2b00      	cmp	r3, #0
200000ea:	d111      	bne.n	20000110 <setRowState+0x34>
200000ec:	4b28      	ldr	r3, [pc, #160]	@ (20000190 <setRowState+0xb4>)
200000ee:	681b      	ldr	r3, [r3, #0]
200000f0:	683a      	ldr	r2, [r7, #0]
200000f2:	1c11      	adds	r1, r2, #0
200000f4:	2201      	movs	r2, #1
200000f6:	400a      	ands	r2, r1
200000f8:	b2d2      	uxtb	r2, r2
200000fa:	2101      	movs	r1, #1
200000fc:	400a      	ands	r2, r1
200000fe:	0110      	lsls	r0, r2, #4
20000100:	7d5a      	ldrb	r2, [r3, #21]
20000102:	2110      	movs	r1, #16
20000104:	438a      	bics	r2, r1
20000106:	1c11      	adds	r1, r2, #0
20000108:	1c02      	adds	r2, r0, #0
2000010a:	430a      	orrs	r2, r1
2000010c:	755a      	strb	r2, [r3, #21]
	else if (row == 1) 	{portD->outputData.pin13 = newState; }
	else if (row == 2) 	{portD->outputData.pin14 = newState; }
	else if (row == 3) 	{portD->outputData.pin15 = newState; }
}
2000010e:	e03b      	b.n	20000188 <setRowState+0xac>
	else if (row == 1) 	{portD->outputData.pin13 = newState; }
20000110:	687b      	ldr	r3, [r7, #4]
20000112:	2b01      	cmp	r3, #1
20000114:	d111      	bne.n	2000013a <setRowState+0x5e>
20000116:	4b1e      	ldr	r3, [pc, #120]	@ (20000190 <setRowState+0xb4>)
20000118:	681b      	ldr	r3, [r3, #0]
2000011a:	683a      	ldr	r2, [r7, #0]
2000011c:	1c11      	adds	r1, r2, #0
2000011e:	2201      	movs	r2, #1
20000120:	400a      	ands	r2, r1
20000122:	b2d2      	uxtb	r2, r2
20000124:	2101      	movs	r1, #1
20000126:	400a      	ands	r2, r1
20000128:	0150      	lsls	r0, r2, #5
2000012a:	7d5a      	ldrb	r2, [r3, #21]
2000012c:	2120      	movs	r1, #32
2000012e:	438a      	bics	r2, r1
20000130:	1c11      	adds	r1, r2, #0
20000132:	1c02      	adds	r2, r0, #0
20000134:	430a      	orrs	r2, r1
20000136:	755a      	strb	r2, [r3, #21]
}
20000138:	e026      	b.n	20000188 <setRowState+0xac>
	else if (row == 2) 	{portD->outputData.pin14 = newState; }
2000013a:	687b      	ldr	r3, [r7, #4]
2000013c:	2b02      	cmp	r3, #2
2000013e:	d111      	bne.n	20000164 <setRowState+0x88>
20000140:	4b13      	ldr	r3, [pc, #76]	@ (20000190 <setRowState+0xb4>)
20000142:	681b      	ldr	r3, [r3, #0]
20000144:	683a      	ldr	r2, [r7, #0]
20000146:	1c11      	adds	r1, r2, #0
20000148:	2201      	movs	r2, #1
2000014a:	400a      	ands	r2, r1
2000014c:	b2d2      	uxtb	r2, r2
2000014e:	2101      	movs	r1, #1
20000150:	400a      	ands	r2, r1
20000152:	0190      	lsls	r0, r2, #6
20000154:	7d5a      	ldrb	r2, [r3, #21]
20000156:	2140      	movs	r1, #64	@ 0x40
20000158:	438a      	bics	r2, r1
2000015a:	1c11      	adds	r1, r2, #0
2000015c:	1c02      	adds	r2, r0, #0
2000015e:	430a      	orrs	r2, r1
20000160:	755a      	strb	r2, [r3, #21]
}
20000162:	e011      	b.n	20000188 <setRowState+0xac>
	else if (row == 3) 	{portD->outputData.pin15 = newState; }
20000164:	687b      	ldr	r3, [r7, #4]
20000166:	2b03      	cmp	r3, #3
20000168:	d10e      	bne.n	20000188 <setRowState+0xac>
2000016a:	4b09      	ldr	r3, [pc, #36]	@ (20000190 <setRowState+0xb4>)
2000016c:	681b      	ldr	r3, [r3, #0]
2000016e:	683a      	ldr	r2, [r7, #0]
20000170:	1c11      	adds	r1, r2, #0
20000172:	2201      	movs	r2, #1
20000174:	400a      	ands	r2, r1
20000176:	b2d2      	uxtb	r2, r2
20000178:	01d0      	lsls	r0, r2, #7
2000017a:	7d5a      	ldrb	r2, [r3, #21]
2000017c:	217f      	movs	r1, #127	@ 0x7f
2000017e:	400a      	ands	r2, r1
20000180:	1c11      	adds	r1, r2, #0
20000182:	1c02      	adds	r2, r0, #0
20000184:	430a      	orrs	r2, r1
20000186:	755a      	strb	r2, [r3, #21]
}
20000188:	46c0      	nop			@ (mov r8, r8)
2000018a:	46bd      	mov	sp, r7
2000018c:	b002      	add	sp, #8
2000018e:	bd80      	pop	{r7, pc}
20000190:	200002a4 	andcs	r0, r0, r4, lsr #5

20000194 <readColumns>:

// Returns a column with a pressed button. 0xFF is returned with no button pressed.
unsigned char readColumns ()
{
20000194:	b580      	push	{r7, lr}
20000196:	af00      	add	r7, sp, #0
	// In the simulator we actually want to look for 1's in the IDR, since we don't have pull-up.
	if (portD->inputData.pin8 == 1) { return 0; }
20000198:	4b15      	ldr	r3, [pc, #84]	@ (200001f0 <readColumns+0x5c>)
2000019a:	681b      	ldr	r3, [r3, #0]
2000019c:	7c5b      	ldrb	r3, [r3, #17]
2000019e:	2201      	movs	r2, #1
200001a0:	4013      	ands	r3, r2
200001a2:	b2db      	uxtb	r3, r3
200001a4:	2b00      	cmp	r3, #0
200001a6:	d001      	beq.n	200001ac <readColumns+0x18>
200001a8:	2300      	movs	r3, #0
200001aa:	e01e      	b.n	200001ea <readColumns+0x56>
	if (portD->inputData.pin9 == 1) { return 1; }
200001ac:	4b10      	ldr	r3, [pc, #64]	@ (200001f0 <readColumns+0x5c>)
200001ae:	681b      	ldr	r3, [r3, #0]
200001b0:	7c5b      	ldrb	r3, [r3, #17]
200001b2:	2202      	movs	r2, #2
200001b4:	4013      	ands	r3, r2
200001b6:	b2db      	uxtb	r3, r3
200001b8:	2b00      	cmp	r3, #0
200001ba:	d001      	beq.n	200001c0 <readColumns+0x2c>
200001bc:	2301      	movs	r3, #1
200001be:	e014      	b.n	200001ea <readColumns+0x56>
	if (portD->inputData.pin10 == 1) { return 2; }
200001c0:	4b0b      	ldr	r3, [pc, #44]	@ (200001f0 <readColumns+0x5c>)
200001c2:	681b      	ldr	r3, [r3, #0]
200001c4:	7c5b      	ldrb	r3, [r3, #17]
200001c6:	2204      	movs	r2, #4
200001c8:	4013      	ands	r3, r2
200001ca:	b2db      	uxtb	r3, r3
200001cc:	2b00      	cmp	r3, #0
200001ce:	d001      	beq.n	200001d4 <readColumns+0x40>
200001d0:	2302      	movs	r3, #2
200001d2:	e00a      	b.n	200001ea <readColumns+0x56>
	if (portD->inputData.pin11 == 1) { return 3; }
200001d4:	4b06      	ldr	r3, [pc, #24]	@ (200001f0 <readColumns+0x5c>)
200001d6:	681b      	ldr	r3, [r3, #0]
200001d8:	7c5b      	ldrb	r3, [r3, #17]
200001da:	2208      	movs	r2, #8
200001dc:	4013      	ands	r3, r2
200001de:	b2db      	uxtb	r3, r3
200001e0:	2b00      	cmp	r3, #0
200001e2:	d001      	beq.n	200001e8 <readColumns+0x54>
200001e4:	2303      	movs	r3, #3
200001e6:	e000      	b.n	200001ea <readColumns+0x56>
	
	return 0xFF;
200001e8:	23ff      	movs	r3, #255	@ 0xff
}
200001ea:	0018      	movs	r0, r3
200001ec:	46bd      	mov	sp, r7
200001ee:	bd80      	pop	{r7, pc}
200001f0:	200002a4 	andcs	r0, r0, r4, lsr #5

200001f4 <keyb>:
{ 7, 8,  9, 12},
{14, 0, 15, 13}	
};

unsigned char keyb(void)
{
200001f4:	b590      	push	{r4, r7, lr}
200001f6:	b083      	sub	sp, #12
200001f8:	af00      	add	r7, sp, #0
	for (int row = 0; row < 4; row++) {
200001fa:	2300      	movs	r3, #0
200001fc:	607b      	str	r3, [r7, #4]
200001fe:	e01d      	b.n	2000023c <keyb+0x48>
		
		// setRowState in the opposite order from real hardware, since we have to read the 1's without pull-up...
		setRowState(row, 1);
20000200:	687b      	ldr	r3, [r7, #4]
20000202:	2101      	movs	r1, #1
20000204:	0018      	movs	r0, r3
20000206:	f7ff ff69 	bl	200000dc <setRowState>
		unsigned char columnPressed = readColumns ();
2000020a:	1cfc      	adds	r4, r7, #3
2000020c:	f7ff ffc2 	bl	20000194 <readColumns>
20000210:	0003      	movs	r3, r0
20000212:	7023      	strb	r3, [r4, #0]
		setRowState(row, 0);
20000214:	687b      	ldr	r3, [r7, #4]
20000216:	2100      	movs	r1, #0
20000218:	0018      	movs	r0, r3
2000021a:	f7ff ff5f 	bl	200000dc <setRowState>
		
		if (columnPressed != 0xFF)
2000021e:	1cfb      	adds	r3, r7, #3
20000220:	781b      	ldrb	r3, [r3, #0]
20000222:	2bff      	cmp	r3, #255	@ 0xff
20000224:	d007      	beq.n	20000236 <keyb+0x42>
		{
			return keyValue[row][columnPressed];
20000226:	1cfb      	adds	r3, r7, #3
20000228:	781b      	ldrb	r3, [r3, #0]
2000022a:	4908      	ldr	r1, [pc, #32]	@ (2000024c <keyb+0x58>)
2000022c:	687a      	ldr	r2, [r7, #4]
2000022e:	0092      	lsls	r2, r2, #2
20000230:	188a      	adds	r2, r1, r2
20000232:	5cd3      	ldrb	r3, [r2, r3]
20000234:	e006      	b.n	20000244 <keyb+0x50>
	for (int row = 0; row < 4; row++) {
20000236:	687b      	ldr	r3, [r7, #4]
20000238:	3301      	adds	r3, #1
2000023a:	607b      	str	r3, [r7, #4]
2000023c:	687b      	ldr	r3, [r7, #4]
2000023e:	2b03      	cmp	r3, #3
20000240:	ddde      	ble.n	20000200 <keyb+0xc>
		}
	}
	
	return 0xFF;
20000242:	23ff      	movs	r3, #255	@ 0xff
}
20000244:	0018      	movs	r0, r3
20000246:	46bd      	mov	sp, r7
20000248:	b003      	add	sp, #12
2000024a:	bd90      	pop	{r4, r7, pc}
2000024c:	200002a8 	andcs	r0, r0, r8, lsr #5

20000250 <out7Seg>:
	0b1111001,  // E
	0b1110001   // F
};

void out7Seg (unsigned char c)
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	0002      	movs	r2, r0
20000258:	1dfb      	adds	r3, r7, #7
2000025a:	701a      	strb	r2, [r3, #0]
	if (c > 15)
2000025c:	1dfb      	adds	r3, r7, #7
2000025e:	781b      	ldrb	r3, [r3, #0]
20000260:	2b0f      	cmp	r3, #15
20000262:	d904      	bls.n	2000026e <out7Seg+0x1e>
	{
		portD->ODR_LOW = 0;
20000264:	4b07      	ldr	r3, [pc, #28]	@ (20000284 <out7Seg+0x34>)
20000266:	681b      	ldr	r3, [r3, #0]
20000268:	2200      	movs	r2, #0
2000026a:	751a      	strb	r2, [r3, #20]
	}
	else
	{
		portD->ODR_LOW = segments[c];
	}
}
2000026c:	e006      	b.n	2000027c <out7Seg+0x2c>
		portD->ODR_LOW = segments[c];
2000026e:	1dfb      	adds	r3, r7, #7
20000270:	781a      	ldrb	r2, [r3, #0]
20000272:	4b04      	ldr	r3, [pc, #16]	@ (20000284 <out7Seg+0x34>)
20000274:	681b      	ldr	r3, [r3, #0]
20000276:	4904      	ldr	r1, [pc, #16]	@ (20000288 <out7Seg+0x38>)
20000278:	5c8a      	ldrb	r2, [r1, r2]
2000027a:	751a      	strb	r2, [r3, #20]
}
2000027c:	46c0      	nop			@ (mov r8, r8)
2000027e:	46bd      	mov	sp, r7
20000280:	b002      	add	sp, #8
20000282:	bd80      	pop	{r7, pc}
20000284:	200002a4 	andcs	r0, r0, r4, lsr #5
20000288:	200002b8 			@ <UNDEFINED> instruction: 0x200002b8

2000028c <main>:

int main(void)
{
2000028c:	b580      	push	{r7, lr}
2000028e:	af00      	add	r7, sp, #0
	app_init();
20000290:	f7ff febe 	bl	20000010 <app_init>
	while(1)
	{
		out7Seg(keyb());
20000294:	f7ff ffae 	bl	200001f4 <keyb>
20000298:	0003      	movs	r3, r0
2000029a:	0018      	movs	r0, r3
2000029c:	f7ff ffd8 	bl	20000250 <out7Seg>
200002a0:	e7f8      	b.n	20000294 <main+0x8>
200002a2:	46c0      	nop			@ (mov r8, r8)

200002a4 <portD>:
200002a4:	40020c00 	andmi	r0, r2, r0, lsl #24

200002a8 <keyValue>:
200002a8:	0a030201 	beq	200c0ab4 <segments+0xc07fc>
200002ac:	0b060504 	bleq	201816c4 <segments+0x18140c>
200002b0:	0c090807 	stceq	8, cr0, [r9], {7}
200002b4:	0d0f000e 	stceq	0, cr0, [pc, #-56]	@ 20000284 <out7Seg+0x34>

200002b8 <segments>:
200002b8:	4f5b063f 	svcmi	0x005b063f
200002bc:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
200002c0:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	@ 0xfffffe04
200002c4:	71795e39 	cmnvc	r9, r9, lsr lr

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000053f 	andeq	r0, r0, pc, lsr r5
   4:	04010005 	streq	r0, [r1], #-5
   8:	00000000 	andeq	r0, r0, r0
   c:	00026912 	andeq	r6, r2, r2, lsl r9
  10:	015a0c00 	cmpeq	sl, r0, lsl #24
  14:	02c50000 	sbceq	r0, r5, #0
  18:	000c0000 	andeq	r0, ip, r0
	...
  24:	04040000 	streq	r0, [r4], #-0
  28:	00ef090b 	rsceq	r0, pc, fp, lsl #18
  2c:	23010000 	movwcs	r0, #4096	@ 0x1000
  30:	0d000000 	stceq	0, cr0, [r0, #-0]
  34:	000000ef 	andeq	r0, r0, pc, ror #1
  38:	28010002 	stmdacs	r1, {r1}
  3c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
  40:	000000ef 	andeq	r0, r0, pc, ror #1
  44:	2d010202 	sfmcs	f0, 4, [r1, #-8]
  48:	0f000000 	svceq	0x00000000
  4c:	000000ef 	andeq	r0, r0, pc, ror #1
  50:	32010402 	andcc	r0, r1, #33554432	@ 0x2000000
  54:	10000000 	andne	r0, r0, r0
  58:	000000ef 	andeq	r0, r0, pc, ror #1
  5c:	37010602 	strcc	r0, [r1, -r2, lsl #12]
  60:	11000000 	mrsne	r0, (UNDEF: 0)
  64:	000000ef 	andeq	r0, r0, pc, ror #1
  68:	3c010802 	stccc	8, cr0, [r1], {2}
  6c:	12000000 	andne	r0, r0, #0
  70:	000000ef 	andeq	r0, r0, pc, ror #1
  74:	41010a02 	tstmi	r1, r2, lsl #20
  78:	13000000 	movwne	r0, #0
  7c:	000000ef 	andeq	r0, r0, pc, ror #1
  80:	46010c02 	strmi	r0, [r1], -r2, lsl #24
  84:	14000000 	strne	r0, [r0], #-0
  88:	000000ef 	andeq	r0, r0, pc, ror #1
  8c:	4b010e02 	blmi	4389c <startup-0x1ffbc764>
  90:	15000000 	strne	r0, [r0, #-0]
  94:	000000ef 	andeq	r0, r0, pc, ror #1
  98:	50011002 	andpl	r1, r1, r2
  9c:	16000000 	strne	r0, [r0], -r0
  a0:	000000ef 	andeq	r0, r0, pc, ror #1
  a4:	4b011202 	blmi	448b4 <startup-0x1ffbb74c>
  a8:	17000002 	strne	r0, [r0, -r2]
  ac:	000000ef 	andeq	r0, r0, pc, ror #1
  b0:	51011402 	tstpl	r1, r2, lsl #8
  b4:	18000002 	stmdane	r0, {r1}
  b8:	000000ef 	andeq	r0, r0, pc, ror #1
  bc:	57011602 	strpl	r1, [r1, -r2, lsl #12]
  c0:	19000002 	stmdbne	r0, {r1}
  c4:	000000ef 	andeq	r0, r0, pc, ror #1
  c8:	5d011802 	stcpl	8, cr1, [r1, #-8]
  cc:	1a000002 	bne	dc <startup-0x1fffff24>
  d0:	000000ef 	andeq	r0, r0, pc, ror #1
  d4:	63011a02 	movwvs	r1, #6658	@ 0x1a02
  d8:	1b000002 	blne	e8 <startup-0x1fffff18>
  dc:	000000ef 	andeq	r0, r0, pc, ror #1
  e0:	37011c02 	strcc	r1, [r1, -r2, lsl #24]
  e4:	1c000003 	stcne	0, cr0, [r0], {3}
  e8:	000000ef 	andeq	r0, r0, pc, ror #1
  ec:	09001e02 	stmdbeq	r0, {r1, r9, sl, fp, ip}
  f0:	009e0801 	addseq	r0, lr, r1, lsl #16
  f4:	29050000 	stmdbcs	r5, {}	@ <UNPREDICTABLE>
  f8:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
  fc:	00002601 	andeq	r2, r0, r1, lsl #12
 100:	20020400 	andcs	r0, r2, r0, lsl #8
 104:	0001ca09 	andeq	ip, r1, r9, lsl #20
 108:	00230100 	eoreq	r0, r3, r0, lsl #2
 10c:	ef220000 	svc	0x00220000
 110:	01000000 	mrseq	r0, (UNDEF: 0)
 114:	00280100 	eoreq	r0, r8, r0, lsl #2
 118:	ef230000 	svc	0x00230000
 11c:	01000000 	mrseq	r0, (UNDEF: 0)
 120:	002d0101 	eoreq	r0, sp, r1, lsl #2
 124:	ef240000 	svc	0x00240000
 128:	01000000 	mrseq	r0, (UNDEF: 0)
 12c:	00320102 	eorseq	r0, r2, r2, lsl #2
 130:	ef250000 	svc	0x00250000
 134:	01000000 	mrseq	r0, (UNDEF: 0)
 138:	00370103 	eorseq	r0, r7, r3, lsl #2
 13c:	ef260000 	svc	0x00260000
 140:	01000000 	mrseq	r0, (UNDEF: 0)
 144:	003c0104 	eorseq	r0, ip, r4, lsl #2
 148:	ef270000 	svc	0x00270000
 14c:	01000000 	mrseq	r0, (UNDEF: 0)
 150:	00410105 	subeq	r0, r1, r5, lsl #2
 154:	ef280000 	svc	0x00280000
 158:	01000000 	mrseq	r0, (UNDEF: 0)
 15c:	00460106 	subeq	r0, r6, r6, lsl #2
 160:	ef290000 	svc	0x00290000
 164:	01000000 	mrseq	r0, (UNDEF: 0)
 168:	004b0107 	subeq	r0, fp, r7, lsl #2
 16c:	ef2a0000 	svc	0x002a0000
 170:	01000000 	mrseq	r0, (UNDEF: 0)
 174:	00500108 	subseq	r0, r0, r8, lsl #2
 178:	ef2b0000 	svc	0x002b0000
 17c:	01000000 	mrseq	r0, (UNDEF: 0)
 180:	024b0109 	subeq	r0, fp, #1073741826	@ 0x40000002
 184:	ef2c0000 	svc	0x002c0000
 188:	01000000 	mrseq	r0, (UNDEF: 0)
 18c:	0251010a 	subseq	r0, r1, #-2147483646	@ 0x80000002
 190:	ef2d0000 	svc	0x002d0000
 194:	01000000 	mrseq	r0, (UNDEF: 0)
 198:	0257010b 	subseq	r0, r7, #-1073741822	@ 0xc0000002
 19c:	ef2e0000 	svc	0x002e0000
 1a0:	01000000 	mrseq	r0, (UNDEF: 0)
 1a4:	025d010c 	subseq	r0, sp, #12, 2
 1a8:	ef2f0000 	svc	0x002f0000
 1ac:	01000000 	mrseq	r0, (UNDEF: 0)
 1b0:	0263010d 	rsbeq	r0, r3, #1073741827	@ 0x40000003
 1b4:	ef300000 	svc	0x00300000
 1b8:	01000000 	mrseq	r0, (UNDEF: 0)
 1bc:	0337010e 	teqeq	r7, #-2147483645	@ 0x80000003
 1c0:	ef310000 	svc	0x00310000
 1c4:	01000000 	mrseq	r0, (UNDEF: 0)
 1c8:	1c05000f 	stcne	0, cr0, [r5], {15}
 1cc:	33000001 	movwcc	r0, #1
 1d0:	00010101 	andeq	r0, r1, r1, lsl #2
 1d4:	000b0500 	andeq	r0, fp, r0, lsl #10
 1d8:	17350000 	ldrne	r0, [r5, -r0]!
 1dc:	000000f6 	strdeq	r0, [r0], -r6
 1e0:	00005e05 	andeq	r5, r0, r5, lsl #28
 1e4:	ca163900 	bgt	58e5ec <startup-0x1fa71a14>
 1e8:	05000001 	streq	r0, [r0, #-1]
 1ec:	000000f7 	strdeq	r0, [r0], -r7
 1f0:	00f6173d 	rscseq	r1, r6, sp, lsr r7
 1f4:	85050000 	strhi	r0, [r5, #-0]
 1f8:	43000000 	movwmi	r0, #0
 1fc:	0000f617 	andeq	pc, r0, r7, lsl r6	@ <UNPREDICTABLE>
 200:	4e040400 	cfcpysmi	mvf0, mvf4
 204:	00022203 	andeq	r2, r2, r3, lsl #4
 208:	01060200 	mrseq	r0, LR_usr
 20c:	1b4e0000 	blne	1380214 <startup-0x1ec7fdec>
 210:	00000222 	andeq	r0, r0, r2, lsr #4
 214:	00d30200 	sbcseq	r0, r3, r0, lsl #4
 218:	264e0000 	strbcs	r0, [lr], -r0
 21c:	00000222 	andeq	r0, r0, r2, lsr #4
 220:	02090002 	andeq	r0, r9, #2
 224:	0000de07 	andeq	sp, r0, r7, lsl #28
 228:	4c040600 	stcmi	6, cr0, [r4], {-0}
 22c:	0000024c 	andeq	r0, r0, ip, asr #4
 230:	00006c03 	andeq	r6, r0, r3, lsl #24
 234:	4c104d00 	ldcmi	13, cr4, [r0], {-0}
 238:	07000002 	streq	r0, [r0, -r2]
 23c:	00000201 	andeq	r0, r0, r1, lsl #4
 240:	0001e603 	andeq	lr, r1, r3, lsl #12
 244:	d50f4f00 	strle	r4, [pc, #-3840]	@ fffff34c <segments+0xdffff094>
 248:	00000001 	andeq	r0, r0, r1
 24c:	e4070409 	str	r0, [r7], #-1033	@ 0xfffffbf7
 250:	04000000 	streq	r0, [r0], #-0
 254:	74035402 	strvc	r5, [r3], #-1026	@ 0xfffffbfe
 258:	02000002 	andeq	r0, r0, #2
 25c:	00000000 	andeq	r0, r0, r0
 260:	00ef1a54 	rsceq	r1, pc, r4, asr sl	@ <UNPREDICTABLE>
 264:	02000000 	andeq	r0, r0, #0
 268:	00000110 	andeq	r0, r0, r0, lsl r1
 26c:	00ef2654 	rsceq	r2, pc, r4, asr r6	@ <UNPREDICTABLE>
 270:	00010000 	andeq	r0, r1, r0
 274:	97520206 	ldrbls	r0, [r2, -r6, lsl #4]
 278:	03000002 	movweq	r0, #2
 27c:	00000097 	muleq	r0, r7, r0
 280:	02221253 	eoreq	r1, r2, #805306373	@ 0x30000005
 284:	53070000 	movwpl	r0, #28672	@ 0x7000
 288:	03000002 	movweq	r0, #2
 28c:	00000147 	andeq	r0, r0, r7, asr #2
 290:	01e01155 	mvneq	r1, r5, asr r1
 294:	04000000 	streq	r0, [r0], #-0
 298:	b8035a04 	stmdalt	r3, {r2, r9, fp, ip, lr}
 29c:	02000002 	andeq	r0, r0, #2
 2a0:	000002b9 			@ <UNDEFINED> instruction: 0x000002b9
 2a4:	02221b5a 	eoreq	r1, r2, #92160	@ 0x16800
 2a8:	02000000 	andeq	r0, r0, #0
 2ac:	000000c6 	andeq	r0, r0, r6, asr #1
 2b0:	0222285a 	eoreq	r2, r2, #5898240	@ 0x5a0000
 2b4:	00020000 	andeq	r0, r2, r0
 2b8:	db580406 	blle	16012d8 <startup-0x1e9fed28>
 2bc:	03000002 	movweq	r0, #2
 2c0:	0000013a 	andeq	r0, r0, sl, lsr r1
 2c4:	024c1059 	subeq	r1, ip, #89	@ 0x59
 2c8:	97070000 	strls	r0, [r7, -r0]
 2cc:	03000002 	movweq	r0, #2
 2d0:	00000200 	andeq	r0, r0, r0, lsl #4
 2d4:	01eb125b 	mvneq	r1, fp, asr r2
 2d8:	04000000 	streq	r0, [r0], #-0
 2dc:	fc036004 	stc2	0, cr6, [r3], {4}
 2e0:	02000002 	andeq	r0, r0, #2
 2e4:	00000072 	andeq	r0, r0, r2, ror r0
 2e8:	02221b60 	eoreq	r1, r2, #96, 22	@ 0x18000
 2ec:	02000000 	andeq	r0, r0, #0
 2f0:	000001d3 	ldrdeq	r0, [r0], -r3
 2f4:	02222660 	eoreq	r2, r2, #96, 12	@ 0x6000000
 2f8:	00020000 	andeq	r0, r2, r0
 2fc:	1f5e0406 	svcne	0x005e0406
 300:	03000003 	movweq	r0, #3
 304:	000001fa 	strdeq	r0, [r0], -sl
 308:	024c105f 	subeq	r1, ip, #95	@ 0x5f
 30c:	db070000 	blle	1c0314 <startup-0x1fe3fcec>
 310:	03000002 	movweq	r0, #2
 314:	000001eb 	andeq	r0, r0, fp, ror #3
 318:	01f61561 	mvnseq	r1, r1, ror #10
 31c:	04000000 	streq	r0, [r0], #-0
 320:	40036602 	andmi	r6, r3, r2, lsl #12
 324:	02000003 	andeq	r0, r0, #3
 328:	00000226 	andeq	r0, r0, r6, lsr #4
 32c:	00ef1a66 	rsceq	r1, pc, r6, ror #20
 330:	02000000 	andeq	r0, r0, #0
 334:	00000131 	andeq	r0, r0, r1, lsr r1
 338:	00ef2366 	rsceq	r2, pc, r6, ror #6
 33c:	00010000 	andeq	r0, r1, r0
 340:	62640206 	rsbvs	r0, r4, #1610612736	@ 0x60000000
 344:	0c000003 	stceq	0, cr0, [r0], {3}
 348:	00524449 	subseq	r4, r2, r9, asr #8
 34c:	00022265 	andeq	r2, r2, r5, ror #4
 350:	031f0700 	tsteq	pc, #0, 14
 354:	33030000 	movwcc	r0, #12288	@ 0x3000
 358:	67000002 	strvs	r0, [r0, -r2]
 35c:	0001ca10 	andeq	ip, r1, r0, lsl sl
 360:	02040000 	andeq	r0, r4, #0
 364:	0383036e 	orreq	r0, r3, #-1207959551	@ 0xb8000001
 368:	52020000 	andpl	r0, r2, #0
 36c:	6e000001 	cdpvs	0, 0, cr0, cr0, cr1, {0}
 370:	0000ef1a 	andeq	lr, r0, sl, lsl pc
 374:	bd020000 	stclt	0, cr0, [r2, #-0]
 378:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
 37c:	0000ef23 	andeq	lr, r0, r3, lsr #30
 380:	06000100 	streq	r0, [r0], -r0, lsl #2
 384:	03a56c02 			@ <UNDEFINED> instruction: 0x03a56c02
 388:	4f0c0000 	svcmi	0x000c0000
 38c:	6d005244 	sfmvs	f5, 4, [r0, #-272]	@ 0xfffffef0
 390:	00000222 	andeq	r0, r0, r2, lsr #4
 394:	00036207 	andeq	r6, r3, r7, lsl #4
 398:	01c80300 	biceq	r0, r8, r0, lsl #6
 39c:	106f0000 	rsbne	r0, pc, r0
 3a0:	000001ca 	andeq	r0, r0, sl, asr #3
 3a4:	49180400 	ldmdbmi	r8, {sl}
 3a8:	0003de09 	andeq	sp, r3, r9, lsl #28
 3ac:	02290800 	eoreq	r0, r9, #0, 16
 3b0:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
 3b4:	00000274 	andeq	r0, r0, r4, ror r2
 3b8:	02b80804 	adcseq	r0, r8, #4, 16	@ 0x40000
 3bc:	08080000 	stmdaeq	r8, {}	@ <UNPREDICTABLE>
 3c0:	000002fc 	strdeq	r0, [r0], -ip
 3c4:	0340080c 	movteq	r0, #2060	@ 0x80c
 3c8:	02100000 	andseq	r0, r0, #0
 3cc:	000000ac 	andeq	r0, r0, ip, lsr #1
 3d0:	0222116a 	eoreq	r1, r2, #-2147483622	@ 0x8000001a
 3d4:	08120000 	ldmdaeq	r2, {}	@ <UNPREDICTABLE>
 3d8:	00000383 	andeq	r0, r0, r3, lsl #7
 3dc:	2e050014 	mcrcs	0, 0, r0, cr5, cr4, {0}
 3e0:	72000002 	andvc	r0, r0, #2
 3e4:	0003a501 	andeq	sl, r3, r1, lsl #10
 3e8:	00f10a00 	rscseq	r0, r1, r0, lsl #20
 3ec:	07750000 	ldrbeq	r0, [r5, -r0]!
 3f0:	000003fa 	strdeq	r0, [r0], -sl
 3f4:	02a40305 	adceq	r0, r4, #335544320	@ 0x14000000
 3f8:	04132000 	ldreq	r2, [r3], #-0
 3fc:	000003de 	ldrdeq	r0, [r0], -lr
 400:	0000ef0d 	andeq	lr, r0, sp, lsl #30
 404:	00041600 	andeq	r1, r4, r0, lsl #12
 408:	024c0b00 	subeq	r0, ip, #0, 22
 40c:	0b030000 	bleq	c0414 <startup-0x1ff3fbec>
 410:	0000024c 	andeq	r0, r0, ip, asr #4
 414:	550a0003 	strpl	r0, [sl, #-3]
 418:	aa000000 	bge	420 <startup-0x1ffffbe0>
 41c:	0004000f 	andeq	r0, r4, pc
 420:	a8030500 	stmdage	r3, {r8, sl}
 424:	0d200002 	stceq	0, cr0, [r0, #-8]!
 428:	00000437 	andeq	r0, r0, r7, lsr r4
 42c:	00000437 	andeq	r0, r0, r7, lsr r4
 430:	00024c0b 	andeq	r4, r2, fp, lsl #24
 434:	09000f00 	stmdbeq	r0, {r8, r9, sl, fp}
 438:	00a70801 	adceq	r0, r7, r1, lsl #16
 43c:	7c0a0000 	stcvc	0, cr0, [sl], {-0}
 440:	c4000000 	strgt	r0, [r0], #-0
 444:	00042706 	andeq	r2, r4, r6, lsl #14
 448:	b8030500 	stmdalt	r3, {r8, sl}
 44c:	14200002 	strtne	r0, [r0], #-2
 450:	00000142 	andeq	r0, r0, r2, asr #2
 454:	6505e301 	strvs	lr, [r5, #-769]	@ 0xfffffcff
 458:	8c000004 	stchi	0, cr0, [r0], {4}
 45c:	16200002 	strtne	r0, [r0], -r2
 460:	01000000 	mrseq	r0, (UNDEF: 0)
 464:	0504159c 	streq	r1, [r4, #-1436]	@ 0xfffffa64
 468:	00746e69 	rsbseq	r6, r4, r9, ror #28
 46c:	0001290e 	andeq	r2, r1, lr, lsl #18
 470:	0250d700 	subseq	sp, r0, #0, 14
 474:	003c2000 	eorseq	r2, ip, r0
 478:	9c010000 	stcls	0, cr0, [r1], {-0}
 47c:	0000048d 	andeq	r0, r0, sp, lsl #9
 480:	d700630f 	strle	r6, [r0, -pc, lsl #6]
 484:	0000ef1d 	andeq	lr, r0, sp, lsl pc
 488:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 48c:	02181600 	andseq	r1, r8, #0, 12
 490:	b2010000 	andlt	r0, r1, #0
 494:	0000ef0f 	andeq	lr, r0, pc, lsl #30
 498:	0001f400 	andeq	pc, r1, r0, lsl #8
 49c:	00005c20 	andeq	r5, r0, r0, lsr #24
 4a0:	da9c0100 	ble	fe7008a8 <segments+0xde7005f0>
 4a4:	10000004 	andne	r0, r0, r4
 4a8:	200001fa 	strdcs	r0, [r0], -sl
 4ac:	00000048 	andeq	r0, r0, r8, asr #32
 4b0:	776f7217 			@ <UNDEFINED> instruction: 0x776f7217
 4b4:	0bb40100 	bleq	fed008bc <segments+0xded00604>
 4b8:	00000465 	andeq	r0, r0, r5, ror #8
 4bc:	106c9102 	rsbne	r9, ip, r2, lsl #2
 4c0:	20000200 	andcs	r0, r0, r0, lsl #4
 4c4:	00000036 	andeq	r0, r0, r6, lsr r0
 4c8:	00023d18 	andeq	r3, r2, r8, lsl sp
 4cc:	11b80100 			@ <UNDEFINED> instruction: 0x11b80100
 4d0:	000000ef 	andeq	r0, r0, pc, ror #1
 4d4:	006b9102 	rsbeq	r9, fp, r2, lsl #2
 4d8:	0c190000 	ldceq	0, cr0, [r9], {-0}
 4dc:	01000002 	tsteq	r0, r2
 4e0:	00ef0f9f 	smlaleq	r0, pc, pc, pc	@ <UNPREDICTABLE>
 4e4:	01940000 	orrseq	r0, r4, r0
 4e8:	00602000 	rsbeq	r2, r0, r0
 4ec:	9c010000 	stcls	0, cr0, [r1], {-0}
 4f0:	0000170e 	andeq	r1, r0, lr, lsl #14
 4f4:	00dc9600 	sbcseq	r9, ip, r0, lsl #12
 4f8:	00b82000 	adcseq	r2, r8, r0
 4fc:	9c010000 	stcls	0, cr0, [r1], {-0}
 500:	00000522 	andeq	r0, r0, r2, lsr #10
 504:	776f720f 	strbvc	r7, [pc, -pc, lsl #4]!
 508:	65179600 	ldrvs	r9, [r7, #-1536]	@ 0xfffffa00
 50c:	02000004 	andeq	r0, r0, #4
 510:	1d1a7491 	cfldrsne	mvf7, [sl, #-580]	@ 0xfffffdbc
 514:	01000002 	tsteq	r0, r2
 518:	04652096 	strbteq	r2, [r5], #-150	@ 0xffffff6a
 51c:	91020000 	mrsls	r0, (UNDEF: 2)
 520:	b4110070 	ldrlt	r0, [r1], #-112	@ 0xffffff90
 524:	77000000 	strvc	r0, [r0, -r0]
 528:	20000010 	andcs	r0, r0, r0, lsl r0
 52c:	000000cc 	andeq	r0, r0, ip, asr #1
 530:	de119c01 	cdple	12, 1, cr9, cr1, cr1, {0}
 534:	03000001 	movweq	r0, #1
 538:	20000000 	andcs	r0, r0, r0
 53c:	0000000c 	andeq	r0, r0, ip
 540:	Address 0x540 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	03000d01 	movweq	r0, #3329	@ 0xd01
   4:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
   8:	21390b3b 	teqcs	r9, fp, lsr fp
   c:	0d134910 	vldreq.16	s8, [r3, #-32]	@ 0xffffffe0	@ <UNPREDICTABLE>
  10:	000b6b0b 	andeq	r6, fp, fp, lsl #22
  14:	000d0200 	andeq	r0, sp, r0, lsl #4
  18:	213a0e03 	teqcs	sl, r3, lsl #28
  1c:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
  20:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  24:	0300000b 	movweq	r0, #11
  28:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  2c:	3b01213a 	blcc	4851c <startup-0x1ffb7ae4>
  30:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  34:	04000013 	streq	r0, [r0], #-19	@ 0xffffffed
  38:	0b0b0113 	bleq	2c048c <startup-0x1fd3fb74>
  3c:	3b01213a 	blcc	4852c <startup-0x1ffb7ad4>
  40:	010b390b 	tsteq	fp, fp, lsl #18
  44:	05000013 	streq	r0, [r0, #-19]	@ 0xffffffed
  48:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  4c:	3b01213a 	blcc	4853c <startup-0x1ffb7ac4>
  50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  54:	06000013 			@ <UNDEFINED> instruction: 0x06000013
  58:	0b0b0117 	bleq	2c04bc <startup-0x1fd3fb44>
  5c:	3b01213a 	blcc	4854c <startup-0x1ffb7ab4>
  60:	0221390b 	eoreq	r3, r1, #180224	@ 0x2c000
  64:	00001301 	andeq	r1, r0, r1, lsl #6
  68:	49000d07 	stmdbmi	r0, {r0, r1, r2, r8, sl, fp}
  6c:	08000013 	stmdaeq	r0, {r0, r1, r4}
  70:	1349000d 	movtne	r0, #36877	@ 0x900d
  74:	00000b38 	andeq	r0, r0, r8, lsr fp
  78:	0b002409 	bleq	90a4 <startup-0x1fff6f5c>
  7c:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
  80:	0a00000e 	beq	c0 <startup-0x1fffff40>
  84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  88:	3b01213a 	blcc	48578 <startup-0x1ffb7a88>
  8c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  90:	02193f13 	andseq	r3, r9, #19, 30	@ 0x4c
  94:	0b000018 	bleq	fc <startup-0x1fffff04>
  98:	13490021 	movtne	r0, #36897	@ 0x9021
  9c:	00000b2f 	andeq	r0, r0, pc, lsr #22
  a0:	03000d0c 	movweq	r0, #3340	@ 0xd0c
  a4:	01213a08 			@ <UNDEFINED> instruction: 0x01213a08
  a8:	21390b3b 	teqcs	r9, fp, lsr fp
  ac:	00134912 	andseq	r4, r3, r2, lsl r9
  b0:	01010d00 	tsteq	r1, r0, lsl #26
  b4:	13011349 	movwne	r1, #4937	@ 0x1349
  b8:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
  bc:	03193f01 	tsteq	r9, #1, 30
  c0:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
  c4:	21390b3b 	teqcs	r9, fp, lsr fp
  c8:	11192706 	tstne	r9, r6, lsl #14
  cc:	40061201 	andmi	r1, r6, r1, lsl #4
  d0:	01197a18 	tsteq	r9, r8, lsl sl
  d4:	0f000013 	svceq	0x00000013
  d8:	08030005 	stmdaeq	r3, {r0, r2}
  dc:	3b01213a 	blcc	485cc <startup-0x1ffb7a34>
  e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  e4:	00180213 	andseq	r0, r8, r3, lsl r2
  e8:	010b1000 	mrseq	r1, (UNDEF: 11)
  ec:	06120111 			@ <UNDEFINED> instruction: 0x06120111
  f0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
  f4:	03193f00 	tsteq	r9, #0, 30
  f8:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
  fc:	21390b3b 	teqcs	r9, fp, lsr fp
 100:	11192706 	tstne	r9, r6, lsl #14
 104:	40061201 	andmi	r1, r6, r1, lsl #4
 108:	00197a18 	andseq	r7, r9, r8, lsl sl
 10c:	01111200 	tsteq	r1, r0, lsl #4
 110:	0b130e25 	bleq	4c39ac <startup-0x1fb3c654>
 114:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 118:	01111755 	tsteq	r1, r5, asr r7
 11c:	00001710 	andeq	r1, r0, r0, lsl r7
 120:	0b000f13 	bleq	3d74 <startup-0x1fffc28c>
 124:	0013490b 	andseq	r4, r3, fp, lsl #18
 128:	002e1400 	eoreq	r1, lr, r0, lsl #8
 12c:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
 130:	0b3b0b3a 	bleq	ec2e20 <startup-0x1f13d1e0>
 134:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 138:	01111349 	tsteq	r1, r9, asr #6
 13c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 140:	0000197c 	andeq	r1, r0, ip, ror r9
 144:	0b002415 	bleq	91a0 <startup-0x1fff6e60>
 148:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
 14c:	16000008 	strne	r0, [r0], -r8
 150:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
 154:	0b3a0e03 	bleq	e83968 <startup-0x1f17c698>
 158:	0b390b3b 	bleq	e42e4c <startup-0x1f1bd1b4>
 15c:	13491927 	movtne	r1, #39207	@ 0x9927
 160:	06120111 			@ <UNDEFINED> instruction: 0x06120111
 164:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
 168:	00001301 	andeq	r1, r0, r1, lsl #6
 16c:	03003417 	movweq	r3, #1047	@ 0x417
 170:	3b0b3a08 	blcc	2ce998 <startup-0x1fd31668>
 174:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 178:	00180213 	andseq	r0, r8, r3, lsl r2
 17c:	00341800 	eorseq	r1, r4, r0, lsl #16
 180:	0b3a0e03 	bleq	e83994 <startup-0x1f17c66c>
 184:	0b390b3b 	bleq	e42e78 <startup-0x1f1bd188>
 188:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 18c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 190:	03193f00 	tsteq	r9, #0, 30
 194:	3b0b3a0e 	blcc	2ce9d4 <startup-0x1fd3162c>
 198:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 19c:	12011113 	andne	r1, r1, #-1073741820	@ 0xc0000004
 1a0:	7a184006 	bvc	6101c0 <startup-0x1f9efe40>
 1a4:	1a000019 	bne	210 <startup-0x1ffffdf0>
 1a8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1ac:	0b3b0b3a 	bleq	ec2e9c <startup-0x1f13d164>
 1b0:	13490b39 	movtne	r0, #39737	@ 0x9b39
 1b4:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000292 	muleq	r0, r2, r2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_rnglists:

00000000 <.debug_rnglists>:
   0:	00000016 	andeq	r0, r0, r6, lsl r0
   4:	00040005 	andeq	r0, r4, r5
   8:	00000000 	andeq	r0, r0, r0
   c:	00001007 	andeq	r1, r0, r7
  10:	07059220 	streq	r9, [r5, -r0, lsr #4]
  14:	20000000 	andcs	r0, r0, r0
  18:	Address 0x18 is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000206 	andeq	r0, r0, r6, lsl #4
   4:	00840003 	addeq	r0, r4, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	44010000 	strmi	r0, [r1], #-0
  1c:	74532f3a 	ldrbvc	r2, [r3], #-3898	@ 0xfffff0c6
  20:	65696475 	strbvs	r6, [r9, #-1141]!	@ 0xfffffb8b
  24:	614d2f73 	hvcvs	54003	@ 0xd2f3
  28:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
  2c:	724f2d65 	subvc	r2, pc, #6464	@ 0x1940
  30:	746e6569 	strbtvc	r6, [lr], #-1385	@ 0xfffffa97
  34:	502d6465 	eorpl	r6, sp, r5, ror #8
  38:	72676f72 	rsbvc	r6, r7, #456	@ 0x1c8
  3c:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
  40:	572f676e 	strpl	r6, [pc, -lr, ror #14]!
  44:	2f6b726f 	svccs	0x006b726f
  48:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
  4c:	2d656e69 	stclcs	14, cr6, [r5, #-420]!	@ 0xfffffe5c
  50:	6569724f 	strbvs	r7, [r9, #-591]!	@ 0xfffffdb1
  54:	6465746e 	strbtvs	r7, [r5], #-1134	@ 0xfffffb92
  58:	6f72502d 	svcvs	0x0072502d
  5c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	@ 0xfffffe64
  60:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
  64:	7574532d 	ldrbvc	r5, [r4, #-813]!	@ 0xfffffcd3
  68:	73656964 	cmnvc	r5, #100, 18	@ 0x190000
  6c:	462f432f 	strtmi	r4, [pc], -pc, lsr #6
  70:	68746669 	ldmdavs	r4!, {r0, r3, r5, r6, r9, sl, sp, lr}^
  74:	2f797254 	svccs	0x00797254
  78:	7079656b 	rsbsvc	r6, r9, fp, ror #10
  7c:	00006461 	andeq	r6, r0, r1, ror #8
  80:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
  84:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  88:	00010063 	andeq	r0, r1, r3, rrx
  8c:	01050000 	mrseq	r0, (UNDEF: 5)
  90:	00020500 	andeq	r0, r2, r0, lsl #10
  94:	15200000 	strne	r0, [r0, #-0]!
  98:	2f212113 	svccs	0x00212113
  9c:	00030221 	andeq	r0, r3, r1, lsr #4
  a0:	01050101 	tsteq	r5, r1, lsl #2
  a4:	10020500 	andne	r0, r2, r0, lsl #10
  a8:	03200000 	nopeq	{0}	@ <UNPREDICTABLE>
  ac:	050100f7 	streq	r0, [r1, #-247]	@ 0xffffff09
  b0:	13052f07 	movwne	r2, #24327	@ 0x5f07
  b4:	2f07052e 	svccs	0x0007052e
  b8:	052e1405 	streq	r1, [lr, #-1029]!	@ 0xfffffbfb
  bc:	13053107 	movwne	r3, #20743	@ 0x5107
  c0:	4b07052e 	blmi	1c1580 <startup-0x1fe3ea80>
  c4:	052e1305 	streq	r1, [lr, #-773]!	@ 0xfffffcfb
  c8:	14054b07 	strne	r4, [r5], #-2823	@ 0xfffff4f9
  cc:	4b07052e 	blmi	1c158c <startup-0x1fe3ea74>
  d0:	052e1405 	streq	r1, [lr, #-1029]!	@ 0xfffffbfb
  d4:	4a090307 	bmi	240cf8 <startup-0x1fdbf308>
  d8:	052e1405 	streq	r1, [lr, #-1029]!	@ 0xfffffbfb
  dc:	14057507 	strne	r7, [r5], #-1287	@ 0xfffffaf9
  e0:	7507052e 	strvc	r0, [r7, #-1326]	@ 0xfffffad2
  e4:	052e1405 	streq	r1, [lr, #-1029]!	@ 0xfffffbfb
  e8:	14057507 	strne	r7, [r5], #-1287	@ 0xfffffaf9
  ec:	7607052e 	strvc	r0, [r7], -lr, lsr #10
  f0:	052e1a05 	streq	r1, [lr, #-2565]!	@ 0xfffff5fb
  f4:	1a054b07 	bne	152d18 <startup-0x1fead2e8>
  f8:	4b07052e 	blmi	1c15b8 <startup-0x1fe3ea48>
  fc:	052e1a05 	streq	r1, [lr, #-2565]!	@ 0xfffff5fb
 100:	1a054b07 	bne	152d24 <startup-0x1fead2dc>
 104:	4c01052e 	cfstr32mi	mvfx0, [r1], {46}	@ 0x2e
 108:	59050586 	stmdbpl	r5, {r1, r2, r7, r8, sl}
 10c:	02001805 	andeq	r1, r0, #327680	@ 0x50000
 110:	053c0104 	ldreq	r0, [ip, #-260]!	@ 0xfffffefc
 114:	0402002b 	streq	r0, [r2], #-43	@ 0xffffffd5
 118:	01052e01 	tsteq	r5, r1, lsl #28
 11c:	01040200 	mrseq	r0, R12_usr
 120:	1d0a05e8 	cfstr32ne	mvfx0, [sl, #-928]	@ 0xfffffc60
 124:	02001c05 	andeq	r1, r0, #1280	@ 0x500
 128:	053c0104 	ldreq	r0, [ip, #-260]!	@ 0xfffffefc
 12c:	0402002f 	streq	r0, [r2], #-47	@ 0xffffffd1
 130:	01052e01 	tsteq	r5, r1, lsl #28
 134:	01040200 	mrseq	r0, R12_usr
 138:	1e0a05e7 	cfsh32ne	mvfx0, mvfx10, #-9
 13c:	02001c05 	andeq	r1, r0, #1280	@ 0x500
 140:	053c0104 	ldreq	r0, [ip, #-260]!	@ 0xfffffefc
 144:	0402002f 	streq	r0, [r2], #-47	@ 0xffffffd1
 148:	01052e01 	tsteq	r5, r1, lsl #28
 14c:	01040200 	mrseq	r0, R12_usr
 150:	1f0a05e6 	svcne	0x000a05e6
 154:	02001c05 	andeq	r1, r0, #1280	@ 0x500
 158:	053c0104 	ldreq	r0, [ip, #-260]!	@ 0xfffffefc
 15c:	0402002f 	streq	r0, [r2], #-47	@ 0xffffffd1
 160:	01052e01 	tsteq	r5, r1, lsl #28
 164:	0b056ac9 	bleq	15ac90 <startup-0x1fea5370>
 168:	2e1c0530 	cfmvr64hcs	r0, mvdx12
 16c:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
 170:	0402002b 	streq	r0, [r2], #-43	@ 0xffffffd5
 174:	0b052e01 	bleq	14b980 <startup-0x1feb4680>
 178:	2e1c052f 	cfmul64cs	mvdx0, mvdx12, mvdx15
 17c:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
 180:	0402002b 	streq	r0, [r2], #-43	@ 0xffffffd5
 184:	0b052e01 	bleq	14b990 <startup-0x1feb4670>
 188:	2e1d052f 	cfmul64cs	mvdx0, mvdx13, mvdx15
 18c:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
 190:	0402002c 	streq	r0, [r2], #-44	@ 0xffffffd4
 194:	0b052e01 	bleq	14b9a0 <startup-0x1feb4660>
 198:	2e1d052f 	cfmul64cs	mvdx0, mvdx13, mvdx15
 19c:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
 1a0:	0402002c 	streq	r0, [r2], #-44	@ 0xffffffd4
 1a4:	09052e01 	stmdbeq	r5, {r0, r9, sl, fp, sp}
 1a8:	21010530 	tstcs	r1, r0, lsr r5
 1ac:	05580b03 	ldrbeq	r0, [r8, #-2819]	@ 0xfffff4fd
 1b0:	02053d0b 	andeq	r3, r5, #704	@ 0x2c0
 1b4:	2303052e 	movwcs	r0, #13614	@ 0x352e
 1b8:	05592105 	ldrbeq	r2, [r9, #-261]	@ 0xfffffefb
 1bc:	06055903 	streq	r5, [r5], -r3, lsl #18
 1c0:	4c18055a 	cfldr32mi	mvfx0, [r8], {90}	@ 0x5a
 1c4:	02002005 	andeq	r2, r0, #5
 1c8:	77030204 	strvc	r0, [r3, -r4, lsl #4]
 1cc:	00180582 	andseq	r0, r8, r2, lsl #11
 1d0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 1d4:	0d030905 	vstreq.16	s0, [r3, #-10]	@ <UNPREDICTABLE>
 1d8:	2101053c 	tstcs	r1, ip, lsr r5
 1dc:	05661603 	strbeq	r1, [r6, #-1539]!	@ 0xfffff9fd
 1e0:	08056705 	stmdaeq	r5, {r0, r2, r8, r9, sl, sp, lr}
 1e4:	2e12054c 	cfmac32cs	mvfx0, mvfx2, mvfx12
 1e8:	05340105 	ldreq	r0, [r4, #-261]!	@ 0xfffffefb
 1ec:	08051e1c 	stmdaeq	r5, {r2, r3, r4, r9, sl, fp, ip}
 1f0:	2e1c052e 	cfmul64cs	mvdx0, mvdx12, mvdx14
 1f4:	052e1205 	streq	r1, [lr, #-517]!	@ 0xfffffdfb
 1f8:	05852201 	streq	r2, [r5, #513]	@ 0x201
 1fc:	03052f02 	movweq	r2, #24322	@ 0x5f02
 200:	01040200 	mrseq	r0, R12_usr
 204:	00070231 	andeq	r0, r7, r1, lsr r2
 208:	Address 0x208 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5059544f 	subspl	r5, r9, pc, asr #8
   4:	4c5f5245 	lfmmi	f5, 2, [pc], {69}	@ 0x45
   8:	5000574f 	andpl	r5, r0, pc, asr #14
   c:	4d74726f 	lfmmi	f7, 2, [r4, #-444]!	@ 0xfffffe44
  10:	4d65646f 	cfstrdmi	mvd6, [r5, #-444]!	@ 0xfffffe44
  14:	73007061 	movwvc	r7, #97	@ 0x61
  18:	6f527465 	svcvs	0x00527465
  1c:	61745377 	cmnvs	r4, r7, ror r3
  20:	70006574 	andvc	r6, r0, r4, ror r5
  24:	00306e69 	eorseq	r6, r0, r9, ror #28
  28:	316e6970 	smccc	59024	@ 0xe690
  2c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
  30:	69700032 	ldmdbvs	r0!, {r1, r4, r5}^
  34:	7000336e 	andvc	r3, r0, lr, ror #6
  38:	00346e69 	eorseq	r6, r4, r9, ror #28
  3c:	356e6970 	strbcc	r6, [lr, #-2416]!	@ 0xfffff690
  40:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
  44:	69700036 	ldmdbvs	r0!, {r1, r2, r4, r5}^
  48:	7000376e 	andvc	r3, r0, lr, ror #14
  4c:	00386e69 	eorseq	r6, r8, r9, ror #28
  50:	396e6970 	stmdbcc	lr!, {r4, r5, r6, r8, fp, sp, lr}^
  54:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
  58:	756c6156 	strbvc	r6, [ip, #-342]!	@ 0xfffffeaa
  5c:	754f0065 	strbvc	r0, [pc, #-101]	@ ffffffff <segments+0xdffffd47>
  60:	74757074 	ldrbtvc	r7, [r5], #-116	@ 0xffffff8c
  64:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
  68:	0070614d 	rsbseq	r6, r0, sp, asr #2
  6c:	45444f4d 	strbmi	r4, [r4, #-3917]	@ 0xfffff0b3
  70:	55500052 	ldrbpl	r0, [r0, #-82]	@ 0xffffffae
  74:	5f524450 	svcpl	0x00524450
  78:	00574f4c 	subseq	r4, r7, ip, asr #30
  7c:	6d676573 	cfstr64vs	mvdx6, [r7, #-460]!	@ 0xfffffe34
  80:	73746e65 	cmnvc	r4, #1616	@ 0x650
  84:	6c755000 	ldclvs	0, cr5, [r5], #-0
  88:	5070556c 	rsbspl	r5, r0, ip, ror #10
  8c:	446c6c75 	strbtmi	r6, [ip], #-3189	@ 0xfffff38b
  90:	4d6e776f 	stclmi	7, cr7, [lr, #-444]!	@ 0xfffffe44
  94:	4f007061 	svcmi	0x00007061
  98:	45505954 	ldrbmi	r5, [r0, #-2388]	@ 0xfffff6ac
  9c:	6e750052 	mrcvs	0, 3, r0, cr5, cr2, {2}
  a0:	6e676973 			@ <UNDEFINED> instruction: 0x6e676973
  a4:	63206465 			@ <UNDEFINED> instruction: 0x63206465
  a8:	00726168 	rsbseq	r6, r2, r8, ror #2
  ac:	73756e75 	cmnvc	r5, #1872	@ 0x750
  b0:	00306465 	eorseq	r6, r0, r5, ror #8
  b4:	5f707061 	svcpl	0x00707061
  b8:	74696e69 	strbtvc	r6, [r9], #-3689	@ 0xfffff197
  bc:	52444f00 	subpl	r4, r4, #0, 30
  c0:	4749485f 	smlsldmi	r4, r9, pc, r8	@ <UNPREDICTABLE>
  c4:	534f0048 	movtpl	r0, #61512	@ 0xf048
  c8:	44454550 	strbmi	r4, [r5], #-1360	@ 0xfffffab0
  cc:	49485f52 	stmdbmi	r8, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
  d0:	4d004847 	stcmi	8, cr4, [r0, #-284]	@ 0xfffffee4
  d4:	5245444f 	subpl	r4, r5, #1325400064	@ 0x4f000000
  d8:	4749485f 	smlsldmi	r4, r9, pc, r8	@ <UNPREDICTABLE>
  dc:	68730048 	ldmdavs	r3!, {r3, r6}^
  e0:	2074726f 	rsbscs	r7, r4, pc, ror #4
  e4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  e8:	64656e67 	strbtvs	r6, [r5], #-3687	@ 0xfffff199
  ec:	746e6920 	strbtvc	r6, [lr], #-2336	@ 0xfffff6e0
  f0:	726f7000 	rsbvc	r7, pc, #0
  f4:	4f004474 	svcmi	0x00004474
  f8:	75707475 	ldrbvc	r7, [r0, #-1141]!	@ 0xfffffb8b
  fc:	65705374 	ldrbvs	r5, [r0, #-884]!	@ 0xfffffc8c
 100:	614d6465 	cmpvs	sp, r5, ror #8
 104:	4f4d0070 	svcmi	0x004d0070
 108:	5f524544 	svcpl	0x00524544
 10c:	00574f4c 	subseq	r4, r7, ip, asr #30
 110:	5059544f 	subspl	r5, r9, pc, asr #8
 114:	485f5245 	ldmdami	pc, {r0, r2, r6, r9, ip, lr}^	@ <UNPREDICTABLE>
 118:	00484749 	subeq	r4, r8, r9, asr #14
 11c:	42656e4f 	rsbmi	r6, r5, #1264	@ 0x4f0
 120:	65507469 	ldrbvs	r7, [r0, #-1129]	@ 0xfffffb97
 124:	6e695072 	mcrvs	0, 3, r5, cr9, cr2, {3}
 128:	74756f00 	ldrbtvc	r6, [r5], #-3840	@ 0xfffff100
 12c:	67655337 			@ <UNDEFINED> instruction: 0x67655337
 130:	52444900 	subpl	r4, r4, #0, 18
 134:	4749485f 	smlsldmi	r4, r9, pc, r8	@ <UNPREDICTABLE>
 138:	534f0048 	movtpl	r0, #61512	@ 0xf048
 13c:	44454550 	strbmi	r4, [r5], #-1360	@ 0xfffffab0
 140:	616d0052 	qdsubvs	r0, r2, sp
 144:	6f006e69 	svcvs	0x00006e69
 148:	75707475 	ldrbvc	r7, [r0, #-1141]!	@ 0xfffffb8b
 14c:	70795474 	rsbsvc	r5, r9, r4, ror r4
 150:	444f0065 	strbmi	r0, [pc], #-101	@ 158 <startup-0x1ffffea8>
 154:	4f4c5f52 	svcmi	0x004c5f52
 158:	3a440057 	bcc	11002bc <startup-0x1eeffd44>
 15c:	7574532f 	ldrbvc	r5, [r4, #-815]!	@ 0xfffffcd1
 160:	73656964 	cmnvc	r5, #100, 18	@ 0x190000
 164:	63614d2f 	cmnvs	r1, #3008	@ 0xbc0
 168:	656e6968 	strbvs	r6, [lr, #-2408]!	@ 0xfffff698
 16c:	69724f2d 	ldmdbvs	r2!, {r0, r2, r3, r5, r8, r9, sl, fp, lr}^
 170:	65746e65 	ldrbvs	r6, [r4, #-3685]!	@ 0xfffff19b
 174:	72502d64 	subsvc	r2, r0, #100, 26	@ 0x1900
 178:	6172676f 	cmnvs	r2, pc, ror #14
 17c:	6e696d6d 	cdpvs	13, 6, cr6, cr9, cr13, {3}
 180:	6f572f67 	svcvs	0x00572f67
 184:	4d2f6b72 	vstmdbmi	pc!, {d6-<overflow reg d62>}
 188:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 18c:	4f2d656e 	svcmi	0x002d656e
 190:	6e656972 			@ <UNDEFINED> instruction: 0x6e656972
 194:	2d646574 	cfstr64cs	mvdx6, [r4, #-464]!	@ 0xfffffe30
 198:	676f7250 			@ <UNDEFINED> instruction: 0x676f7250
 19c:	6d6d6172 	stfvse	f6, [sp, #-456]!	@ 0xfffffe38
 1a0:	2d676e69 	stclcs	14, cr6, [r7, #-420]!	@ 0xfffffe5c
 1a4:	64757453 	ldrbtvs	r7, [r5], #-1107	@ 0xfffffbad
 1a8:	2f736569 	svccs	0x00736569
 1ac:	69462f43 	stmdbvs	r6, {r0, r1, r6, r8, r9, sl, fp, sp}^
 1b0:	54687466 	strbtpl	r7, [r8], #-1126	@ 0xfffffb9a
 1b4:	6b2f7972 	blvs	bde784 <startup-0x1f42187c>
 1b8:	61707965 	cmnvs	r0, r5, ror #18
 1bc:	74732f64 	ldrbtvc	r2, [r3], #-3940	@ 0xfffff09c
 1c0:	75747261 	ldrbvc	r7, [r4, #-609]!	@ 0xfffffd9f
 1c4:	00632e70 	rsbeq	r2, r3, r0, ror lr
 1c8:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 1cc:	61447475 	hvcvs	18245	@ 0x4745
 1d0:	50006174 	andpl	r6, r0, r4, ror r1
 1d4:	52445055 	subpl	r5, r4, #85	@ 0x55
 1d8:	4749485f 	smlsldmi	r4, r9, pc, r8	@ <UNPREDICTABLE>
 1dc:	74730048 	ldrbtvc	r0, [r3], #-72	@ 0xffffffb8
 1e0:	75747261 	ldrbvc	r7, [r4, #-609]!	@ 0xfffffd9f
 1e4:	6f6d0070 	svcvs	0x006d0070
 1e8:	70006564 	andvc	r6, r0, r4, ror #10
 1ec:	556c6c75 	strbpl	r6, [ip, #-3189]!	@ 0xfffff38b
 1f0:	6c755070 	ldclvs	0, cr5, [r5], #-448	@ 0xfffffe40
 1f4:	776f446c 	strbvc	r4, [pc, -ip, ror #8]!
 1f8:	5550006e 	ldrbpl	r0, [r0, #-110]	@ 0xffffff92
 1fc:	00524450 	subseq	r4, r2, r0, asr r4
 200:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 204:	70537475 	subsvc	r7, r3, r5, ror r4
 208:	00646565 	rsbeq	r6, r4, r5, ror #10
 20c:	64616572 	strbtvs	r6, [r1], #-1394	@ 0xfffffa8e
 210:	756c6f43 	strbvc	r6, [ip, #-3907]!	@ 0xfffff0bd
 214:	00736e6d 	rsbseq	r6, r3, sp, ror #28
 218:	6279656b 	rsbsvs	r6, r9, #448790528	@ 0x1ac00000
 21c:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
 220:	74617453 	strbtvc	r7, [r1], #-1107	@ 0xfffffbad
 224:	44490065 	strbmi	r0, [r9], #-101	@ 0xffffff9b
 228:	4f4c5f52 	svcmi	0x004c5f52
 22c:	50470057 	subpl	r0, r7, r7, asr r0
 230:	69004f49 	stmdbvs	r0, {r0, r3, r6, r8, r9, sl, fp, lr}
 234:	7475706e 	ldrbtvc	r7, [r5], #-110	@ 0xffffff92
 238:	61746144 	cmnvs	r4, r4, asr #2
 23c:	6c6f6300 	stclvs	3, cr6, [pc], #-0	@ 244 <startup-0x1ffffdbc>
 240:	506e6d75 	rsbpl	r6, lr, r5, ror sp
 244:	73736572 	cmnvc	r3, #478150656	@ 0x1c800000
 248:	70006465 	andvc	r6, r0, r5, ror #8
 24c:	30316e69 	eorscc	r6, r1, r9, ror #28
 250:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
 254:	70003131 	andvc	r3, r0, r1, lsr r1
 258:	32316e69 	eorscc	r6, r1, #1680	@ 0x690
 25c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
 260:	70003331 	andvc	r3, r0, r1, lsr r3
 264:	34316e69 	ldrtcc	r6, [r1], #-3689	@ 0xfffff197
 268:	554e4700 	strbpl	r4, [lr, #-1792]	@ 0xfffff900
 26c:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 270:	2e323120 	rsfcssp	f3, f2, f0
 274:	20312e33 	eorscs	r2, r1, r3, lsr lr
 278:	33323032 	teqcc	r2, #50	@ 0x32
 27c:	36323630 			@ <UNDEFINED> instruction: 0x36323630
 280:	746d2d20 	strbtvc	r2, [sp], #-3360	@ 0xfffff2e0
 284:	626d7568 	rsbvs	r7, sp, #104, 10	@ 0x1a000000
 288:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 28c:	74616f6c 	strbtvc	r6, [r1], #-3948	@ 0xfffff094
 290:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 294:	666f733d 			@ <UNDEFINED> instruction: 0x666f733d
 298:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	@ 0xfffffe30
 29c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 2a0:	6d72613d 	ldfvse	f6, [r2, #-244]!	@ 0xffffff0c
 2a4:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	@ 0xfffffe28
 2a8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 2ac:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 2b0:	6474732d 	ldrbtvs	r7, [r4], #-813	@ 0xfffffcd3
 2b4:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 2b8:	50534f00 	subspl	r4, r3, r0, lsl #30
 2bc:	52444545 	subpl	r4, r4, #289406976	@ 0x11400000
 2c0:	574f4c5f 	smlsldpl	r4, pc, pc, ip	@ <UNPREDICTABLE>
 2c4:	5c3a4400 	cfldrspl	mvf4, [sl], #-0
 2c8:	64757453 	ldrbtvs	r7, [r5], #-1107	@ 0xfffffbad
 2cc:	5c736569 	cfldr64pl	mvdx6, [r3], #-420	@ 0xfffffe5c
 2d0:	6863614d 	stmdavs	r3!, {r0, r2, r3, r6, r8, sp, lr}^
 2d4:	2d656e69 	stclcs	14, cr6, [r5, #-420]!	@ 0xfffffe5c
 2d8:	6569724f 	strbvs	r7, [r9, #-591]!	@ 0xfffffdb1
 2dc:	6465746e 	strbtvs	r7, [r5], #-1134	@ 0xfffffb92
 2e0:	6f72502d 	svcvs	0x0072502d
 2e4:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	@ 0xfffffe64
 2e8:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
 2ec:	726f575c 	rsbvc	r5, pc, #92, 14	@ 0x1700000
 2f0:	614d5c6b 	cmpvs	sp, fp, ror #24
 2f4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 2f8:	724f2d65 	subvc	r2, pc, #6464	@ 0x1940
 2fc:	746e6569 	strbtvc	r6, [lr], #-1385	@ 0xfffffa97
 300:	502d6465 	eorpl	r6, sp, r5, ror #8
 304:	72676f72 	rsbvc	r6, r7, #456	@ 0x1c8
 308:	696d6d61 	stmdbvs	sp!, {r0, r5, r6, r8, sl, fp, sp, lr}^
 30c:	532d676e 			@ <UNDEFINED> instruction: 0x532d676e
 310:	69647574 	stmdbvs	r4!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 314:	435c7365 	cmpmi	ip, #-1811939327	@ 0x94000001
 318:	6669465c 			@ <UNDEFINED> instruction: 0x6669465c
 31c:	72546874 	subsvc	r6, r4, #116, 16	@ 0x740000
 320:	656b5c79 	strbvs	r5, [fp, #-3193]!	@ 0xfffff387
 324:	64617079 	strbtvs	r7, [r1], #-121	@ 0xffffff87
 328:	6f775400 	svcvs	0x00775400
 32c:	73746942 	cmnvc	r4, #1081344	@ 0x108000
 330:	50726550 	rsbspl	r6, r2, r0, asr r5
 334:	70006e69 	andvc	r6, r0, r9, ror #28
 338:	35316e69 	ldrcc	r6, [r1, #-3689]!	@ 0xfffff197
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	72412820 	subvc	r2, r1, #32, 16	@ 0x200000
   8:	4e47206d 	cdpmi	0, 4, cr2, cr7, cr13, {3}
   c:	6f542055 	svcvs	0x00542055
  10:	68636c6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
  14:	206e6961 	rsbcs	r6, lr, r1, ror #18
  18:	332e3231 			@ <UNDEFINED> instruction: 0x332e3231
  1c:	6c65522e 	sfmvs	f5, 2, [r5], #-184	@ 0xffffff48
  20:	42282031 	eormi	r2, r8, #49	@ 0x31
  24:	646c6975 	strbtvs	r6, [ip], #-2421	@ 0xfffff68b
  28:	6d726120 	ldfvse	f6, [r2, #-128]!	@ 0xffffff80
  2c:	2e32312d 	rsfcssp	f3, f2, #5.0
  30:	29293533 	stmdbcs	r9!, {r0, r1, r4, r5, r8, sl, ip, sp}
  34:	2e323120 	rsfcssp	f3, f2, f0
  38:	20312e33 	eorscs	r2, r1, r3, lsr lr
  3c:	33323032 	teqcc	r2, #50	@ 0x32
  40:	36323630 			@ <UNDEFINED> instruction: 0x36323630
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	@ 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	@ 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	@ 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x28 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	000000cc 	andeq	r0, r0, ip, asr #1
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	200000dc 	ldrdcs	r0, [r0], -ip
  48:	000000b8 	strheq	r0, [r0], -r8
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41100e 	stcleq	0, cr1, [r1, #-56]	@ 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	00000018 	andeq	r0, r0, r8, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000194 	mulcs	r0, r4, r1
  68:	00000060 	andeq	r0, r0, r0, rrx
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0000070d 	andeq	r0, r0, sp, lsl #14
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	200001f4 	strdcs	r0, [r0], -r4
  84:	0000005c 	andeq	r0, r0, ip, asr r0
  88:	840c0e41 	strhi	r0, [ip], #-3649	@ 0xfffff1bf
  8c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  90:	180e4101 	stmdane	lr, {r0, r8, lr}
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	20000250 	andcs	r0, r0, r0, asr r2
  a4:	0000003c 	andeq	r0, r0, ip, lsr r0
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	@ 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	00000018 	andeq	r0, r0, r8, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	2000028c 	andcs	r0, r0, ip, lsl #5
  c4:	00000016 	andeq	r0, r0, r6, lsl r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0000070d 	andeq	r0, r0, sp, lsl #14
